/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(global, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/at-least-node/index.js":
/*!*********************************************!*\
  !*** ./node_modules/at-least-node/index.js ***!
  \*********************************************/
/***/ ((module) => {

eval("module.exports = r => {\n  const n = process.versions.node.split('.').map(x => parseInt(x, 10))\n  r = r.split('.').map(x => parseInt(x, 10))\n  return n[0] > r[0] || (n[0] === r[0] && (n[1] > r[1] || (n[1] === r[1] && n[2] >= r[2])))\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGtib3gtZ3VpLy4vbm9kZV9tb2R1bGVzL2F0LWxlYXN0LW5vZGUvaW5kZXguanM/Y2JjMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2F0LWxlYXN0LW5vZGUvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHIgPT4ge1xuICBjb25zdCBuID0gcHJvY2Vzcy52ZXJzaW9ucy5ub2RlLnNwbGl0KCcuJykubWFwKHggPT4gcGFyc2VJbnQoeCwgMTApKVxuICByID0gci5zcGxpdCgnLicpLm1hcCh4ID0+IHBhcnNlSW50KHgsIDEwKSlcbiAgcmV0dXJuIG5bMF0gPiByWzBdIHx8IChuWzBdID09PSByWzBdICYmIChuWzFdID4gclsxXSB8fCAoblsxXSA9PT0gclsxXSAmJiBuWzJdID49IHJbMl0pKSlcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/at-least-node/index.js\n");

/***/ }),

/***/ "./node_modules/fs-extra/lib/copy-sync/copy-sync.js":
/*!**********************************************************!*\
  !*** ./node_modules/fs-extra/lib/copy-sync/copy-sync.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar fs = __webpack_require__(/*! graceful-fs */ \"./node_modules/graceful-fs/graceful-fs.js\");\n\nvar path = __webpack_require__(/*! path */ \"path\");\n\nvar mkdirsSync = __webpack_require__(/*! ../mkdirs */ \"./node_modules/fs-extra/lib/mkdirs/index.js\").mkdirsSync;\n\nvar utimesMillisSync = __webpack_require__(/*! ../util/utimes */ \"./node_modules/fs-extra/lib/util/utimes.js\").utimesMillisSync;\n\nvar stat = __webpack_require__(/*! ../util/stat */ \"./node_modules/fs-extra/lib/util/stat.js\");\n\nfunction copySync(src, dest, opts) {\n  if (typeof opts === 'function') {\n    opts = {\n      filter: opts\n    };\n  }\n\n  opts = opts || {};\n  opts.clobber = 'clobber' in opts ? !!opts.clobber : true; // default to true for now\n\n  opts.overwrite = 'overwrite' in opts ? !!opts.overwrite : opts.clobber; // overwrite falls back to clobber\n  // Warn about using preserveTimestamps on 32-bit node\n\n  if (opts.preserveTimestamps && process.arch === 'ia32') {\n    console.warn(\"fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\\n\\n    see https://github.com/jprichardson/node-fs-extra/issues/269\");\n  }\n\n  var _stat$checkPathsSync = stat.checkPathsSync(src, dest, 'copy'),\n      srcStat = _stat$checkPathsSync.srcStat,\n      destStat = _stat$checkPathsSync.destStat;\n\n  stat.checkParentPathsSync(src, srcStat, dest, 'copy');\n  return handleFilterAndCopy(destStat, src, dest, opts);\n}\n\nfunction handleFilterAndCopy(destStat, src, dest, opts) {\n  if (opts.filter && !opts.filter(src, dest)) return;\n  var destParent = path.dirname(dest);\n  if (!fs.existsSync(destParent)) mkdirsSync(destParent);\n  return startCopy(destStat, src, dest, opts);\n}\n\nfunction startCopy(destStat, src, dest, opts) {\n  if (opts.filter && !opts.filter(src, dest)) return;\n  return getStats(destStat, src, dest, opts);\n}\n\nfunction getStats(destStat, src, dest, opts) {\n  var statSync = opts.dereference ? fs.statSync : fs.lstatSync;\n  var srcStat = statSync(src);\n  if (srcStat.isDirectory()) return onDir(srcStat, destStat, src, dest, opts);else if (srcStat.isFile() || srcStat.isCharacterDevice() || srcStat.isBlockDevice()) return onFile(srcStat, destStat, src, dest, opts);else if (srcStat.isSymbolicLink()) return onLink(destStat, src, dest, opts);\n}\n\nfunction onFile(srcStat, destStat, src, dest, opts) {\n  if (!destStat) return copyFile(srcStat, src, dest, opts);\n  return mayCopyFile(srcStat, src, dest, opts);\n}\n\nfunction mayCopyFile(srcStat, src, dest, opts) {\n  if (opts.overwrite) {\n    fs.unlinkSync(dest);\n    return copyFile(srcStat, src, dest, opts);\n  } else if (opts.errorOnExist) {\n    throw new Error(\"'\".concat(dest, \"' already exists\"));\n  }\n}\n\nfunction copyFile(srcStat, src, dest, opts) {\n  fs.copyFileSync(src, dest);\n  if (opts.preserveTimestamps) handleTimestamps(srcStat.mode, src, dest);\n  return setDestMode(dest, srcStat.mode);\n}\n\nfunction handleTimestamps(srcMode, src, dest) {\n  // Make sure the file is writable before setting the timestamp\n  // otherwise open fails with EPERM when invoked with 'r+'\n  // (through utimes call)\n  if (fileIsNotWritable(srcMode)) makeFileWritable(dest, srcMode);\n  return setDestTimestamps(src, dest);\n}\n\nfunction fileIsNotWritable(srcMode) {\n  return (srcMode & 128) === 0;\n}\n\nfunction makeFileWritable(dest, srcMode) {\n  return setDestMode(dest, srcMode | 128);\n}\n\nfunction setDestMode(dest, srcMode) {\n  return fs.chmodSync(dest, srcMode);\n}\n\nfunction setDestTimestamps(src, dest) {\n  // The initial srcStat.atime cannot be trusted\n  // because it is modified by the read(2) system call\n  // (See https://nodejs.org/api/fs.html#fs_stat_time_values)\n  var updatedSrcStat = fs.statSync(src);\n  return utimesMillisSync(dest, updatedSrcStat.atime, updatedSrcStat.mtime);\n}\n\nfunction onDir(srcStat, destStat, src, dest, opts) {\n  if (!destStat) return mkDirAndCopy(srcStat.mode, src, dest, opts);\n\n  if (destStat && !destStat.isDirectory()) {\n    throw new Error(\"Cannot overwrite non-directory '\".concat(dest, \"' with directory '\").concat(src, \"'.\"));\n  }\n\n  return copyDir(src, dest, opts);\n}\n\nfunction mkDirAndCopy(srcMode, src, dest, opts) {\n  fs.mkdirSync(dest);\n  copyDir(src, dest, opts);\n  return setDestMode(dest, srcMode);\n}\n\nfunction copyDir(src, dest, opts) {\n  fs.readdirSync(src).forEach(function (item) {\n    return copyDirItem(item, src, dest, opts);\n  });\n}\n\nfunction copyDirItem(item, src, dest, opts) {\n  var srcItem = path.join(src, item);\n  var destItem = path.join(dest, item);\n\n  var _stat$checkPathsSync2 = stat.checkPathsSync(srcItem, destItem, 'copy'),\n      destStat = _stat$checkPathsSync2.destStat;\n\n  return startCopy(destStat, srcItem, destItem, opts);\n}\n\nfunction onLink(destStat, src, dest, opts) {\n  var resolvedSrc = fs.readlinkSync(src);\n\n  if (opts.dereference) {\n    resolvedSrc = path.resolve(process.cwd(), resolvedSrc);\n  }\n\n  if (!destStat) {\n    return fs.symlinkSync(resolvedSrc, dest);\n  } else {\n    var resolvedDest;\n\n    try {\n      resolvedDest = fs.readlinkSync(dest);\n    } catch (err) {\n      // dest exists and is a regular file or directory,\n      // Windows may throw UNKNOWN error. If dest already exists,\n      // fs throws error anyway, so no need to guard against it here.\n      if (err.code === 'EINVAL' || err.code === 'UNKNOWN') return fs.symlinkSync(resolvedSrc, dest);\n      throw err;\n    }\n\n    if (opts.dereference) {\n      resolvedDest = path.resolve(process.cwd(), resolvedDest);\n    }\n\n    if (stat.isSrcSubdir(resolvedSrc, resolvedDest)) {\n      throw new Error(\"Cannot copy '\".concat(resolvedSrc, \"' to a subdirectory of itself, '\").concat(resolvedDest, \"'.\"));\n    } // prevent copy if src is a subdir of dest since unlinking\n    // dest in this case would result in removing src contents\n    // and therefore a broken symlink would be created.\n\n\n    if (fs.statSync(dest).isDirectory() && stat.isSrcSubdir(resolvedDest, resolvedSrc)) {\n      throw new Error(\"Cannot overwrite '\".concat(resolvedDest, \"' with '\").concat(resolvedSrc, \"'.\"));\n    }\n\n    return copyLink(resolvedSrc, dest);\n  }\n}\n\nfunction copyLink(resolvedSrc, dest) {\n  fs.unlinkSync(dest);\n  return fs.symlinkSync(resolvedSrc, dest);\n}\n\nmodule.exports = copySync;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/fs-extra/lib/copy-sync/copy-sync.js\n");

/***/ }),

/***/ "./node_modules/fs-extra/lib/copy-sync/index.js":
/*!******************************************************!*\
  !*** ./node_modules/fs-extra/lib/copy-sync/index.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nmodule.exports = {\n  copySync: __webpack_require__(/*! ./copy-sync */ \"./node_modules/fs-extra/lib/copy-sync/copy-sync.js\")\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGtib3gtZ3VpLy4vbm9kZV9tb2R1bGVzL2ZzLWV4dHJhL2xpYi9jb3B5LXN5bmMvaW5kZXguanM/ZGE1NCJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiY29weVN5bmMiLCJyZXF1aXJlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2ZDLFVBQVEsRUFBRUMsbUJBQU8sQ0FBQyx1RUFBRDtBQURGLENBQWpCIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2ZzLWV4dHJhL2xpYi9jb3B5LXN5bmMvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNvcHlTeW5jOiByZXF1aXJlKCcuL2NvcHktc3luYycpXG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/fs-extra/lib/copy-sync/index.js\n");

/***/ }),

/***/ "./node_modules/fs-extra/lib/copy/copy.js":
/*!************************************************!*\
  !*** ./node_modules/fs-extra/lib/copy/copy.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar fs = __webpack_require__(/*! graceful-fs */ \"./node_modules/graceful-fs/graceful-fs.js\");\n\nvar path = __webpack_require__(/*! path */ \"path\");\n\nvar mkdirs = __webpack_require__(/*! ../mkdirs */ \"./node_modules/fs-extra/lib/mkdirs/index.js\").mkdirs;\n\nvar pathExists = __webpack_require__(/*! ../path-exists */ \"./node_modules/fs-extra/lib/path-exists/index.js\").pathExists;\n\nvar utimesMillis = __webpack_require__(/*! ../util/utimes */ \"./node_modules/fs-extra/lib/util/utimes.js\").utimesMillis;\n\nvar stat = __webpack_require__(/*! ../util/stat */ \"./node_modules/fs-extra/lib/util/stat.js\");\n\nfunction copy(src, dest, opts, cb) {\n  if (typeof opts === 'function' && !cb) {\n    cb = opts;\n    opts = {};\n  } else if (typeof opts === 'function') {\n    opts = {\n      filter: opts\n    };\n  }\n\n  cb = cb || function () {};\n\n  opts = opts || {};\n  opts.clobber = 'clobber' in opts ? !!opts.clobber : true; // default to true for now\n\n  opts.overwrite = 'overwrite' in opts ? !!opts.overwrite : opts.clobber; // overwrite falls back to clobber\n  // Warn about using preserveTimestamps on 32-bit node\n\n  if (opts.preserveTimestamps && process.arch === 'ia32') {\n    console.warn(\"fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\\n\\n    see https://github.com/jprichardson/node-fs-extra/issues/269\");\n  }\n\n  stat.checkPaths(src, dest, 'copy', function (err, stats) {\n    if (err) return cb(err);\n    var srcStat = stats.srcStat,\n        destStat = stats.destStat;\n    stat.checkParentPaths(src, srcStat, dest, 'copy', function (err) {\n      if (err) return cb(err);\n      if (opts.filter) return handleFilter(checkParentDir, destStat, src, dest, opts, cb);\n      return checkParentDir(destStat, src, dest, opts, cb);\n    });\n  });\n}\n\nfunction checkParentDir(destStat, src, dest, opts, cb) {\n  var destParent = path.dirname(dest);\n  pathExists(destParent, function (err, dirExists) {\n    if (err) return cb(err);\n    if (dirExists) return startCopy(destStat, src, dest, opts, cb);\n    mkdirs(destParent, function (err) {\n      if (err) return cb(err);\n      return startCopy(destStat, src, dest, opts, cb);\n    });\n  });\n}\n\nfunction handleFilter(onInclude, destStat, src, dest, opts, cb) {\n  Promise.resolve(opts.filter(src, dest)).then(function (include) {\n    if (include) return onInclude(destStat, src, dest, opts, cb);\n    return cb();\n  }, function (error) {\n    return cb(error);\n  });\n}\n\nfunction startCopy(destStat, src, dest, opts, cb) {\n  if (opts.filter) return handleFilter(getStats, destStat, src, dest, opts, cb);\n  return getStats(destStat, src, dest, opts, cb);\n}\n\nfunction getStats(destStat, src, dest, opts, cb) {\n  var stat = opts.dereference ? fs.stat : fs.lstat;\n  stat(src, function (err, srcStat) {\n    if (err) return cb(err);\n    if (srcStat.isDirectory()) return onDir(srcStat, destStat, src, dest, opts, cb);else if (srcStat.isFile() || srcStat.isCharacterDevice() || srcStat.isBlockDevice()) return onFile(srcStat, destStat, src, dest, opts, cb);else if (srcStat.isSymbolicLink()) return onLink(destStat, src, dest, opts, cb);\n  });\n}\n\nfunction onFile(srcStat, destStat, src, dest, opts, cb) {\n  if (!destStat) return copyFile(srcStat, src, dest, opts, cb);\n  return mayCopyFile(srcStat, src, dest, opts, cb);\n}\n\nfunction mayCopyFile(srcStat, src, dest, opts, cb) {\n  if (opts.overwrite) {\n    fs.unlink(dest, function (err) {\n      if (err) return cb(err);\n      return copyFile(srcStat, src, dest, opts, cb);\n    });\n  } else if (opts.errorOnExist) {\n    return cb(new Error(\"'\".concat(dest, \"' already exists\")));\n  } else return cb();\n}\n\nfunction copyFile(srcStat, src, dest, opts, cb) {\n  fs.copyFile(src, dest, function (err) {\n    if (err) return cb(err);\n    if (opts.preserveTimestamps) return handleTimestampsAndMode(srcStat.mode, src, dest, cb);\n    return setDestMode(dest, srcStat.mode, cb);\n  });\n}\n\nfunction handleTimestampsAndMode(srcMode, src, dest, cb) {\n  // Make sure the file is writable before setting the timestamp\n  // otherwise open fails with EPERM when invoked with 'r+'\n  // (through utimes call)\n  if (fileIsNotWritable(srcMode)) {\n    return makeFileWritable(dest, srcMode, function (err) {\n      if (err) return cb(err);\n      return setDestTimestampsAndMode(srcMode, src, dest, cb);\n    });\n  }\n\n  return setDestTimestampsAndMode(srcMode, src, dest, cb);\n}\n\nfunction fileIsNotWritable(srcMode) {\n  return (srcMode & 128) === 0;\n}\n\nfunction makeFileWritable(dest, srcMode, cb) {\n  return setDestMode(dest, srcMode | 128, cb);\n}\n\nfunction setDestTimestampsAndMode(srcMode, src, dest, cb) {\n  setDestTimestamps(src, dest, function (err) {\n    if (err) return cb(err);\n    return setDestMode(dest, srcMode, cb);\n  });\n}\n\nfunction setDestMode(dest, srcMode, cb) {\n  return fs.chmod(dest, srcMode, cb);\n}\n\nfunction setDestTimestamps(src, dest, cb) {\n  // The initial srcStat.atime cannot be trusted\n  // because it is modified by the read(2) system call\n  // (See https://nodejs.org/api/fs.html#fs_stat_time_values)\n  fs.stat(src, function (err, updatedSrcStat) {\n    if (err) return cb(err);\n    return utimesMillis(dest, updatedSrcStat.atime, updatedSrcStat.mtime, cb);\n  });\n}\n\nfunction onDir(srcStat, destStat, src, dest, opts, cb) {\n  if (!destStat) return mkDirAndCopy(srcStat.mode, src, dest, opts, cb);\n\n  if (destStat && !destStat.isDirectory()) {\n    return cb(new Error(\"Cannot overwrite non-directory '\".concat(dest, \"' with directory '\").concat(src, \"'.\")));\n  }\n\n  return copyDir(src, dest, opts, cb);\n}\n\nfunction mkDirAndCopy(srcMode, src, dest, opts, cb) {\n  fs.mkdir(dest, function (err) {\n    if (err) return cb(err);\n    copyDir(src, dest, opts, function (err) {\n      if (err) return cb(err);\n      return setDestMode(dest, srcMode, cb);\n    });\n  });\n}\n\nfunction copyDir(src, dest, opts, cb) {\n  fs.readdir(src, function (err, items) {\n    if (err) return cb(err);\n    return copyDirItems(items, src, dest, opts, cb);\n  });\n}\n\nfunction copyDirItems(items, src, dest, opts, cb) {\n  var item = items.pop();\n  if (!item) return cb();\n  return copyDirItem(items, item, src, dest, opts, cb);\n}\n\nfunction copyDirItem(items, item, src, dest, opts, cb) {\n  var srcItem = path.join(src, item);\n  var destItem = path.join(dest, item);\n  stat.checkPaths(srcItem, destItem, 'copy', function (err, stats) {\n    if (err) return cb(err);\n    var destStat = stats.destStat;\n    startCopy(destStat, srcItem, destItem, opts, function (err) {\n      if (err) return cb(err);\n      return copyDirItems(items, src, dest, opts, cb);\n    });\n  });\n}\n\nfunction onLink(destStat, src, dest, opts, cb) {\n  fs.readlink(src, function (err, resolvedSrc) {\n    if (err) return cb(err);\n\n    if (opts.dereference) {\n      resolvedSrc = path.resolve(process.cwd(), resolvedSrc);\n    }\n\n    if (!destStat) {\n      return fs.symlink(resolvedSrc, dest, cb);\n    } else {\n      fs.readlink(dest, function (err, resolvedDest) {\n        if (err) {\n          // dest exists and is a regular file or directory,\n          // Windows may throw UNKNOWN error. If dest already exists,\n          // fs throws error anyway, so no need to guard against it here.\n          if (err.code === 'EINVAL' || err.code === 'UNKNOWN') return fs.symlink(resolvedSrc, dest, cb);\n          return cb(err);\n        }\n\n        if (opts.dereference) {\n          resolvedDest = path.resolve(process.cwd(), resolvedDest);\n        }\n\n        if (stat.isSrcSubdir(resolvedSrc, resolvedDest)) {\n          return cb(new Error(\"Cannot copy '\".concat(resolvedSrc, \"' to a subdirectory of itself, '\").concat(resolvedDest, \"'.\")));\n        } // do not copy if src is a subdir of dest since unlinking\n        // dest in this case would result in removing src contents\n        // and therefore a broken symlink would be created.\n\n\n        if (destStat.isDirectory() && stat.isSrcSubdir(resolvedDest, resolvedSrc)) {\n          return cb(new Error(\"Cannot overwrite '\".concat(resolvedDest, \"' with '\").concat(resolvedSrc, \"'.\")));\n        }\n\n        return copyLink(resolvedSrc, dest, cb);\n      });\n    }\n  });\n}\n\nfunction copyLink(resolvedSrc, dest, cb) {\n  fs.unlink(dest, function (err) {\n    if (err) return cb(err);\n    return fs.symlink(resolvedSrc, dest, cb);\n  });\n}\n\nmodule.exports = copy;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/fs-extra/lib/copy/copy.js\n");

/***/ }),

/***/ "./node_modules/fs-extra/lib/copy/index.js":
/*!*************************************************!*\
  !*** ./node_modules/fs-extra/lib/copy/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar u = __webpack_require__(/*! universalify */ \"./node_modules/universalify/index.js\").fromCallback;\n\nmodule.exports = {\n  copy: u(__webpack_require__(/*! ./copy */ \"./node_modules/fs-extra/lib/copy/copy.js\"))\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGtib3gtZ3VpLy4vbm9kZV9tb2R1bGVzL2ZzLWV4dHJhL2xpYi9jb3B5L2luZGV4LmpzPzcwODYiXSwibmFtZXMiOlsidSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiY29weSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsQ0FBQyxHQUFHQyw0RkFBVjs7QUFDQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2ZDLE1BQUksRUFBRUosQ0FBQyxDQUFDQyxtQkFBTyxDQUFDLHdEQUFELENBQVI7QUFEUSxDQUFqQiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9mcy1leHRyYS9saWIvY29weS9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCB1ID0gcmVxdWlyZSgndW5pdmVyc2FsaWZ5JykuZnJvbUNhbGxiYWNrXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY29weTogdShyZXF1aXJlKCcuL2NvcHknKSlcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/fs-extra/lib/copy/index.js\n");

/***/ }),

/***/ "./node_modules/fs-extra/lib/empty/index.js":
/*!**************************************************!*\
  !*** ./node_modules/fs-extra/lib/empty/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar u = __webpack_require__(/*! universalify */ \"./node_modules/universalify/index.js\").fromCallback;\n\nvar fs = __webpack_require__(/*! graceful-fs */ \"./node_modules/graceful-fs/graceful-fs.js\");\n\nvar path = __webpack_require__(/*! path */ \"path\");\n\nvar mkdir = __webpack_require__(/*! ../mkdirs */ \"./node_modules/fs-extra/lib/mkdirs/index.js\");\n\nvar remove = __webpack_require__(/*! ../remove */ \"./node_modules/fs-extra/lib/remove/index.js\");\n\nvar emptyDir = u(function emptyDir(dir, callback) {\n  callback = callback || function () {};\n\n  fs.readdir(dir, function (err, items) {\n    if (err) return mkdir.mkdirs(dir, callback);\n    items = items.map(function (item) {\n      return path.join(dir, item);\n    });\n    deleteItem();\n\n    function deleteItem() {\n      var item = items.pop();\n      if (!item) return callback();\n      remove.remove(item, function (err) {\n        if (err) return callback(err);\n        deleteItem();\n      });\n    }\n  });\n});\n\nfunction emptyDirSync(dir) {\n  var items;\n\n  try {\n    items = fs.readdirSync(dir);\n  } catch (_unused) {\n    return mkdir.mkdirsSync(dir);\n  }\n\n  items.forEach(function (item) {\n    item = path.join(dir, item);\n    remove.removeSync(item);\n  });\n}\n\nmodule.exports = {\n  emptyDirSync: emptyDirSync,\n  emptydirSync: emptyDirSync,\n  emptyDir: emptyDir,\n  emptydir: emptyDir\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGtib3gtZ3VpLy4vbm9kZV9tb2R1bGVzL2ZzLWV4dHJhL2xpYi9lbXB0eS9pbmRleC5qcz85YWI3Il0sIm5hbWVzIjpbInUiLCJyZXF1aXJlIiwiZnMiLCJwYXRoIiwibWtkaXIiLCJyZW1vdmUiLCJlbXB0eURpciIsImRpciIsImNhbGxiYWNrIiwicmVhZGRpciIsImVyciIsIml0ZW1zIiwibWtkaXJzIiwibWFwIiwiaXRlbSIsImpvaW4iLCJkZWxldGVJdGVtIiwicG9wIiwiZW1wdHlEaXJTeW5jIiwicmVhZGRpclN5bmMiLCJta2RpcnNTeW5jIiwiZm9yRWFjaCIsInJlbW92ZVN5bmMiLCJtb2R1bGUiLCJleHBvcnRzIiwiZW1wdHlkaXJTeW5jIiwiZW1wdHlkaXIiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLENBQUMsR0FBR0MsNEZBQVY7O0FBQ0EsSUFBTUMsRUFBRSxHQUFHRCxtQkFBTyxDQUFDLDhEQUFELENBQWxCOztBQUNBLElBQU1FLElBQUksR0FBR0YsbUJBQU8sQ0FBQyxrQkFBRCxDQUFwQjs7QUFDQSxJQUFNRyxLQUFLLEdBQUdILG1CQUFPLENBQUMsOERBQUQsQ0FBckI7O0FBQ0EsSUFBTUksTUFBTSxHQUFHSixtQkFBTyxDQUFDLDhEQUFELENBQXRCOztBQUVBLElBQU1LLFFBQVEsR0FBR04sQ0FBQyxDQUFDLFNBQVNNLFFBQVQsQ0FBbUJDLEdBQW5CLEVBQXdCQyxRQUF4QixFQUFrQztBQUNuREEsVUFBUSxHQUFHQSxRQUFRLElBQUksWUFBWSxDQUFFLENBQXJDOztBQUNBTixJQUFFLENBQUNPLE9BQUgsQ0FBV0YsR0FBWCxFQUFnQixVQUFDRyxHQUFELEVBQU1DLEtBQU4sRUFBZ0I7QUFDOUIsUUFBSUQsR0FBSixFQUFTLE9BQU9OLEtBQUssQ0FBQ1EsTUFBTixDQUFhTCxHQUFiLEVBQWtCQyxRQUFsQixDQUFQO0FBRVRHLFNBQUssR0FBR0EsS0FBSyxDQUFDRSxHQUFOLENBQVUsVUFBQUMsSUFBSTtBQUFBLGFBQUlYLElBQUksQ0FBQ1ksSUFBTCxDQUFVUixHQUFWLEVBQWVPLElBQWYsQ0FBSjtBQUFBLEtBQWQsQ0FBUjtBQUVBRSxjQUFVOztBQUVWLGFBQVNBLFVBQVQsR0FBdUI7QUFDckIsVUFBTUYsSUFBSSxHQUFHSCxLQUFLLENBQUNNLEdBQU4sRUFBYjtBQUNBLFVBQUksQ0FBQ0gsSUFBTCxFQUFXLE9BQU9OLFFBQVEsRUFBZjtBQUNYSCxZQUFNLENBQUNBLE1BQVAsQ0FBY1MsSUFBZCxFQUFvQixVQUFBSixHQUFHLEVBQUk7QUFDekIsWUFBSUEsR0FBSixFQUFTLE9BQU9GLFFBQVEsQ0FBQ0UsR0FBRCxDQUFmO0FBQ1RNLGtCQUFVO0FBQ1gsT0FIRDtBQUlEO0FBQ0YsR0FmRDtBQWdCRCxDQWxCaUIsQ0FBbEI7O0FBb0JBLFNBQVNFLFlBQVQsQ0FBdUJYLEdBQXZCLEVBQTRCO0FBQzFCLE1BQUlJLEtBQUo7O0FBQ0EsTUFBSTtBQUNGQSxTQUFLLEdBQUdULEVBQUUsQ0FBQ2lCLFdBQUgsQ0FBZVosR0FBZixDQUFSO0FBQ0QsR0FGRCxDQUVFLGdCQUFNO0FBQ04sV0FBT0gsS0FBSyxDQUFDZ0IsVUFBTixDQUFpQmIsR0FBakIsQ0FBUDtBQUNEOztBQUVESSxPQUFLLENBQUNVLE9BQU4sQ0FBYyxVQUFBUCxJQUFJLEVBQUk7QUFDcEJBLFFBQUksR0FBR1gsSUFBSSxDQUFDWSxJQUFMLENBQVVSLEdBQVYsRUFBZU8sSUFBZixDQUFQO0FBQ0FULFVBQU0sQ0FBQ2lCLFVBQVAsQ0FBa0JSLElBQWxCO0FBQ0QsR0FIRDtBQUlEOztBQUVEUyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZk4sY0FBWSxFQUFaQSxZQURlO0FBRWZPLGNBQVksRUFBRVAsWUFGQztBQUdmWixVQUFRLEVBQVJBLFFBSGU7QUFJZm9CLFVBQVEsRUFBRXBCO0FBSkssQ0FBakIiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZnMtZXh0cmEvbGliL2VtcHR5L2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHUgPSByZXF1aXJlKCd1bml2ZXJzYWxpZnknKS5mcm9tQ2FsbGJhY2tcbmNvbnN0IGZzID0gcmVxdWlyZSgnZ3JhY2VmdWwtZnMnKVxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKVxuY29uc3QgbWtkaXIgPSByZXF1aXJlKCcuLi9ta2RpcnMnKVxuY29uc3QgcmVtb3ZlID0gcmVxdWlyZSgnLi4vcmVtb3ZlJylcblxuY29uc3QgZW1wdHlEaXIgPSB1KGZ1bmN0aW9uIGVtcHR5RGlyIChkaXIsIGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24gKCkge31cbiAgZnMucmVhZGRpcihkaXIsIChlcnIsIGl0ZW1zKSA9PiB7XG4gICAgaWYgKGVycikgcmV0dXJuIG1rZGlyLm1rZGlycyhkaXIsIGNhbGxiYWNrKVxuXG4gICAgaXRlbXMgPSBpdGVtcy5tYXAoaXRlbSA9PiBwYXRoLmpvaW4oZGlyLCBpdGVtKSlcblxuICAgIGRlbGV0ZUl0ZW0oKVxuXG4gICAgZnVuY3Rpb24gZGVsZXRlSXRlbSAoKSB7XG4gICAgICBjb25zdCBpdGVtID0gaXRlbXMucG9wKClcbiAgICAgIGlmICghaXRlbSkgcmV0dXJuIGNhbGxiYWNrKClcbiAgICAgIHJlbW92ZS5yZW1vdmUoaXRlbSwgZXJyID0+IHtcbiAgICAgICAgaWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGVycilcbiAgICAgICAgZGVsZXRlSXRlbSgpXG4gICAgICB9KVxuICAgIH1cbiAgfSlcbn0pXG5cbmZ1bmN0aW9uIGVtcHR5RGlyU3luYyAoZGlyKSB7XG4gIGxldCBpdGVtc1xuICB0cnkge1xuICAgIGl0ZW1zID0gZnMucmVhZGRpclN5bmMoZGlyKVxuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gbWtkaXIubWtkaXJzU3luYyhkaXIpXG4gIH1cblxuICBpdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgIGl0ZW0gPSBwYXRoLmpvaW4oZGlyLCBpdGVtKVxuICAgIHJlbW92ZS5yZW1vdmVTeW5jKGl0ZW0pXG4gIH0pXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBlbXB0eURpclN5bmMsXG4gIGVtcHR5ZGlyU3luYzogZW1wdHlEaXJTeW5jLFxuICBlbXB0eURpcixcbiAgZW1wdHlkaXI6IGVtcHR5RGlyXG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/fs-extra/lib/empty/index.js\n");

/***/ }),

/***/ "./node_modules/fs-extra/lib/ensure/file.js":
/*!**************************************************!*\
  !*** ./node_modules/fs-extra/lib/ensure/file.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar u = __webpack_require__(/*! universalify */ \"./node_modules/universalify/index.js\").fromCallback;\n\nvar path = __webpack_require__(/*! path */ \"path\");\n\nvar fs = __webpack_require__(/*! graceful-fs */ \"./node_modules/graceful-fs/graceful-fs.js\");\n\nvar mkdir = __webpack_require__(/*! ../mkdirs */ \"./node_modules/fs-extra/lib/mkdirs/index.js\");\n\nfunction createFile(file, callback) {\n  function makeFile() {\n    fs.writeFile(file, '', function (err) {\n      if (err) return callback(err);\n      callback();\n    });\n  }\n\n  fs.stat(file, function (err, stats) {\n    // eslint-disable-line handle-callback-err\n    if (!err && stats.isFile()) return callback();\n    var dir = path.dirname(file);\n    fs.stat(dir, function (err, stats) {\n      if (err) {\n        // if the directory doesn't exist, make it\n        if (err.code === 'ENOENT') {\n          return mkdir.mkdirs(dir, function (err) {\n            if (err) return callback(err);\n            makeFile();\n          });\n        }\n\n        return callback(err);\n      }\n\n      if (stats.isDirectory()) makeFile();else {\n        // parent is not a directory\n        // This is just to cause an internal ENOTDIR error to be thrown\n        fs.readdir(dir, function (err) {\n          if (err) return callback(err);\n        });\n      }\n    });\n  });\n}\n\nfunction createFileSync(file) {\n  var stats;\n\n  try {\n    stats = fs.statSync(file);\n  } catch (_unused) {}\n\n  if (stats && stats.isFile()) return;\n  var dir = path.dirname(file);\n\n  try {\n    if (!fs.statSync(dir).isDirectory()) {\n      // parent is not a directory\n      // This is just to cause an internal ENOTDIR error to be thrown\n      fs.readdirSync(dir);\n    }\n  } catch (err) {\n    // If the stat call above failed because the directory doesn't exist, create it\n    if (err && err.code === 'ENOENT') mkdir.mkdirsSync(dir);else throw err;\n  }\n\n  fs.writeFileSync(file, '');\n}\n\nmodule.exports = {\n  createFile: u(createFile),\n  createFileSync: createFileSync\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGtib3gtZ3VpLy4vbm9kZV9tb2R1bGVzL2ZzLWV4dHJhL2xpYi9lbnN1cmUvZmlsZS5qcz85OTQzIl0sIm5hbWVzIjpbInUiLCJyZXF1aXJlIiwicGF0aCIsImZzIiwibWtkaXIiLCJjcmVhdGVGaWxlIiwiZmlsZSIsImNhbGxiYWNrIiwibWFrZUZpbGUiLCJ3cml0ZUZpbGUiLCJlcnIiLCJzdGF0Iiwic3RhdHMiLCJpc0ZpbGUiLCJkaXIiLCJkaXJuYW1lIiwiY29kZSIsIm1rZGlycyIsImlzRGlyZWN0b3J5IiwicmVhZGRpciIsImNyZWF0ZUZpbGVTeW5jIiwic3RhdFN5bmMiLCJyZWFkZGlyU3luYyIsIm1rZGlyc1N5bmMiLCJ3cml0ZUZpbGVTeW5jIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsQ0FBQyxHQUFHQyw0RkFBVjs7QUFDQSxJQUFNQyxJQUFJLEdBQUdELG1CQUFPLENBQUMsa0JBQUQsQ0FBcEI7O0FBQ0EsSUFBTUUsRUFBRSxHQUFHRixtQkFBTyxDQUFDLDhEQUFELENBQWxCOztBQUNBLElBQU1HLEtBQUssR0FBR0gsbUJBQU8sQ0FBQyw4REFBRCxDQUFyQjs7QUFFQSxTQUFTSSxVQUFULENBQXFCQyxJQUFyQixFQUEyQkMsUUFBM0IsRUFBcUM7QUFDbkMsV0FBU0MsUUFBVCxHQUFxQjtBQUNuQkwsTUFBRSxDQUFDTSxTQUFILENBQWFILElBQWIsRUFBbUIsRUFBbkIsRUFBdUIsVUFBQUksR0FBRyxFQUFJO0FBQzVCLFVBQUlBLEdBQUosRUFBUyxPQUFPSCxRQUFRLENBQUNHLEdBQUQsQ0FBZjtBQUNUSCxjQUFRO0FBQ1QsS0FIRDtBQUlEOztBQUVESixJQUFFLENBQUNRLElBQUgsQ0FBUUwsSUFBUixFQUFjLFVBQUNJLEdBQUQsRUFBTUUsS0FBTixFQUFnQjtBQUFFO0FBQzlCLFFBQUksQ0FBQ0YsR0FBRCxJQUFRRSxLQUFLLENBQUNDLE1BQU4sRUFBWixFQUE0QixPQUFPTixRQUFRLEVBQWY7QUFDNUIsUUFBTU8sR0FBRyxHQUFHWixJQUFJLENBQUNhLE9BQUwsQ0FBYVQsSUFBYixDQUFaO0FBQ0FILE1BQUUsQ0FBQ1EsSUFBSCxDQUFRRyxHQUFSLEVBQWEsVUFBQ0osR0FBRCxFQUFNRSxLQUFOLEVBQWdCO0FBQzNCLFVBQUlGLEdBQUosRUFBUztBQUNQO0FBQ0EsWUFBSUEsR0FBRyxDQUFDTSxJQUFKLEtBQWEsUUFBakIsRUFBMkI7QUFDekIsaUJBQU9aLEtBQUssQ0FBQ2EsTUFBTixDQUFhSCxHQUFiLEVBQWtCLFVBQUFKLEdBQUcsRUFBSTtBQUM5QixnQkFBSUEsR0FBSixFQUFTLE9BQU9ILFFBQVEsQ0FBQ0csR0FBRCxDQUFmO0FBQ1RGLG9CQUFRO0FBQ1QsV0FITSxDQUFQO0FBSUQ7O0FBQ0QsZUFBT0QsUUFBUSxDQUFDRyxHQUFELENBQWY7QUFDRDs7QUFFRCxVQUFJRSxLQUFLLENBQUNNLFdBQU4sRUFBSixFQUF5QlYsUUFBUSxHQUFqQyxLQUNLO0FBQ0g7QUFDQTtBQUNBTCxVQUFFLENBQUNnQixPQUFILENBQVdMLEdBQVgsRUFBZ0IsVUFBQUosR0FBRyxFQUFJO0FBQ3JCLGNBQUlBLEdBQUosRUFBUyxPQUFPSCxRQUFRLENBQUNHLEdBQUQsQ0FBZjtBQUNWLFNBRkQ7QUFHRDtBQUNGLEtBcEJEO0FBcUJELEdBeEJEO0FBeUJEOztBQUVELFNBQVNVLGNBQVQsQ0FBeUJkLElBQXpCLEVBQStCO0FBQzdCLE1BQUlNLEtBQUo7O0FBQ0EsTUFBSTtBQUNGQSxTQUFLLEdBQUdULEVBQUUsQ0FBQ2tCLFFBQUgsQ0FBWWYsSUFBWixDQUFSO0FBQ0QsR0FGRCxDQUVFLGdCQUFNLENBQUU7O0FBQ1YsTUFBSU0sS0FBSyxJQUFJQSxLQUFLLENBQUNDLE1BQU4sRUFBYixFQUE2QjtBQUU3QixNQUFNQyxHQUFHLEdBQUdaLElBQUksQ0FBQ2EsT0FBTCxDQUFhVCxJQUFiLENBQVo7O0FBQ0EsTUFBSTtBQUNGLFFBQUksQ0FBQ0gsRUFBRSxDQUFDa0IsUUFBSCxDQUFZUCxHQUFaLEVBQWlCSSxXQUFqQixFQUFMLEVBQXFDO0FBQ25DO0FBQ0E7QUFDQWYsUUFBRSxDQUFDbUIsV0FBSCxDQUFlUixHQUFmO0FBQ0Q7QUFDRixHQU5ELENBTUUsT0FBT0osR0FBUCxFQUFZO0FBQ1o7QUFDQSxRQUFJQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ00sSUFBSixLQUFhLFFBQXhCLEVBQWtDWixLQUFLLENBQUNtQixVQUFOLENBQWlCVCxHQUFqQixFQUFsQyxLQUNLLE1BQU1KLEdBQU47QUFDTjs7QUFFRFAsSUFBRSxDQUFDcUIsYUFBSCxDQUFpQmxCLElBQWpCLEVBQXVCLEVBQXZCO0FBQ0Q7O0FBRURtQixNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZnJCLFlBQVUsRUFBRUwsQ0FBQyxDQUFDSyxVQUFELENBREU7QUFFZmUsZ0JBQWMsRUFBZEE7QUFGZSxDQUFqQiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9mcy1leHRyYS9saWIvZW5zdXJlL2ZpbGUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgdSA9IHJlcXVpcmUoJ3VuaXZlcnNhbGlmeScpLmZyb21DYWxsYmFja1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKVxuY29uc3QgZnMgPSByZXF1aXJlKCdncmFjZWZ1bC1mcycpXG5jb25zdCBta2RpciA9IHJlcXVpcmUoJy4uL21rZGlycycpXG5cbmZ1bmN0aW9uIGNyZWF0ZUZpbGUgKGZpbGUsIGNhbGxiYWNrKSB7XG4gIGZ1bmN0aW9uIG1ha2VGaWxlICgpIHtcbiAgICBmcy53cml0ZUZpbGUoZmlsZSwgJycsIGVyciA9PiB7XG4gICAgICBpZiAoZXJyKSByZXR1cm4gY2FsbGJhY2soZXJyKVxuICAgICAgY2FsbGJhY2soKVxuICAgIH0pXG4gIH1cblxuICBmcy5zdGF0KGZpbGUsIChlcnIsIHN0YXRzKSA9PiB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgaGFuZGxlLWNhbGxiYWNrLWVyclxuICAgIGlmICghZXJyICYmIHN0YXRzLmlzRmlsZSgpKSByZXR1cm4gY2FsbGJhY2soKVxuICAgIGNvbnN0IGRpciA9IHBhdGguZGlybmFtZShmaWxlKVxuICAgIGZzLnN0YXQoZGlyLCAoZXJyLCBzdGF0cykgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICAvLyBpZiB0aGUgZGlyZWN0b3J5IGRvZXNuJ3QgZXhpc3QsIG1ha2UgaXRcbiAgICAgICAgaWYgKGVyci5jb2RlID09PSAnRU5PRU5UJykge1xuICAgICAgICAgIHJldHVybiBta2Rpci5ta2RpcnMoZGlyLCBlcnIgPT4ge1xuICAgICAgICAgICAgaWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGVycilcbiAgICAgICAgICAgIG1ha2VGaWxlKClcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpXG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0cy5pc0RpcmVjdG9yeSgpKSBtYWtlRmlsZSgpXG4gICAgICBlbHNlIHtcbiAgICAgICAgLy8gcGFyZW50IGlzIG5vdCBhIGRpcmVjdG9yeVxuICAgICAgICAvLyBUaGlzIGlzIGp1c3QgdG8gY2F1c2UgYW4gaW50ZXJuYWwgRU5PVERJUiBlcnJvciB0byBiZSB0aHJvd25cbiAgICAgICAgZnMucmVhZGRpcihkaXIsIGVyciA9PiB7XG4gICAgICAgICAgaWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGVycilcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuICB9KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVGaWxlU3luYyAoZmlsZSkge1xuICBsZXQgc3RhdHNcbiAgdHJ5IHtcbiAgICBzdGF0cyA9IGZzLnN0YXRTeW5jKGZpbGUpXG4gIH0gY2F0Y2gge31cbiAgaWYgKHN0YXRzICYmIHN0YXRzLmlzRmlsZSgpKSByZXR1cm5cblxuICBjb25zdCBkaXIgPSBwYXRoLmRpcm5hbWUoZmlsZSlcbiAgdHJ5IHtcbiAgICBpZiAoIWZzLnN0YXRTeW5jKGRpcikuaXNEaXJlY3RvcnkoKSkge1xuICAgICAgLy8gcGFyZW50IGlzIG5vdCBhIGRpcmVjdG9yeVxuICAgICAgLy8gVGhpcyBpcyBqdXN0IHRvIGNhdXNlIGFuIGludGVybmFsIEVOT1RESVIgZXJyb3IgdG8gYmUgdGhyb3duXG4gICAgICBmcy5yZWFkZGlyU3luYyhkaXIpXG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBJZiB0aGUgc3RhdCBjYWxsIGFib3ZlIGZhaWxlZCBiZWNhdXNlIHRoZSBkaXJlY3RvcnkgZG9lc24ndCBleGlzdCwgY3JlYXRlIGl0XG4gICAgaWYgKGVyciAmJiBlcnIuY29kZSA9PT0gJ0VOT0VOVCcpIG1rZGlyLm1rZGlyc1N5bmMoZGlyKVxuICAgIGVsc2UgdGhyb3cgZXJyXG4gIH1cblxuICBmcy53cml0ZUZpbGVTeW5jKGZpbGUsICcnKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3JlYXRlRmlsZTogdShjcmVhdGVGaWxlKSxcbiAgY3JlYXRlRmlsZVN5bmNcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/fs-extra/lib/ensure/file.js\n");

/***/ }),

/***/ "./node_modules/fs-extra/lib/ensure/index.js":
/*!***************************************************!*\
  !*** ./node_modules/fs-extra/lib/ensure/index.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar file = __webpack_require__(/*! ./file */ \"./node_modules/fs-extra/lib/ensure/file.js\");\n\nvar link = __webpack_require__(/*! ./link */ \"./node_modules/fs-extra/lib/ensure/link.js\");\n\nvar symlink = __webpack_require__(/*! ./symlink */ \"./node_modules/fs-extra/lib/ensure/symlink.js\");\n\nmodule.exports = {\n  // file\n  createFile: file.createFile,\n  createFileSync: file.createFileSync,\n  ensureFile: file.createFile,\n  ensureFileSync: file.createFileSync,\n  // link\n  createLink: link.createLink,\n  createLinkSync: link.createLinkSync,\n  ensureLink: link.createLink,\n  ensureLinkSync: link.createLinkSync,\n  // symlink\n  createSymlink: symlink.createSymlink,\n  createSymlinkSync: symlink.createSymlinkSync,\n  ensureSymlink: symlink.createSymlink,\n  ensureSymlinkSync: symlink.createSymlinkSync\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGtib3gtZ3VpLy4vbm9kZV9tb2R1bGVzL2ZzLWV4dHJhL2xpYi9lbnN1cmUvaW5kZXguanM/MmEzNiJdLCJuYW1lcyI6WyJmaWxlIiwicmVxdWlyZSIsImxpbmsiLCJzeW1saW5rIiwibW9kdWxlIiwiZXhwb3J0cyIsImNyZWF0ZUZpbGUiLCJjcmVhdGVGaWxlU3luYyIsImVuc3VyZUZpbGUiLCJlbnN1cmVGaWxlU3luYyIsImNyZWF0ZUxpbmsiLCJjcmVhdGVMaW5rU3luYyIsImVuc3VyZUxpbmsiLCJlbnN1cmVMaW5rU3luYyIsImNyZWF0ZVN5bWxpbmsiLCJjcmVhdGVTeW1saW5rU3luYyIsImVuc3VyZVN5bWxpbmsiLCJlbnN1cmVTeW1saW5rU3luYyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLDBEQUFELENBQXBCOztBQUNBLElBQU1DLElBQUksR0FBR0QsbUJBQU8sQ0FBQywwREFBRCxDQUFwQjs7QUFDQSxJQUFNRSxPQUFPLEdBQUdGLG1CQUFPLENBQUMsZ0VBQUQsQ0FBdkI7O0FBRUFHLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNmO0FBQ0FDLFlBQVUsRUFBRU4sSUFBSSxDQUFDTSxVQUZGO0FBR2ZDLGdCQUFjLEVBQUVQLElBQUksQ0FBQ08sY0FITjtBQUlmQyxZQUFVLEVBQUVSLElBQUksQ0FBQ00sVUFKRjtBQUtmRyxnQkFBYyxFQUFFVCxJQUFJLENBQUNPLGNBTE47QUFNZjtBQUNBRyxZQUFVLEVBQUVSLElBQUksQ0FBQ1EsVUFQRjtBQVFmQyxnQkFBYyxFQUFFVCxJQUFJLENBQUNTLGNBUk47QUFTZkMsWUFBVSxFQUFFVixJQUFJLENBQUNRLFVBVEY7QUFVZkcsZ0JBQWMsRUFBRVgsSUFBSSxDQUFDUyxjQVZOO0FBV2Y7QUFDQUcsZUFBYSxFQUFFWCxPQUFPLENBQUNXLGFBWlI7QUFhZkMsbUJBQWlCLEVBQUVaLE9BQU8sQ0FBQ1ksaUJBYlo7QUFjZkMsZUFBYSxFQUFFYixPQUFPLENBQUNXLGFBZFI7QUFlZkcsbUJBQWlCLEVBQUVkLE9BQU8sQ0FBQ1k7QUFmWixDQUFqQiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9mcy1leHRyYS9saWIvZW5zdXJlL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IGZpbGUgPSByZXF1aXJlKCcuL2ZpbGUnKVxuY29uc3QgbGluayA9IHJlcXVpcmUoJy4vbGluaycpXG5jb25zdCBzeW1saW5rID0gcmVxdWlyZSgnLi9zeW1saW5rJylcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGZpbGVcbiAgY3JlYXRlRmlsZTogZmlsZS5jcmVhdGVGaWxlLFxuICBjcmVhdGVGaWxlU3luYzogZmlsZS5jcmVhdGVGaWxlU3luYyxcbiAgZW5zdXJlRmlsZTogZmlsZS5jcmVhdGVGaWxlLFxuICBlbnN1cmVGaWxlU3luYzogZmlsZS5jcmVhdGVGaWxlU3luYyxcbiAgLy8gbGlua1xuICBjcmVhdGVMaW5rOiBsaW5rLmNyZWF0ZUxpbmssXG4gIGNyZWF0ZUxpbmtTeW5jOiBsaW5rLmNyZWF0ZUxpbmtTeW5jLFxuICBlbnN1cmVMaW5rOiBsaW5rLmNyZWF0ZUxpbmssXG4gIGVuc3VyZUxpbmtTeW5jOiBsaW5rLmNyZWF0ZUxpbmtTeW5jLFxuICAvLyBzeW1saW5rXG4gIGNyZWF0ZVN5bWxpbms6IHN5bWxpbmsuY3JlYXRlU3ltbGluayxcbiAgY3JlYXRlU3ltbGlua1N5bmM6IHN5bWxpbmsuY3JlYXRlU3ltbGlua1N5bmMsXG4gIGVuc3VyZVN5bWxpbms6IHN5bWxpbmsuY3JlYXRlU3ltbGluayxcbiAgZW5zdXJlU3ltbGlua1N5bmM6IHN5bWxpbmsuY3JlYXRlU3ltbGlua1N5bmNcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/fs-extra/lib/ensure/index.js\n");

/***/ }),

/***/ "./node_modules/fs-extra/lib/ensure/link.js":
/*!**************************************************!*\
  !*** ./node_modules/fs-extra/lib/ensure/link.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar u = __webpack_require__(/*! universalify */ \"./node_modules/universalify/index.js\").fromCallback;\n\nvar path = __webpack_require__(/*! path */ \"path\");\n\nvar fs = __webpack_require__(/*! graceful-fs */ \"./node_modules/graceful-fs/graceful-fs.js\");\n\nvar mkdir = __webpack_require__(/*! ../mkdirs */ \"./node_modules/fs-extra/lib/mkdirs/index.js\");\n\nvar pathExists = __webpack_require__(/*! ../path-exists */ \"./node_modules/fs-extra/lib/path-exists/index.js\").pathExists;\n\nfunction createLink(srcpath, dstpath, callback) {\n  function makeLink(srcpath, dstpath) {\n    fs.link(srcpath, dstpath, function (err) {\n      if (err) return callback(err);\n      callback(null);\n    });\n  }\n\n  pathExists(dstpath, function (err, destinationExists) {\n    if (err) return callback(err);\n    if (destinationExists) return callback(null);\n    fs.lstat(srcpath, function (err) {\n      if (err) {\n        err.message = err.message.replace('lstat', 'ensureLink');\n        return callback(err);\n      }\n\n      var dir = path.dirname(dstpath);\n      pathExists(dir, function (err, dirExists) {\n        if (err) return callback(err);\n        if (dirExists) return makeLink(srcpath, dstpath);\n        mkdir.mkdirs(dir, function (err) {\n          if (err) return callback(err);\n          makeLink(srcpath, dstpath);\n        });\n      });\n    });\n  });\n}\n\nfunction createLinkSync(srcpath, dstpath) {\n  var destinationExists = fs.existsSync(dstpath);\n  if (destinationExists) return undefined;\n\n  try {\n    fs.lstatSync(srcpath);\n  } catch (err) {\n    err.message = err.message.replace('lstat', 'ensureLink');\n    throw err;\n  }\n\n  var dir = path.dirname(dstpath);\n  var dirExists = fs.existsSync(dir);\n  if (dirExists) return fs.linkSync(srcpath, dstpath);\n  mkdir.mkdirsSync(dir);\n  return fs.linkSync(srcpath, dstpath);\n}\n\nmodule.exports = {\n  createLink: u(createLink),\n  createLinkSync: createLinkSync\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGtib3gtZ3VpLy4vbm9kZV9tb2R1bGVzL2ZzLWV4dHJhL2xpYi9lbnN1cmUvbGluay5qcz9jZjAwIl0sIm5hbWVzIjpbInUiLCJyZXF1aXJlIiwicGF0aCIsImZzIiwibWtkaXIiLCJwYXRoRXhpc3RzIiwiY3JlYXRlTGluayIsInNyY3BhdGgiLCJkc3RwYXRoIiwiY2FsbGJhY2siLCJtYWtlTGluayIsImxpbmsiLCJlcnIiLCJkZXN0aW5hdGlvbkV4aXN0cyIsImxzdGF0IiwibWVzc2FnZSIsInJlcGxhY2UiLCJkaXIiLCJkaXJuYW1lIiwiZGlyRXhpc3RzIiwibWtkaXJzIiwiY3JlYXRlTGlua1N5bmMiLCJleGlzdHNTeW5jIiwidW5kZWZpbmVkIiwibHN0YXRTeW5jIiwibGlua1N5bmMiLCJta2RpcnNTeW5jIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsQ0FBQyxHQUFHQyw0RkFBVjs7QUFDQSxJQUFNQyxJQUFJLEdBQUdELG1CQUFPLENBQUMsa0JBQUQsQ0FBcEI7O0FBQ0EsSUFBTUUsRUFBRSxHQUFHRixtQkFBTyxDQUFDLDhEQUFELENBQWxCOztBQUNBLElBQU1HLEtBQUssR0FBR0gsbUJBQU8sQ0FBQyw4REFBRCxDQUFyQjs7QUFDQSxJQUFNSSxVQUFVLEdBQUdKLHdHQUFuQjs7QUFFQSxTQUFTSyxVQUFULENBQXFCQyxPQUFyQixFQUE4QkMsT0FBOUIsRUFBdUNDLFFBQXZDLEVBQWlEO0FBQy9DLFdBQVNDLFFBQVQsQ0FBbUJILE9BQW5CLEVBQTRCQyxPQUE1QixFQUFxQztBQUNuQ0wsTUFBRSxDQUFDUSxJQUFILENBQVFKLE9BQVIsRUFBaUJDLE9BQWpCLEVBQTBCLFVBQUFJLEdBQUcsRUFBSTtBQUMvQixVQUFJQSxHQUFKLEVBQVMsT0FBT0gsUUFBUSxDQUFDRyxHQUFELENBQWY7QUFDVEgsY0FBUSxDQUFDLElBQUQsQ0FBUjtBQUNELEtBSEQ7QUFJRDs7QUFFREosWUFBVSxDQUFDRyxPQUFELEVBQVUsVUFBQ0ksR0FBRCxFQUFNQyxpQkFBTixFQUE0QjtBQUM5QyxRQUFJRCxHQUFKLEVBQVMsT0FBT0gsUUFBUSxDQUFDRyxHQUFELENBQWY7QUFDVCxRQUFJQyxpQkFBSixFQUF1QixPQUFPSixRQUFRLENBQUMsSUFBRCxDQUFmO0FBQ3ZCTixNQUFFLENBQUNXLEtBQUgsQ0FBU1AsT0FBVCxFQUFrQixVQUFDSyxHQUFELEVBQVM7QUFDekIsVUFBSUEsR0FBSixFQUFTO0FBQ1BBLFdBQUcsQ0FBQ0csT0FBSixHQUFjSCxHQUFHLENBQUNHLE9BQUosQ0FBWUMsT0FBWixDQUFvQixPQUFwQixFQUE2QixZQUE3QixDQUFkO0FBQ0EsZUFBT1AsUUFBUSxDQUFDRyxHQUFELENBQWY7QUFDRDs7QUFFRCxVQUFNSyxHQUFHLEdBQUdmLElBQUksQ0FBQ2dCLE9BQUwsQ0FBYVYsT0FBYixDQUFaO0FBQ0FILGdCQUFVLENBQUNZLEdBQUQsRUFBTSxVQUFDTCxHQUFELEVBQU1PLFNBQU4sRUFBb0I7QUFDbEMsWUFBSVAsR0FBSixFQUFTLE9BQU9ILFFBQVEsQ0FBQ0csR0FBRCxDQUFmO0FBQ1QsWUFBSU8sU0FBSixFQUFlLE9BQU9ULFFBQVEsQ0FBQ0gsT0FBRCxFQUFVQyxPQUFWLENBQWY7QUFDZkosYUFBSyxDQUFDZ0IsTUFBTixDQUFhSCxHQUFiLEVBQWtCLFVBQUFMLEdBQUcsRUFBSTtBQUN2QixjQUFJQSxHQUFKLEVBQVMsT0FBT0gsUUFBUSxDQUFDRyxHQUFELENBQWY7QUFDVEYsa0JBQVEsQ0FBQ0gsT0FBRCxFQUFVQyxPQUFWLENBQVI7QUFDRCxTQUhEO0FBSUQsT0FQUyxDQUFWO0FBUUQsS0FmRDtBQWdCRCxHQW5CUyxDQUFWO0FBb0JEOztBQUVELFNBQVNhLGNBQVQsQ0FBeUJkLE9BQXpCLEVBQWtDQyxPQUFsQyxFQUEyQztBQUN6QyxNQUFNSyxpQkFBaUIsR0FBR1YsRUFBRSxDQUFDbUIsVUFBSCxDQUFjZCxPQUFkLENBQTFCO0FBQ0EsTUFBSUssaUJBQUosRUFBdUIsT0FBT1UsU0FBUDs7QUFFdkIsTUFBSTtBQUNGcEIsTUFBRSxDQUFDcUIsU0FBSCxDQUFhakIsT0FBYjtBQUNELEdBRkQsQ0FFRSxPQUFPSyxHQUFQLEVBQVk7QUFDWkEsT0FBRyxDQUFDRyxPQUFKLEdBQWNILEdBQUcsQ0FBQ0csT0FBSixDQUFZQyxPQUFaLENBQW9CLE9BQXBCLEVBQTZCLFlBQTdCLENBQWQ7QUFDQSxVQUFNSixHQUFOO0FBQ0Q7O0FBRUQsTUFBTUssR0FBRyxHQUFHZixJQUFJLENBQUNnQixPQUFMLENBQWFWLE9BQWIsQ0FBWjtBQUNBLE1BQU1XLFNBQVMsR0FBR2hCLEVBQUUsQ0FBQ21CLFVBQUgsQ0FBY0wsR0FBZCxDQUFsQjtBQUNBLE1BQUlFLFNBQUosRUFBZSxPQUFPaEIsRUFBRSxDQUFDc0IsUUFBSCxDQUFZbEIsT0FBWixFQUFxQkMsT0FBckIsQ0FBUDtBQUNmSixPQUFLLENBQUNzQixVQUFOLENBQWlCVCxHQUFqQjtBQUVBLFNBQU9kLEVBQUUsQ0FBQ3NCLFFBQUgsQ0FBWWxCLE9BQVosRUFBcUJDLE9BQXJCLENBQVA7QUFDRDs7QUFFRG1CLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNmdEIsWUFBVSxFQUFFTixDQUFDLENBQUNNLFVBQUQsQ0FERTtBQUVmZSxnQkFBYyxFQUFkQTtBQUZlLENBQWpCIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2ZzLWV4dHJhL2xpYi9lbnN1cmUvbGluay5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCB1ID0gcmVxdWlyZSgndW5pdmVyc2FsaWZ5JykuZnJvbUNhbGxiYWNrXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpXG5jb25zdCBmcyA9IHJlcXVpcmUoJ2dyYWNlZnVsLWZzJylcbmNvbnN0IG1rZGlyID0gcmVxdWlyZSgnLi4vbWtkaXJzJylcbmNvbnN0IHBhdGhFeGlzdHMgPSByZXF1aXJlKCcuLi9wYXRoLWV4aXN0cycpLnBhdGhFeGlzdHNcblxuZnVuY3Rpb24gY3JlYXRlTGluayAoc3JjcGF0aCwgZHN0cGF0aCwgY2FsbGJhY2spIHtcbiAgZnVuY3Rpb24gbWFrZUxpbmsgKHNyY3BhdGgsIGRzdHBhdGgpIHtcbiAgICBmcy5saW5rKHNyY3BhdGgsIGRzdHBhdGgsIGVyciA9PiB7XG4gICAgICBpZiAoZXJyKSByZXR1cm4gY2FsbGJhY2soZXJyKVxuICAgICAgY2FsbGJhY2sobnVsbClcbiAgICB9KVxuICB9XG5cbiAgcGF0aEV4aXN0cyhkc3RwYXRoLCAoZXJyLCBkZXN0aW5hdGlvbkV4aXN0cykgPT4ge1xuICAgIGlmIChlcnIpIHJldHVybiBjYWxsYmFjayhlcnIpXG4gICAgaWYgKGRlc3RpbmF0aW9uRXhpc3RzKSByZXR1cm4gY2FsbGJhY2sobnVsbClcbiAgICBmcy5sc3RhdChzcmNwYXRoLCAoZXJyKSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGVyci5tZXNzYWdlID0gZXJyLm1lc3NhZ2UucmVwbGFjZSgnbHN0YXQnLCAnZW5zdXJlTGluaycpXG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGRpciA9IHBhdGguZGlybmFtZShkc3RwYXRoKVxuICAgICAgcGF0aEV4aXN0cyhkaXIsIChlcnIsIGRpckV4aXN0cykgPT4ge1xuICAgICAgICBpZiAoZXJyKSByZXR1cm4gY2FsbGJhY2soZXJyKVxuICAgICAgICBpZiAoZGlyRXhpc3RzKSByZXR1cm4gbWFrZUxpbmsoc3JjcGF0aCwgZHN0cGF0aClcbiAgICAgICAgbWtkaXIubWtkaXJzKGRpciwgZXJyID0+IHtcbiAgICAgICAgICBpZiAoZXJyKSByZXR1cm4gY2FsbGJhY2soZXJyKVxuICAgICAgICAgIG1ha2VMaW5rKHNyY3BhdGgsIGRzdHBhdGgpXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0pXG4gIH0pXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpbmtTeW5jIChzcmNwYXRoLCBkc3RwYXRoKSB7XG4gIGNvbnN0IGRlc3RpbmF0aW9uRXhpc3RzID0gZnMuZXhpc3RzU3luYyhkc3RwYXRoKVxuICBpZiAoZGVzdGluYXRpb25FeGlzdHMpIHJldHVybiB1bmRlZmluZWRcblxuICB0cnkge1xuICAgIGZzLmxzdGF0U3luYyhzcmNwYXRoKVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBlcnIubWVzc2FnZSA9IGVyci5tZXNzYWdlLnJlcGxhY2UoJ2xzdGF0JywgJ2Vuc3VyZUxpbmsnKVxuICAgIHRocm93IGVyclxuICB9XG5cbiAgY29uc3QgZGlyID0gcGF0aC5kaXJuYW1lKGRzdHBhdGgpXG4gIGNvbnN0IGRpckV4aXN0cyA9IGZzLmV4aXN0c1N5bmMoZGlyKVxuICBpZiAoZGlyRXhpc3RzKSByZXR1cm4gZnMubGlua1N5bmMoc3JjcGF0aCwgZHN0cGF0aClcbiAgbWtkaXIubWtkaXJzU3luYyhkaXIpXG5cbiAgcmV0dXJuIGZzLmxpbmtTeW5jKHNyY3BhdGgsIGRzdHBhdGgpXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjcmVhdGVMaW5rOiB1KGNyZWF0ZUxpbmspLFxuICBjcmVhdGVMaW5rU3luY1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/fs-extra/lib/ensure/link.js\n");

/***/ }),

/***/ "./node_modules/fs-extra/lib/ensure/symlink-paths.js":
/*!***********************************************************!*\
  !*** ./node_modules/fs-extra/lib/ensure/symlink-paths.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar path = __webpack_require__(/*! path */ \"path\");\n\nvar fs = __webpack_require__(/*! graceful-fs */ \"./node_modules/graceful-fs/graceful-fs.js\");\n\nvar pathExists = __webpack_require__(/*! ../path-exists */ \"./node_modules/fs-extra/lib/path-exists/index.js\").pathExists;\n/**\n * Function that returns two types of paths, one relative to symlink, and one\n * relative to the current working directory. Checks if path is absolute or\n * relative. If the path is relative, this function checks if the path is\n * relative to symlink or relative to current working directory. This is an\n * initiative to find a smarter `srcpath` to supply when building symlinks.\n * This allows you to determine which path to use out of one of three possible\n * types of source paths. The first is an absolute path. This is detected by\n * `path.isAbsolute()`. When an absolute path is provided, it is checked to\n * see if it exists. If it does it's used, if not an error is returned\n * (callback)/ thrown (sync). The other two options for `srcpath` are a\n * relative url. By default Node's `fs.symlink` works by creating a symlink\n * using `dstpath` and expects the `srcpath` to be relative to the newly\n * created symlink. If you provide a `srcpath` that does not exist on the file\n * system it results in a broken symlink. To minimize this, the function\n * checks to see if the 'relative to symlink' source file exists, and if it\n * does it will use it. If it does not, it checks if there's a file that\n * exists that is relative to the current working directory, if does its used.\n * This preserves the expectations of the original fs.symlink spec and adds\n * the ability to pass in `relative to current working direcotry` paths.\n */\n\n\nfunction symlinkPaths(srcpath, dstpath, callback) {\n  if (path.isAbsolute(srcpath)) {\n    return fs.lstat(srcpath, function (err) {\n      if (err) {\n        err.message = err.message.replace('lstat', 'ensureSymlink');\n        return callback(err);\n      }\n\n      return callback(null, {\n        toCwd: srcpath,\n        toDst: srcpath\n      });\n    });\n  } else {\n    var dstdir = path.dirname(dstpath);\n    var relativeToDst = path.join(dstdir, srcpath);\n    return pathExists(relativeToDst, function (err, exists) {\n      if (err) return callback(err);\n\n      if (exists) {\n        return callback(null, {\n          toCwd: relativeToDst,\n          toDst: srcpath\n        });\n      } else {\n        return fs.lstat(srcpath, function (err) {\n          if (err) {\n            err.message = err.message.replace('lstat', 'ensureSymlink');\n            return callback(err);\n          }\n\n          return callback(null, {\n            toCwd: srcpath,\n            toDst: path.relative(dstdir, srcpath)\n          });\n        });\n      }\n    });\n  }\n}\n\nfunction symlinkPathsSync(srcpath, dstpath) {\n  var exists;\n\n  if (path.isAbsolute(srcpath)) {\n    exists = fs.existsSync(srcpath);\n    if (!exists) throw new Error('absolute srcpath does not exist');\n    return {\n      toCwd: srcpath,\n      toDst: srcpath\n    };\n  } else {\n    var dstdir = path.dirname(dstpath);\n    var relativeToDst = path.join(dstdir, srcpath);\n    exists = fs.existsSync(relativeToDst);\n\n    if (exists) {\n      return {\n        toCwd: relativeToDst,\n        toDst: srcpath\n      };\n    } else {\n      exists = fs.existsSync(srcpath);\n      if (!exists) throw new Error('relative srcpath does not exist');\n      return {\n        toCwd: srcpath,\n        toDst: path.relative(dstdir, srcpath)\n      };\n    }\n  }\n}\n\nmodule.exports = {\n  symlinkPaths: symlinkPaths,\n  symlinkPathsSync: symlinkPathsSync\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/fs-extra/lib/ensure/symlink-paths.js\n");

/***/ }),

/***/ "./node_modules/fs-extra/lib/ensure/symlink-type.js":
/*!**********************************************************!*\
  !*** ./node_modules/fs-extra/lib/ensure/symlink-type.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar fs = __webpack_require__(/*! graceful-fs */ \"./node_modules/graceful-fs/graceful-fs.js\");\n\nfunction symlinkType(srcpath, type, callback) {\n  callback = typeof type === 'function' ? type : callback;\n  type = typeof type === 'function' ? false : type;\n  if (type) return callback(null, type);\n  fs.lstat(srcpath, function (err, stats) {\n    if (err) return callback(null, 'file');\n    type = stats && stats.isDirectory() ? 'dir' : 'file';\n    callback(null, type);\n  });\n}\n\nfunction symlinkTypeSync(srcpath, type) {\n  var stats;\n  if (type) return type;\n\n  try {\n    stats = fs.lstatSync(srcpath);\n  } catch (_unused) {\n    return 'file';\n  }\n\n  return stats && stats.isDirectory() ? 'dir' : 'file';\n}\n\nmodule.exports = {\n  symlinkType: symlinkType,\n  symlinkTypeSync: symlinkTypeSync\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGtib3gtZ3VpLy4vbm9kZV9tb2R1bGVzL2ZzLWV4dHJhL2xpYi9lbnN1cmUvc3ltbGluay10eXBlLmpzPzNhNTEiXSwibmFtZXMiOlsiZnMiLCJyZXF1aXJlIiwic3ltbGlua1R5cGUiLCJzcmNwYXRoIiwidHlwZSIsImNhbGxiYWNrIiwibHN0YXQiLCJlcnIiLCJzdGF0cyIsImlzRGlyZWN0b3J5Iiwic3ltbGlua1R5cGVTeW5jIiwibHN0YXRTeW5jIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsRUFBRSxHQUFHQyxtQkFBTyxDQUFDLDhEQUFELENBQWxCOztBQUVBLFNBQVNDLFdBQVQsQ0FBc0JDLE9BQXRCLEVBQStCQyxJQUEvQixFQUFxQ0MsUUFBckMsRUFBK0M7QUFDN0NBLFVBQVEsR0FBSSxPQUFPRCxJQUFQLEtBQWdCLFVBQWpCLEdBQStCQSxJQUEvQixHQUFzQ0MsUUFBakQ7QUFDQUQsTUFBSSxHQUFJLE9BQU9BLElBQVAsS0FBZ0IsVUFBakIsR0FBK0IsS0FBL0IsR0FBdUNBLElBQTlDO0FBQ0EsTUFBSUEsSUFBSixFQUFVLE9BQU9DLFFBQVEsQ0FBQyxJQUFELEVBQU9ELElBQVAsQ0FBZjtBQUNWSixJQUFFLENBQUNNLEtBQUgsQ0FBU0gsT0FBVCxFQUFrQixVQUFDSSxHQUFELEVBQU1DLEtBQU4sRUFBZ0I7QUFDaEMsUUFBSUQsR0FBSixFQUFTLE9BQU9GLFFBQVEsQ0FBQyxJQUFELEVBQU8sTUFBUCxDQUFmO0FBQ1RELFFBQUksR0FBSUksS0FBSyxJQUFJQSxLQUFLLENBQUNDLFdBQU4sRUFBVixHQUFpQyxLQUFqQyxHQUF5QyxNQUFoRDtBQUNBSixZQUFRLENBQUMsSUFBRCxFQUFPRCxJQUFQLENBQVI7QUFDRCxHQUpEO0FBS0Q7O0FBRUQsU0FBU00sZUFBVCxDQUEwQlAsT0FBMUIsRUFBbUNDLElBQW5DLEVBQXlDO0FBQ3ZDLE1BQUlJLEtBQUo7QUFFQSxNQUFJSixJQUFKLEVBQVUsT0FBT0EsSUFBUDs7QUFDVixNQUFJO0FBQ0ZJLFNBQUssR0FBR1IsRUFBRSxDQUFDVyxTQUFILENBQWFSLE9BQWIsQ0FBUjtBQUNELEdBRkQsQ0FFRSxnQkFBTTtBQUNOLFdBQU8sTUFBUDtBQUNEOztBQUNELFNBQVFLLEtBQUssSUFBSUEsS0FBSyxDQUFDQyxXQUFOLEVBQVYsR0FBaUMsS0FBakMsR0FBeUMsTUFBaEQ7QUFDRDs7QUFFREcsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2ZYLGFBQVcsRUFBWEEsV0FEZTtBQUVmUSxpQkFBZSxFQUFmQTtBQUZlLENBQWpCIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2ZzLWV4dHJhL2xpYi9lbnN1cmUvc3ltbGluay10eXBlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IGZzID0gcmVxdWlyZSgnZ3JhY2VmdWwtZnMnKVxuXG5mdW5jdGlvbiBzeW1saW5rVHlwZSAoc3JjcGF0aCwgdHlwZSwgY2FsbGJhY2spIHtcbiAgY2FsbGJhY2sgPSAodHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicpID8gdHlwZSA6IGNhbGxiYWNrXG4gIHR5cGUgPSAodHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicpID8gZmFsc2UgOiB0eXBlXG4gIGlmICh0eXBlKSByZXR1cm4gY2FsbGJhY2sobnVsbCwgdHlwZSlcbiAgZnMubHN0YXQoc3JjcGF0aCwgKGVyciwgc3RhdHMpID0+IHtcbiAgICBpZiAoZXJyKSByZXR1cm4gY2FsbGJhY2sobnVsbCwgJ2ZpbGUnKVxuICAgIHR5cGUgPSAoc3RhdHMgJiYgc3RhdHMuaXNEaXJlY3RvcnkoKSkgPyAnZGlyJyA6ICdmaWxlJ1xuICAgIGNhbGxiYWNrKG51bGwsIHR5cGUpXG4gIH0pXG59XG5cbmZ1bmN0aW9uIHN5bWxpbmtUeXBlU3luYyAoc3JjcGF0aCwgdHlwZSkge1xuICBsZXQgc3RhdHNcblxuICBpZiAodHlwZSkgcmV0dXJuIHR5cGVcbiAgdHJ5IHtcbiAgICBzdGF0cyA9IGZzLmxzdGF0U3luYyhzcmNwYXRoKVxuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gJ2ZpbGUnXG4gIH1cbiAgcmV0dXJuIChzdGF0cyAmJiBzdGF0cy5pc0RpcmVjdG9yeSgpKSA/ICdkaXInIDogJ2ZpbGUnXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzeW1saW5rVHlwZSxcbiAgc3ltbGlua1R5cGVTeW5jXG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/fs-extra/lib/ensure/symlink-type.js\n");

/***/ }),

/***/ "./node_modules/fs-extra/lib/ensure/symlink.js":
/*!*****************************************************!*\
  !*** ./node_modules/fs-extra/lib/ensure/symlink.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar u = __webpack_require__(/*! universalify */ \"./node_modules/universalify/index.js\").fromCallback;\n\nvar path = __webpack_require__(/*! path */ \"path\");\n\nvar fs = __webpack_require__(/*! graceful-fs */ \"./node_modules/graceful-fs/graceful-fs.js\");\n\nvar _mkdirs = __webpack_require__(/*! ../mkdirs */ \"./node_modules/fs-extra/lib/mkdirs/index.js\");\n\nvar mkdirs = _mkdirs.mkdirs;\nvar mkdirsSync = _mkdirs.mkdirsSync;\n\nvar _symlinkPaths = __webpack_require__(/*! ./symlink-paths */ \"./node_modules/fs-extra/lib/ensure/symlink-paths.js\");\n\nvar symlinkPaths = _symlinkPaths.symlinkPaths;\nvar symlinkPathsSync = _symlinkPaths.symlinkPathsSync;\n\nvar _symlinkType = __webpack_require__(/*! ./symlink-type */ \"./node_modules/fs-extra/lib/ensure/symlink-type.js\");\n\nvar symlinkType = _symlinkType.symlinkType;\nvar symlinkTypeSync = _symlinkType.symlinkTypeSync;\n\nvar pathExists = __webpack_require__(/*! ../path-exists */ \"./node_modules/fs-extra/lib/path-exists/index.js\").pathExists;\n\nfunction createSymlink(srcpath, dstpath, type, callback) {\n  callback = typeof type === 'function' ? type : callback;\n  type = typeof type === 'function' ? false : type;\n  pathExists(dstpath, function (err, destinationExists) {\n    if (err) return callback(err);\n    if (destinationExists) return callback(null);\n    symlinkPaths(srcpath, dstpath, function (err, relative) {\n      if (err) return callback(err);\n      srcpath = relative.toDst;\n      symlinkType(relative.toCwd, type, function (err, type) {\n        if (err) return callback(err);\n        var dir = path.dirname(dstpath);\n        pathExists(dir, function (err, dirExists) {\n          if (err) return callback(err);\n          if (dirExists) return fs.symlink(srcpath, dstpath, type, callback);\n          mkdirs(dir, function (err) {\n            if (err) return callback(err);\n            fs.symlink(srcpath, dstpath, type, callback);\n          });\n        });\n      });\n    });\n  });\n}\n\nfunction createSymlinkSync(srcpath, dstpath, type) {\n  var destinationExists = fs.existsSync(dstpath);\n  if (destinationExists) return undefined;\n  var relative = symlinkPathsSync(srcpath, dstpath);\n  srcpath = relative.toDst;\n  type = symlinkTypeSync(relative.toCwd, type);\n  var dir = path.dirname(dstpath);\n  var exists = fs.existsSync(dir);\n  if (exists) return fs.symlinkSync(srcpath, dstpath, type);\n  mkdirsSync(dir);\n  return fs.symlinkSync(srcpath, dstpath, type);\n}\n\nmodule.exports = {\n  createSymlink: u(createSymlink),\n  createSymlinkSync: createSymlinkSync\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGtib3gtZ3VpLy4vbm9kZV9tb2R1bGVzL2ZzLWV4dHJhL2xpYi9lbnN1cmUvc3ltbGluay5qcz9jY2Q2Il0sIm5hbWVzIjpbInUiLCJyZXF1aXJlIiwicGF0aCIsImZzIiwiX21rZGlycyIsIm1rZGlycyIsIm1rZGlyc1N5bmMiLCJfc3ltbGlua1BhdGhzIiwic3ltbGlua1BhdGhzIiwic3ltbGlua1BhdGhzU3luYyIsIl9zeW1saW5rVHlwZSIsInN5bWxpbmtUeXBlIiwic3ltbGlua1R5cGVTeW5jIiwicGF0aEV4aXN0cyIsImNyZWF0ZVN5bWxpbmsiLCJzcmNwYXRoIiwiZHN0cGF0aCIsInR5cGUiLCJjYWxsYmFjayIsImVyciIsImRlc3RpbmF0aW9uRXhpc3RzIiwicmVsYXRpdmUiLCJ0b0RzdCIsInRvQ3dkIiwiZGlyIiwiZGlybmFtZSIsImRpckV4aXN0cyIsInN5bWxpbmsiLCJjcmVhdGVTeW1saW5rU3luYyIsImV4aXN0c1N5bmMiLCJ1bmRlZmluZWQiLCJleGlzdHMiLCJzeW1saW5rU3luYyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLENBQUMsR0FBR0MsNEZBQVY7O0FBQ0EsSUFBTUMsSUFBSSxHQUFHRCxtQkFBTyxDQUFDLGtCQUFELENBQXBCOztBQUNBLElBQU1FLEVBQUUsR0FBR0YsbUJBQU8sQ0FBQyw4REFBRCxDQUFsQjs7QUFDQSxJQUFNRyxPQUFPLEdBQUdILG1CQUFPLENBQUMsOERBQUQsQ0FBdkI7O0FBQ0EsSUFBTUksTUFBTSxHQUFHRCxPQUFPLENBQUNDLE1BQXZCO0FBQ0EsSUFBTUMsVUFBVSxHQUFHRixPQUFPLENBQUNFLFVBQTNCOztBQUVBLElBQU1DLGFBQWEsR0FBR04sbUJBQU8sQ0FBQyw0RUFBRCxDQUE3Qjs7QUFDQSxJQUFNTyxZQUFZLEdBQUdELGFBQWEsQ0FBQ0MsWUFBbkM7QUFDQSxJQUFNQyxnQkFBZ0IsR0FBR0YsYUFBYSxDQUFDRSxnQkFBdkM7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QixFQUFpQ0MsSUFBakMsQ0FBUDtBQUNaWCxZQUFVLENBQUNrQixHQUFELENBQVY7QUFDQSxTQUFPckIsRUFBRSxDQUFDNkIsV0FBSCxDQUFlakIsT0FBZixFQUF3QkMsT0FBeEIsRUFBaUNDLElBQWpDLENBQVA7QUFDRDs7QUFFRGdCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNmcEIsZUFBYSxFQUFFZCxDQUFDLENBQUNjLGFBQUQsQ0FERDtBQUVmYyxtQkFBaUIsRUFBakJBO0FBRmUsQ0FBakIiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZnMtZXh0cmEvbGliL2Vuc3VyZS9zeW1saW5rLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHUgPSByZXF1aXJlKCd1bml2ZXJzYWxpZnknKS5mcm9tQ2FsbGJhY2tcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJylcbmNvbnN0IGZzID0gcmVxdWlyZSgnZ3JhY2VmdWwtZnMnKVxuY29uc3QgX21rZGlycyA9IHJlcXVpcmUoJy4uL21rZGlycycpXG5jb25zdCBta2RpcnMgPSBfbWtkaXJzLm1rZGlyc1xuY29uc3QgbWtkaXJzU3luYyA9IF9ta2RpcnMubWtkaXJzU3luY1xuXG5jb25zdCBfc3ltbGlua1BhdGhzID0gcmVxdWlyZSgnLi9zeW1saW5rLXBhdGhzJylcbmNvbnN0IHN5bWxpbmtQYXRocyA9IF9zeW1saW5rUGF0aHMuc3ltbGlua1BhdGhzXG5jb25zdCBzeW1saW5rUGF0aHNTeW5jID0gX3N5bWxpbmtQYXRocy5zeW1saW5rUGF0aHNTeW5jXG5cbmNvbnN0IF9zeW1saW5rVHlwZSA9IHJlcXVpcmUoJy4vc3ltbGluay10eXBlJylcbmNvbnN0IHN5bWxpbmtUeXBlID0gX3N5bWxpbmtUeXBlLnN5bWxpbmtUeXBlXG5jb25zdCBzeW1saW5rVHlwZVN5bmMgPSBfc3ltbGlua1R5cGUuc3ltbGlua1R5cGVTeW5jXG5cbmNvbnN0IHBhdGhFeGlzdHMgPSByZXF1aXJlKCcuLi9wYXRoLWV4aXN0cycpLnBhdGhFeGlzdHNcblxuZnVuY3Rpb24gY3JlYXRlU3ltbGluayAoc3JjcGF0aCwgZHN0cGF0aCwgdHlwZSwgY2FsbGJhY2spIHtcbiAgY2FsbGJhY2sgPSAodHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicpID8gdHlwZSA6IGNhbGxiYWNrXG4gIHR5cGUgPSAodHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicpID8gZmFsc2UgOiB0eXBlXG5cbiAgcGF0aEV4aXN0cyhkc3RwYXRoLCAoZXJyLCBkZXN0aW5hdGlvbkV4aXN0cykgPT4ge1xuICAgIGlmIChlcnIpIHJldHVybiBjYWxsYmFjayhlcnIpXG4gICAgaWYgKGRlc3RpbmF0aW9uRXhpc3RzKSByZXR1cm4gY2FsbGJhY2sobnVsbClcbiAgICBzeW1saW5rUGF0aHMoc3JjcGF0aCwgZHN0cGF0aCwgKGVyciwgcmVsYXRpdmUpID0+IHtcbiAgICAgIGlmIChlcnIpIHJldHVybiBjYWxsYmFjayhlcnIpXG4gICAgICBzcmNwYXRoID0gcmVsYXRpdmUudG9Ec3RcbiAgICAgIHN5bWxpbmtUeXBlKHJlbGF0aXZlLnRvQ3dkLCB0eXBlLCAoZXJyLCB0eXBlKSA9PiB7XG4gICAgICAgIGlmIChlcnIpIHJldHVybiBjYWxsYmFjayhlcnIpXG4gICAgICAgIGNvbnN0IGRpciA9IHBhdGguZGlybmFtZShkc3RwYXRoKVxuICAgICAgICBwYXRoRXhpc3RzKGRpciwgKGVyciwgZGlyRXhpc3RzKSA9PiB7XG4gICAgICAgICAgaWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGVycilcbiAgICAgICAgICBpZiAoZGlyRXhpc3RzKSByZXR1cm4gZnMuc3ltbGluayhzcmNwYXRoLCBkc3RwYXRoLCB0eXBlLCBjYWxsYmFjaylcbiAgICAgICAgICBta2RpcnMoZGlyLCBlcnIgPT4ge1xuICAgICAgICAgICAgaWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGVycilcbiAgICAgICAgICAgIGZzLnN5bWxpbmsoc3JjcGF0aCwgZHN0cGF0aCwgdHlwZSwgY2FsbGJhY2spXG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfSlcbiAgfSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlU3ltbGlua1N5bmMgKHNyY3BhdGgsIGRzdHBhdGgsIHR5cGUpIHtcbiAgY29uc3QgZGVzdGluYXRpb25FeGlzdHMgPSBmcy5leGlzdHNTeW5jKGRzdHBhdGgpXG4gIGlmIChkZXN0aW5hdGlvbkV4aXN0cykgcmV0dXJuIHVuZGVmaW5lZFxuXG4gIGNvbnN0IHJlbGF0aXZlID0gc3ltbGlua1BhdGhzU3luYyhzcmNwYXRoLCBkc3RwYXRoKVxuICBzcmNwYXRoID0gcmVsYXRpdmUudG9Ec3RcbiAgdHlwZSA9IHN5bWxpbmtUeXBlU3luYyhyZWxhdGl2ZS50b0N3ZCwgdHlwZSlcbiAgY29uc3QgZGlyID0gcGF0aC5kaXJuYW1lKGRzdHBhdGgpXG4gIGNvbnN0IGV4aXN0cyA9IGZzLmV4aXN0c1N5bmMoZGlyKVxuICBpZiAoZXhpc3RzKSByZXR1cm4gZnMuc3ltbGlua1N5bmMoc3JjcGF0aCwgZHN0cGF0aCwgdHlwZSlcbiAgbWtkaXJzU3luYyhkaXIpXG4gIHJldHVybiBmcy5zeW1saW5rU3luYyhzcmNwYXRoLCBkc3RwYXRoLCB0eXBlKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3JlYXRlU3ltbGluazogdShjcmVhdGVTeW1saW5rKSxcbiAgY3JlYXRlU3ltbGlua1N5bmNcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/fs-extra/lib/ensure/symlink.js\n");

/***/ }),

/***/ "./node_modules/fs-extra/lib/fs/index.js":
/*!***********************************************!*\
  !*** ./node_modules/fs-extra/lib/fs/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval(" // This is adapted from https://github.com/normalize/mz\n// Copyright (c) 2014-2016 Jonathan Ong me@jongleberry.com and Contributors\n\nvar u = __webpack_require__(/*! universalify */ \"./node_modules/universalify/index.js\").fromCallback;\n\nvar fs = __webpack_require__(/*! graceful-fs */ \"./node_modules/graceful-fs/graceful-fs.js\");\n\nvar api = ['access', 'appendFile', 'chmod', 'chown', 'close', 'copyFile', 'fchmod', 'fchown', 'fdatasync', 'fstat', 'fsync', 'ftruncate', 'futimes', 'lchmod', 'lchown', 'link', 'lstat', 'mkdir', 'mkdtemp', 'open', 'opendir', 'readdir', 'readFile', 'readlink', 'realpath', 'rename', 'rm', 'rmdir', 'stat', 'symlink', 'truncate', 'unlink', 'utimes', 'writeFile'].filter(function (key) {\n  // Some commands are not available on some systems. Ex:\n  // fs.opendir was added in Node.js v12.12.0\n  // fs.rm was added in Node.js v14.14.0\n  // fs.lchown is not available on at least some Linux\n  return typeof fs[key] === 'function';\n}); // Export all keys:\n\nObject.keys(fs).forEach(function (key) {\n  if (key === 'promises') {\n    // fs.promises is a getter property that triggers ExperimentalWarning\n    // Don't re-export it here, the getter is defined in \"lib/index.js\"\n    return;\n  }\n\n  exports[key] = fs[key];\n}); // Universalify async methods:\n\napi.forEach(function (method) {\n  exports[method] = u(fs[method]);\n}); // We differ from mz/fs in that we still ship the old, broken, fs.exists()\n// since we are a drop-in replacement for the native module\n\nexports.exists = function (filename, callback) {\n  if (typeof callback === 'function') {\n    return fs.exists(filename, callback);\n  }\n\n  return new Promise(function (resolve) {\n    return fs.exists(filename, resolve);\n  });\n}; // fs.read(), fs.write(), & fs.writev() need special treatment due to multiple callback args\n\n\nexports.read = function (fd, buffer, offset, length, position, callback) {\n  if (typeof callback === 'function') {\n    return fs.read(fd, buffer, offset, length, position, callback);\n  }\n\n  return new Promise(function (resolve, reject) {\n    fs.read(fd, buffer, offset, length, position, function (err, bytesRead, buffer) {\n      if (err) return reject(err);\n      resolve({\n        bytesRead: bytesRead,\n        buffer: buffer\n      });\n    });\n  });\n}; // Function signature can be\n// fs.write(fd, buffer[, offset[, length[, position]]], callback)\n// OR\n// fs.write(fd, string[, position[, encoding]], callback)\n// We need to handle both cases, so we use ...args\n\n\nexports.write = function (fd, buffer) {\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  if (typeof args[args.length - 1] === 'function') {\n    return fs.write.apply(fs, [fd, buffer].concat(args));\n  }\n\n  return new Promise(function (resolve, reject) {\n    fs.write.apply(fs, [fd, buffer].concat(args, [function (err, bytesWritten, buffer) {\n      if (err) return reject(err);\n      resolve({\n        bytesWritten: bytesWritten,\n        buffer: buffer\n      });\n    }]));\n  });\n}; // fs.writev only available in Node v12.9.0+\n\n\nif (typeof fs.writev === 'function') {\n  // Function signature is\n  // s.writev(fd, buffers[, position], callback)\n  // We need to handle the optional arg, so we use ...args\n  exports.writev = function (fd, buffers) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      args[_key2 - 2] = arguments[_key2];\n    }\n\n    if (typeof args[args.length - 1] === 'function') {\n      return fs.writev.apply(fs, [fd, buffers].concat(args));\n    }\n\n    return new Promise(function (resolve, reject) {\n      fs.writev.apply(fs, [fd, buffers].concat(args, [function (err, bytesWritten, buffers) {\n        if (err) return reject(err);\n        resolve({\n          bytesWritten: bytesWritten,\n          buffers: buffers\n        });\n      }]));\n    });\n  };\n} // fs.realpath.native only available in Node v9.2+\n\n\nif (typeof fs.realpath[\"native\"] === 'function') {\n  exports.realpath.native = u(fs.realpath[\"native\"]);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/fs-extra/lib/fs/index.js\n");

/***/ }),

/***/ "./node_modules/fs-extra/lib/index.js":
/*!********************************************!*\
  !*** ./node_modules/fs-extra/lib/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nmodule.exports = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, __webpack_require__(/*! ./fs */ \"./node_modules/fs-extra/lib/fs/index.js\")), __webpack_require__(/*! ./copy-sync */ \"./node_modules/fs-extra/lib/copy-sync/index.js\")), __webpack_require__(/*! ./copy */ \"./node_modules/fs-extra/lib/copy/index.js\")), __webpack_require__(/*! ./empty */ \"./node_modules/fs-extra/lib/empty/index.js\")), __webpack_require__(/*! ./ensure */ \"./node_modules/fs-extra/lib/ensure/index.js\")), __webpack_require__(/*! ./json */ \"./node_modules/fs-extra/lib/json/index.js\")), __webpack_require__(/*! ./mkdirs */ \"./node_modules/fs-extra/lib/mkdirs/index.js\")), __webpack_require__(/*! ./move-sync */ \"./node_modules/fs-extra/lib/move-sync/index.js\")), __webpack_require__(/*! ./move */ \"./node_modules/fs-extra/lib/move/index.js\")), __webpack_require__(/*! ./output */ \"./node_modules/fs-extra/lib/output/index.js\")), __webpack_require__(/*! ./path-exists */ \"./node_modules/fs-extra/lib/path-exists/index.js\")), __webpack_require__(/*! ./remove */ \"./node_modules/fs-extra/lib/remove/index.js\")); // Export fs.promises as a getter property so that we don't trigger\n// ExperimentalWarning before fs.promises is actually accessed.\n\nvar fs = __webpack_require__(/*! fs */ \"fs\");\n\nif (Object.getOwnPropertyDescriptor(fs, 'promises')) {\n  Object.defineProperty(module.exports, \"promises\", ({\n    get: function get() {\n      return fs.promises;\n    }\n  }));\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGtib3gtZ3VpLy4vbm9kZV9tb2R1bGVzL2ZzLWV4dHJhL2xpYi9pbmRleC5qcz84M2VmIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIiwiZnMiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXQiLCJwcm9taXNlcyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0FBRUFBLE1BQU0sQ0FBQ0MsT0FBUCwrS0FFS0MsbUJBQU8sQ0FBQyxxREFBRCxDQUZaLEdBSUtBLG1CQUFPLENBQUMsbUVBQUQsQ0FKWixHQUtLQSxtQkFBTyxDQUFDLHlEQUFELENBTFosR0FNS0EsbUJBQU8sQ0FBQywyREFBRCxDQU5aLEdBT0tBLG1CQUFPLENBQUMsNkRBQUQsQ0FQWixHQVFLQSxtQkFBTyxDQUFDLHlEQUFELENBUlosR0FTS0EsbUJBQU8sQ0FBQyw2REFBRCxDQVRaLEdBVUtBLG1CQUFPLENBQUMsbUVBQUQsQ0FWWixHQVdLQSxtQkFBTyxDQUFDLHlEQUFELENBWFosR0FZS0EsbUJBQU8sQ0FBQyw2REFBRCxDQVpaLEdBYUtBLG1CQUFPLENBQUMsdUVBQUQsQ0FiWixHQWNLQSxtQkFBTyxDQUFDLDZEQUFELENBZFosRSxDQWlCQTtBQUNBOztBQUNBLElBQU1DLEVBQUUsR0FBR0QsbUJBQU8sQ0FBQyxjQUFELENBQWxCOztBQUNBLElBQUlFLE1BQU0sQ0FBQ0Msd0JBQVAsQ0FBZ0NGLEVBQWhDLEVBQW9DLFVBQXBDLENBQUosRUFBcUQ7QUFDbkRDLHFEQUFrRDtBQUNoREUsT0FEZ0QsaUJBQ3pDO0FBQUUsYUFBT0gsRUFBRSxDQUFDSSxRQUFWO0FBQW9CO0FBRG1CLEdBQWxEO0FBR0QiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZnMtZXh0cmEvbGliL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBFeHBvcnQgcHJvbWlzZWlmaWVkIGdyYWNlZnVsLWZzOlxuICAuLi5yZXF1aXJlKCcuL2ZzJyksXG4gIC8vIEV4cG9ydCBleHRyYSBtZXRob2RzOlxuICAuLi5yZXF1aXJlKCcuL2NvcHktc3luYycpLFxuICAuLi5yZXF1aXJlKCcuL2NvcHknKSxcbiAgLi4ucmVxdWlyZSgnLi9lbXB0eScpLFxuICAuLi5yZXF1aXJlKCcuL2Vuc3VyZScpLFxuICAuLi5yZXF1aXJlKCcuL2pzb24nKSxcbiAgLi4ucmVxdWlyZSgnLi9ta2RpcnMnKSxcbiAgLi4ucmVxdWlyZSgnLi9tb3ZlLXN5bmMnKSxcbiAgLi4ucmVxdWlyZSgnLi9tb3ZlJyksXG4gIC4uLnJlcXVpcmUoJy4vb3V0cHV0JyksXG4gIC4uLnJlcXVpcmUoJy4vcGF0aC1leGlzdHMnKSxcbiAgLi4ucmVxdWlyZSgnLi9yZW1vdmUnKVxufVxuXG4vLyBFeHBvcnQgZnMucHJvbWlzZXMgYXMgYSBnZXR0ZXIgcHJvcGVydHkgc28gdGhhdCB3ZSBkb24ndCB0cmlnZ2VyXG4vLyBFeHBlcmltZW50YWxXYXJuaW5nIGJlZm9yZSBmcy5wcm9taXNlcyBpcyBhY3R1YWxseSBhY2Nlc3NlZC5cbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKVxuaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZnMsICdwcm9taXNlcycpKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUuZXhwb3J0cywgJ3Byb21pc2VzJywge1xuICAgIGdldCAoKSB7IHJldHVybiBmcy5wcm9taXNlcyB9XG4gIH0pXG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/fs-extra/lib/index.js\n");

/***/ }),

/***/ "./node_modules/fs-extra/lib/json/index.js":
/*!*************************************************!*\
  !*** ./node_modules/fs-extra/lib/json/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar u = __webpack_require__(/*! universalify */ \"./node_modules/universalify/index.js\").fromPromise;\n\nvar jsonFile = __webpack_require__(/*! ./jsonfile */ \"./node_modules/fs-extra/lib/json/jsonfile.js\");\n\njsonFile.outputJson = u(__webpack_require__(/*! ./output-json */ \"./node_modules/fs-extra/lib/json/output-json.js\"));\njsonFile.outputJsonSync = __webpack_require__(/*! ./output-json-sync */ \"./node_modules/fs-extra/lib/json/output-json-sync.js\"); // aliases\n\njsonFile.outputJSON = jsonFile.outputJson;\njsonFile.outputJSONSync = jsonFile.outputJsonSync;\njsonFile.writeJSON = jsonFile.writeJson;\njsonFile.writeJSONSync = jsonFile.writeJsonSync;\njsonFile.readJSON = jsonFile.readJson;\njsonFile.readJSONSync = jsonFile.readJsonSync;\nmodule.exports = jsonFile;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGtib3gtZ3VpLy4vbm9kZV9tb2R1bGVzL2ZzLWV4dHJhL2xpYi9qc29uL2luZGV4LmpzPzA5M2YiXSwibmFtZXMiOlsidSIsInJlcXVpcmUiLCJqc29uRmlsZSIsIm91dHB1dEpzb24iLCJvdXRwdXRKc29uU3luYyIsIm91dHB1dEpTT04iLCJvdXRwdXRKU09OU3luYyIsIndyaXRlSlNPTiIsIndyaXRlSnNvbiIsIndyaXRlSlNPTlN5bmMiLCJ3cml0ZUpzb25TeW5jIiwicmVhZEpTT04iLCJyZWFkSnNvbiIsInJlYWRKU09OU3luYyIsInJlYWRKc29uU3luYyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLENBQUMsR0FBR0MsMkZBQVY7O0FBQ0EsSUFBTUMsUUFBUSxHQUFHRCxtQkFBTyxDQUFDLGdFQUFELENBQXhCOztBQUVBQyxRQUFRLENBQUNDLFVBQVQsR0FBc0JILENBQUMsQ0FBQ0MsbUJBQU8sQ0FBQyxzRUFBRCxDQUFSLENBQXZCO0FBQ0FDLFFBQVEsQ0FBQ0UsY0FBVCxHQUEwQkgsbUJBQU8sQ0FBQyxnRkFBRCxDQUFqQyxDLENBQ0E7O0FBQ0FDLFFBQVEsQ0FBQ0csVUFBVCxHQUFzQkgsUUFBUSxDQUFDQyxVQUEvQjtBQUNBRCxRQUFRLENBQUNJLGNBQVQsR0FBMEJKLFFBQVEsQ0FBQ0UsY0FBbkM7QUFDQUYsUUFBUSxDQUFDSyxTQUFULEdBQXFCTCxRQUFRLENBQUNNLFNBQTlCO0FBQ0FOLFFBQVEsQ0FBQ08sYUFBVCxHQUF5QlAsUUFBUSxDQUFDUSxhQUFsQztBQUNBUixRQUFRLENBQUNTLFFBQVQsR0FBb0JULFFBQVEsQ0FBQ1UsUUFBN0I7QUFDQVYsUUFBUSxDQUFDVyxZQUFULEdBQXdCWCxRQUFRLENBQUNZLFlBQWpDO0FBRUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmQsUUFBakIiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZnMtZXh0cmEvbGliL2pzb24vaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgdSA9IHJlcXVpcmUoJ3VuaXZlcnNhbGlmeScpLmZyb21Qcm9taXNlXG5jb25zdCBqc29uRmlsZSA9IHJlcXVpcmUoJy4vanNvbmZpbGUnKVxuXG5qc29uRmlsZS5vdXRwdXRKc29uID0gdShyZXF1aXJlKCcuL291dHB1dC1qc29uJykpXG5qc29uRmlsZS5vdXRwdXRKc29uU3luYyA9IHJlcXVpcmUoJy4vb3V0cHV0LWpzb24tc3luYycpXG4vLyBhbGlhc2VzXG5qc29uRmlsZS5vdXRwdXRKU09OID0ganNvbkZpbGUub3V0cHV0SnNvblxuanNvbkZpbGUub3V0cHV0SlNPTlN5bmMgPSBqc29uRmlsZS5vdXRwdXRKc29uU3luY1xuanNvbkZpbGUud3JpdGVKU09OID0ganNvbkZpbGUud3JpdGVKc29uXG5qc29uRmlsZS53cml0ZUpTT05TeW5jID0ganNvbkZpbGUud3JpdGVKc29uU3luY1xuanNvbkZpbGUucmVhZEpTT04gPSBqc29uRmlsZS5yZWFkSnNvblxuanNvbkZpbGUucmVhZEpTT05TeW5jID0ganNvbkZpbGUucmVhZEpzb25TeW5jXG5cbm1vZHVsZS5leHBvcnRzID0ganNvbkZpbGVcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/fs-extra/lib/json/index.js\n");

/***/ }),

/***/ "./node_modules/fs-extra/lib/json/jsonfile.js":
/*!****************************************************!*\
  !*** ./node_modules/fs-extra/lib/json/jsonfile.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar jsonFile = __webpack_require__(/*! jsonfile */ \"./node_modules/jsonfile/index.js\");\n\nmodule.exports = {\n  // jsonfile exports\n  readJson: jsonFile.readFile,\n  readJsonSync: jsonFile.readFileSync,\n  writeJson: jsonFile.writeFile,\n  writeJsonSync: jsonFile.writeFileSync\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGtib3gtZ3VpLy4vbm9kZV9tb2R1bGVzL2ZzLWV4dHJhL2xpYi9qc29uL2pzb25maWxlLmpzPzhjNjMiXSwibmFtZXMiOlsianNvbkZpbGUiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlYWRKc29uIiwicmVhZEZpbGUiLCJyZWFkSnNvblN5bmMiLCJyZWFkRmlsZVN5bmMiLCJ3cml0ZUpzb24iLCJ3cml0ZUZpbGUiLCJ3cml0ZUpzb25TeW5jIiwid3JpdGVGaWxlU3luYyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsUUFBUSxHQUFHQyxtQkFBTyxDQUFDLGtEQUFELENBQXhCOztBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZjtBQUNBQyxVQUFRLEVBQUVKLFFBQVEsQ0FBQ0ssUUFGSjtBQUdmQyxjQUFZLEVBQUVOLFFBQVEsQ0FBQ08sWUFIUjtBQUlmQyxXQUFTLEVBQUVSLFFBQVEsQ0FBQ1MsU0FKTDtBQUtmQyxlQUFhLEVBQUVWLFFBQVEsQ0FBQ1c7QUFMVCxDQUFqQiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9mcy1leHRyYS9saWIvanNvbi9qc29uZmlsZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCBqc29uRmlsZSA9IHJlcXVpcmUoJ2pzb25maWxlJylcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGpzb25maWxlIGV4cG9ydHNcbiAgcmVhZEpzb246IGpzb25GaWxlLnJlYWRGaWxlLFxuICByZWFkSnNvblN5bmM6IGpzb25GaWxlLnJlYWRGaWxlU3luYyxcbiAgd3JpdGVKc29uOiBqc29uRmlsZS53cml0ZUZpbGUsXG4gIHdyaXRlSnNvblN5bmM6IGpzb25GaWxlLndyaXRlRmlsZVN5bmNcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/fs-extra/lib/json/jsonfile.js\n");

/***/ }),

/***/ "./node_modules/fs-extra/lib/json/output-json-sync.js":
/*!************************************************************!*\
  !*** ./node_modules/fs-extra/lib/json/output-json-sync.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar _require = __webpack_require__(/*! jsonfile/utils */ \"./node_modules/jsonfile/utils.js\"),\n    stringify = _require.stringify;\n\nvar _require2 = __webpack_require__(/*! ../output */ \"./node_modules/fs-extra/lib/output/index.js\"),\n    outputFileSync = _require2.outputFileSync;\n\nfunction outputJsonSync(file, data, options) {\n  var str = stringify(data, options);\n  outputFileSync(file, str, options);\n}\n\nmodule.exports = outputJsonSync;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGtib3gtZ3VpLy4vbm9kZV9tb2R1bGVzL2ZzLWV4dHJhL2xpYi9qc29uL291dHB1dC1qc29uLXN5bmMuanM/MzBiMyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwic3RyaW5naWZ5Iiwib3V0cHV0RmlsZVN5bmMiLCJvdXRwdXRKc29uU3luYyIsImZpbGUiLCJkYXRhIiwib3B0aW9ucyIsInN0ciIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLGVBQXNCQSxtQkFBTyxDQUFDLHdEQUFELENBQTdCO0FBQUEsSUFBUUMsU0FBUixZQUFRQSxTQUFSOztBQUNBLGdCQUEyQkQsbUJBQU8sQ0FBQyw4REFBRCxDQUFsQztBQUFBLElBQVFFLGNBQVIsYUFBUUEsY0FBUjs7QUFFQSxTQUFTQyxjQUFULENBQXlCQyxJQUF6QixFQUErQkMsSUFBL0IsRUFBcUNDLE9BQXJDLEVBQThDO0FBQzVDLE1BQU1DLEdBQUcsR0FBR04sU0FBUyxDQUFDSSxJQUFELEVBQU9DLE9BQVAsQ0FBckI7QUFFQUosZ0JBQWMsQ0FBQ0UsSUFBRCxFQUFPRyxHQUFQLEVBQVlELE9BQVosQ0FBZDtBQUNEOztBQUVERSxNQUFNLENBQUNDLE9BQVAsR0FBaUJOLGNBQWpCIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2ZzLWV4dHJhL2xpYi9qc29uL291dHB1dC1qc29uLXN5bmMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgeyBzdHJpbmdpZnkgfSA9IHJlcXVpcmUoJ2pzb25maWxlL3V0aWxzJylcbmNvbnN0IHsgb3V0cHV0RmlsZVN5bmMgfSA9IHJlcXVpcmUoJy4uL291dHB1dCcpXG5cbmZ1bmN0aW9uIG91dHB1dEpzb25TeW5jIChmaWxlLCBkYXRhLCBvcHRpb25zKSB7XG4gIGNvbnN0IHN0ciA9IHN0cmluZ2lmeShkYXRhLCBvcHRpb25zKVxuXG4gIG91dHB1dEZpbGVTeW5jKGZpbGUsIHN0ciwgb3B0aW9ucylcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvdXRwdXRKc29uU3luY1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/fs-extra/lib/json/output-json-sync.js\n");

/***/ }),

/***/ "./node_modules/fs-extra/lib/json/output-json.js":
/*!*******************************************************!*\
  !*** ./node_modules/fs-extra/lib/json/output-json.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar _require = __webpack_require__(/*! jsonfile/utils */ \"./node_modules/jsonfile/utils.js\"),\n    stringify = _require.stringify;\n\nvar _require2 = __webpack_require__(/*! ../output */ \"./node_modules/fs-extra/lib/output/index.js\"),\n    outputFile = _require2.outputFile;\n\nfunction outputJson(_x, _x2) {\n  return _outputJson.apply(this, arguments);\n}\n\nfunction _outputJson() {\n  _outputJson = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(file, data) {\n    var options,\n        str,\n        _args = arguments;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n            str = stringify(data, options);\n            _context.next = 4;\n            return outputFile(file, str, options);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _outputJson.apply(this, arguments);\n}\n\nmodule.exports = outputJson;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGtib3gtZ3VpLy4vbm9kZV9tb2R1bGVzL2ZzLWV4dHJhL2xpYi9qc29uL291dHB1dC1qc29uLmpzP2JkY2EiXSwibmFtZXMiOlsicmVxdWlyZSIsInN0cmluZ2lmeSIsIm91dHB1dEZpbGUiLCJvdXRwdXRKc29uIiwiZmlsZSIsImRhdGEiLCJvcHRpb25zIiwic3RyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUVBLGVBQXNCQSxtQkFBTyxDQUFDLHdEQUFELENBQTdCO0FBQUEsSUFBUUMsU0FBUixZQUFRQSxTQUFSOztBQUNBLGdCQUF1QkQsbUJBQU8sQ0FBQyw4REFBRCxDQUE5QjtBQUFBLElBQVFFLFVBQVIsYUFBUUEsVUFBUjs7U0FFZUMsVTs7Ozs7d0VBQWYsaUJBQTJCQyxJQUEzQixFQUFpQ0MsSUFBakM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUF1Q0MsbUJBQXZDLDJEQUFpRCxFQUFqRDtBQUNRQyxlQURSLEdBQ2NOLFNBQVMsQ0FBQ0ksSUFBRCxFQUFPQyxPQUFQLENBRHZCO0FBQUE7QUFBQSxtQkFHUUosVUFBVSxDQUFDRSxJQUFELEVBQU9HLEdBQVAsRUFBWUQsT0FBWixDQUhsQjs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxHOzs7O0FBTUFFLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQk4sVUFBakIiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZnMtZXh0cmEvbGliL2pzb24vb3V0cHV0LWpzb24uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgeyBzdHJpbmdpZnkgfSA9IHJlcXVpcmUoJ2pzb25maWxlL3V0aWxzJylcbmNvbnN0IHsgb3V0cHV0RmlsZSB9ID0gcmVxdWlyZSgnLi4vb3V0cHV0JylcblxuYXN5bmMgZnVuY3Rpb24gb3V0cHV0SnNvbiAoZmlsZSwgZGF0YSwgb3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IHN0ciA9IHN0cmluZ2lmeShkYXRhLCBvcHRpb25zKVxuXG4gIGF3YWl0IG91dHB1dEZpbGUoZmlsZSwgc3RyLCBvcHRpb25zKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG91dHB1dEpzb25cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/fs-extra/lib/json/output-json.js\n");

/***/ }),

/***/ "./node_modules/fs-extra/lib/mkdirs/index.js":
/*!***************************************************!*\
  !*** ./node_modules/fs-extra/lib/mkdirs/index.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar u = __webpack_require__(/*! universalify */ \"./node_modules/universalify/index.js\").fromPromise;\n\nvar _require = __webpack_require__(/*! ./make-dir */ \"./node_modules/fs-extra/lib/mkdirs/make-dir.js\"),\n    _makeDir = _require.makeDir,\n    makeDirSync = _require.makeDirSync;\n\nvar makeDir = u(_makeDir);\nmodule.exports = {\n  mkdirs: makeDir,\n  mkdirsSync: makeDirSync,\n  // alias\n  mkdirp: makeDir,\n  mkdirpSync: makeDirSync,\n  ensureDir: makeDir,\n  ensureDirSync: makeDirSync\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGtib3gtZ3VpLy4vbm9kZV9tb2R1bGVzL2ZzLWV4dHJhL2xpYi9ta2RpcnMvaW5kZXguanM/Y2YyMCJdLCJuYW1lcyI6WyJ1IiwicmVxdWlyZSIsIl9tYWtlRGlyIiwibWFrZURpciIsIm1ha2VEaXJTeW5jIiwibW9kdWxlIiwiZXhwb3J0cyIsIm1rZGlycyIsIm1rZGlyc1N5bmMiLCJta2RpcnAiLCJta2RpcnBTeW5jIiwiZW5zdXJlRGlyIiwiZW5zdXJlRGlyU3luYyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsSUFBTUEsQ0FBQyxHQUFHQywyRkFBVjs7QUFDQSxlQUEyQ0EsbUJBQU8sQ0FBQyxrRUFBRCxDQUFsRDtBQUFBLElBQWlCQyxRQUFqQixZQUFRQyxPQUFSO0FBQUEsSUFBMkJDLFdBQTNCLFlBQTJCQSxXQUEzQjs7QUFDQSxJQUFNRCxPQUFPLEdBQUdILENBQUMsQ0FBQ0UsUUFBRCxDQUFqQjtBQUVBRyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZkMsUUFBTSxFQUFFSixPQURPO0FBRWZLLFlBQVUsRUFBRUosV0FGRztBQUdmO0FBQ0FLLFFBQU0sRUFBRU4sT0FKTztBQUtmTyxZQUFVLEVBQUVOLFdBTEc7QUFNZk8sV0FBUyxFQUFFUixPQU5JO0FBT2ZTLGVBQWEsRUFBRVI7QUFQQSxDQUFqQiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9mcy1leHRyYS9saWIvbWtkaXJzL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5jb25zdCB1ID0gcmVxdWlyZSgndW5pdmVyc2FsaWZ5JykuZnJvbVByb21pc2VcbmNvbnN0IHsgbWFrZURpcjogX21ha2VEaXIsIG1ha2VEaXJTeW5jIH0gPSByZXF1aXJlKCcuL21ha2UtZGlyJylcbmNvbnN0IG1ha2VEaXIgPSB1KF9tYWtlRGlyKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgbWtkaXJzOiBtYWtlRGlyLFxuICBta2RpcnNTeW5jOiBtYWtlRGlyU3luYyxcbiAgLy8gYWxpYXNcbiAgbWtkaXJwOiBtYWtlRGlyLFxuICBta2RpcnBTeW5jOiBtYWtlRGlyU3luYyxcbiAgZW5zdXJlRGlyOiBtYWtlRGlyLFxuICBlbnN1cmVEaXJTeW5jOiBtYWtlRGlyU3luY1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/fs-extra/lib/mkdirs/index.js\n");

/***/ }),

/***/ "./node_modules/fs-extra/lib/mkdirs/make-dir.js":
/*!******************************************************!*\
  !*** ./node_modules/fs-extra/lib/mkdirs/make-dir.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Adapted from https://github.com/sindresorhus/make-dir\n// Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar fs = __webpack_require__(/*! ../fs */ \"./node_modules/fs-extra/lib/fs/index.js\");\n\nvar path = __webpack_require__(/*! path */ \"path\");\n\nvar atLeastNode = __webpack_require__(/*! at-least-node */ \"./node_modules/at-least-node/index.js\");\n\nvar useNativeRecursiveOption = atLeastNode('10.12.0'); // https://github.com/nodejs/node/issues/8987\n// https://github.com/libuv/libuv/pull/1088\n\nvar checkPath = function checkPath(pth) {\n  if (process.platform === 'win32') {\n    var pathHasInvalidWinCharacters = /[<>:\"|?*]/.test(pth.replace(path.parse(pth).root, ''));\n\n    if (pathHasInvalidWinCharacters) {\n      var error = new Error(\"Path contains invalid characters: \".concat(pth));\n      error.code = 'EINVAL';\n      throw error;\n    }\n  }\n};\n\nvar processOptions = function processOptions(options) {\n  var defaults = {\n    mode: 511\n  };\n  if (typeof options === 'number') options = {\n    mode: options\n  };\n  return _objectSpread(_objectSpread({}, defaults), options);\n};\n\nvar permissionError = function permissionError(pth) {\n  // This replicates the exception of `fs.mkdir` with native the\n  // `recusive` option when run on an invalid drive under Windows.\n  var error = new Error(\"operation not permitted, mkdir '\".concat(pth, \"'\"));\n  error.code = 'EPERM';\n  error.errno = -4048;\n  error.path = pth;\n  error.syscall = 'mkdir';\n  return error;\n};\n\nmodule.exports.makeDir = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(input, options) {\n    var pth, make;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            checkPath(input);\n            options = processOptions(options);\n\n            if (!useNativeRecursiveOption) {\n              _context2.next = 5;\n              break;\n            }\n\n            pth = path.resolve(input);\n            return _context2.abrupt(\"return\", fs.mkdir(pth, {\n              mode: options.mode,\n              recursive: true\n            }));\n\n          case 5:\n            make = /*#__PURE__*/function () {\n              var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(pth) {\n                var stats;\n                return regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.prev = 0;\n                        _context.next = 3;\n                        return fs.mkdir(pth, options.mode);\n\n                      case 3:\n                        _context.next = 28;\n                        break;\n\n                      case 5:\n                        _context.prev = 5;\n                        _context.t0 = _context[\"catch\"](0);\n\n                        if (!(_context.t0.code === 'EPERM')) {\n                          _context.next = 9;\n                          break;\n                        }\n\n                        throw _context.t0;\n\n                      case 9:\n                        if (!(_context.t0.code === 'ENOENT')) {\n                          _context.next = 17;\n                          break;\n                        }\n\n                        if (!(path.dirname(pth) === pth)) {\n                          _context.next = 12;\n                          break;\n                        }\n\n                        throw permissionError(pth);\n\n                      case 12:\n                        if (!_context.t0.message.includes('null bytes')) {\n                          _context.next = 14;\n                          break;\n                        }\n\n                        throw _context.t0;\n\n                      case 14:\n                        _context.next = 16;\n                        return make(path.dirname(pth));\n\n                      case 16:\n                        return _context.abrupt(\"return\", make(pth));\n\n                      case 17:\n                        _context.prev = 17;\n                        _context.next = 20;\n                        return fs.stat(pth);\n\n                      case 20:\n                        stats = _context.sent;\n\n                        if (stats.isDirectory()) {\n                          _context.next = 23;\n                          break;\n                        }\n\n                        throw new Error('The path is not a directory');\n\n                      case 23:\n                        _context.next = 28;\n                        break;\n\n                      case 25:\n                        _context.prev = 25;\n                        _context.t1 = _context[\"catch\"](17);\n                        throw _context.t0;\n\n                      case 28:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee, null, [[0, 5], [17, 25]]);\n              }));\n\n              return function make(_x3) {\n                return _ref2.apply(this, arguments);\n              };\n            }();\n\n            return _context2.abrupt(\"return\", make(path.resolve(input)));\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports.makeDirSync = function (input, options) {\n  checkPath(input);\n  options = processOptions(options);\n\n  if (useNativeRecursiveOption) {\n    var pth = path.resolve(input);\n    return fs.mkdirSync(pth, {\n      mode: options.mode,\n      recursive: true\n    });\n  }\n\n  var make = function make(pth) {\n    try {\n      fs.mkdirSync(pth, options.mode);\n    } catch (error) {\n      if (error.code === 'EPERM') {\n        throw error;\n      }\n\n      if (error.code === 'ENOENT') {\n        if (path.dirname(pth) === pth) {\n          throw permissionError(pth);\n        }\n\n        if (error.message.includes('null bytes')) {\n          throw error;\n        }\n\n        make(path.dirname(pth));\n        return make(pth);\n      }\n\n      try {\n        if (!fs.statSync(pth).isDirectory()) {\n          // This error is never exposed to the user\n          // it is caught below, and the original error is thrown\n          throw new Error('The path is not a directory');\n        }\n      } catch (_unused2) {\n        throw error;\n      }\n    }\n  };\n\n  return make(path.resolve(input));\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/fs-extra/lib/mkdirs/make-dir.js\n");

/***/ }),

/***/ "./node_modules/fs-extra/lib/move-sync/index.js":
/*!******************************************************!*\
  !*** ./node_modules/fs-extra/lib/move-sync/index.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nmodule.exports = {\n  moveSync: __webpack_require__(/*! ./move-sync */ \"./node_modules/fs-extra/lib/move-sync/move-sync.js\")\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGtib3gtZ3VpLy4vbm9kZV9tb2R1bGVzL2ZzLWV4dHJhL2xpYi9tb3ZlLXN5bmMvaW5kZXguanM/NGVlOSJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwibW92ZVN5bmMiLCJyZXF1aXJlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2ZDLFVBQVEsRUFBRUMsbUJBQU8sQ0FBQyx1RUFBRDtBQURGLENBQWpCIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2ZzLWV4dHJhL2xpYi9tb3ZlLXN5bmMvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIG1vdmVTeW5jOiByZXF1aXJlKCcuL21vdmUtc3luYycpXG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/fs-extra/lib/move-sync/index.js\n");

/***/ }),

/***/ "./node_modules/fs-extra/lib/move-sync/move-sync.js":
/*!**********************************************************!*\
  !*** ./node_modules/fs-extra/lib/move-sync/move-sync.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar fs = __webpack_require__(/*! graceful-fs */ \"./node_modules/graceful-fs/graceful-fs.js\");\n\nvar path = __webpack_require__(/*! path */ \"path\");\n\nvar copySync = __webpack_require__(/*! ../copy-sync */ \"./node_modules/fs-extra/lib/copy-sync/index.js\").copySync;\n\nvar removeSync = __webpack_require__(/*! ../remove */ \"./node_modules/fs-extra/lib/remove/index.js\").removeSync;\n\nvar mkdirpSync = __webpack_require__(/*! ../mkdirs */ \"./node_modules/fs-extra/lib/mkdirs/index.js\").mkdirpSync;\n\nvar stat = __webpack_require__(/*! ../util/stat */ \"./node_modules/fs-extra/lib/util/stat.js\");\n\nfunction moveSync(src, dest, opts) {\n  opts = opts || {};\n  var overwrite = opts.overwrite || opts.clobber || false;\n\n  var _stat$checkPathsSync = stat.checkPathsSync(src, dest, 'move'),\n      srcStat = _stat$checkPathsSync.srcStat;\n\n  stat.checkParentPathsSync(src, srcStat, dest, 'move');\n  mkdirpSync(path.dirname(dest));\n  return doRename(src, dest, overwrite);\n}\n\nfunction doRename(src, dest, overwrite) {\n  if (overwrite) {\n    removeSync(dest);\n    return rename(src, dest, overwrite);\n  }\n\n  if (fs.existsSync(dest)) throw new Error('dest already exists.');\n  return rename(src, dest, overwrite);\n}\n\nfunction rename(src, dest, overwrite) {\n  try {\n    fs.renameSync(src, dest);\n  } catch (err) {\n    if (err.code !== 'EXDEV') throw err;\n    return moveAcrossDevice(src, dest, overwrite);\n  }\n}\n\nfunction moveAcrossDevice(src, dest, overwrite) {\n  var opts = {\n    overwrite: overwrite,\n    errorOnExist: true\n  };\n  copySync(src, dest, opts);\n  return removeSync(src);\n}\n\nmodule.exports = moveSync;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGtib3gtZ3VpLy4vbm9kZV9tb2R1bGVzL2ZzLWV4dHJhL2xpYi9tb3ZlLXN5bmMvbW92ZS1zeW5jLmpzP2QzODkiXSwibmFtZXMiOlsiZnMiLCJyZXF1aXJlIiwicGF0aCIsImNvcHlTeW5jIiwicmVtb3ZlU3luYyIsIm1rZGlycFN5bmMiLCJzdGF0IiwibW92ZVN5bmMiLCJzcmMiLCJkZXN0Iiwib3B0cyIsIm92ZXJ3cml0ZSIsImNsb2JiZXIiLCJjaGVja1BhdGhzU3luYyIsInNyY1N0YXQiLCJjaGVja1BhcmVudFBhdGhzU3luYyIsImRpcm5hbWUiLCJkb1JlbmFtZSIsInJlbmFtZSIsImV4aXN0c1N5bmMiLCJFcnJvciIsInJlbmFtZVN5bmMiLCJlcnIiLCJjb2RlIiwibW92ZUFjcm9zc0RldmljZSIsImVycm9yT25FeGlzdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLEVBQUUsR0FBR0MsbUJBQU8sQ0FBQyw4REFBRCxDQUFsQjs7QUFDQSxJQUFNQyxJQUFJLEdBQUdELG1CQUFPLENBQUMsa0JBQUQsQ0FBcEI7O0FBQ0EsSUFBTUUsUUFBUSxHQUFHRixrR0FBakI7O0FBQ0EsSUFBTUcsVUFBVSxHQUFHSCw4RkFBbkI7O0FBQ0EsSUFBTUksVUFBVSxHQUFHSiw4RkFBbkI7O0FBQ0EsSUFBTUssSUFBSSxHQUFHTCxtQkFBTyxDQUFDLDhEQUFELENBQXBCOztBQUVBLFNBQVNNLFFBQVQsQ0FBbUJDLEdBQW5CLEVBQXdCQyxJQUF4QixFQUE4QkMsSUFBOUIsRUFBb0M7QUFDbENBLE1BQUksR0FBR0EsSUFBSSxJQUFJLEVBQWY7QUFDQSxNQUFNQyxTQUFTLEdBQUdELElBQUksQ0FBQ0MsU0FBTCxJQUFrQkQsSUFBSSxDQUFDRSxPQUF2QixJQUFrQyxLQUFwRDs7QUFFQSw2QkFBb0JOLElBQUksQ0FBQ08sY0FBTCxDQUFvQkwsR0FBcEIsRUFBeUJDLElBQXpCLEVBQStCLE1BQS9CLENBQXBCO0FBQUEsTUFBUUssT0FBUix3QkFBUUEsT0FBUjs7QUFDQVIsTUFBSSxDQUFDUyxvQkFBTCxDQUEwQlAsR0FBMUIsRUFBK0JNLE9BQS9CLEVBQXdDTCxJQUF4QyxFQUE4QyxNQUE5QztBQUNBSixZQUFVLENBQUNILElBQUksQ0FBQ2MsT0FBTCxDQUFhUCxJQUFiLENBQUQsQ0FBVjtBQUNBLFNBQU9RLFFBQVEsQ0FBQ1QsR0FBRCxFQUFNQyxJQUFOLEVBQVlFLFNBQVosQ0FBZjtBQUNEOztBQUVELFNBQVNNLFFBQVQsQ0FBbUJULEdBQW5CLEVBQXdCQyxJQUF4QixFQUE4QkUsU0FBOUIsRUFBeUM7QUFDdkMsTUFBSUEsU0FBSixFQUFlO0FBQ2JQLGNBQVUsQ0FBQ0ssSUFBRCxDQUFWO0FBQ0EsV0FBT1MsTUFBTSxDQUFDVixHQUFELEVBQU1DLElBQU4sRUFBWUUsU0FBWixDQUFiO0FBQ0Q7O0FBQ0QsTUFBSVgsRUFBRSxDQUFDbUIsVUFBSCxDQUFjVixJQUFkLENBQUosRUFBeUIsTUFBTSxJQUFJVyxLQUFKLENBQVUsc0JBQVYsQ0FBTjtBQUN6QixTQUFPRixNQUFNLENBQUNWLEdBQUQsRUFBTUMsSUFBTixFQUFZRSxTQUFaLENBQWI7QUFDRDs7QUFFRCxTQUFTTyxNQUFULENBQWlCVixHQUFqQixFQUFzQkMsSUFBdEIsRUFBNEJFLFNBQTVCLEVBQXVDO0FBQ3JDLE1BQUk7QUFDRlgsTUFBRSxDQUFDcUIsVUFBSCxDQUFjYixHQUFkLEVBQW1CQyxJQUFuQjtBQUNELEdBRkQsQ0FFRSxPQUFPYSxHQUFQLEVBQVk7QUFDWixRQUFJQSxHQUFHLENBQUNDLElBQUosS0FBYSxPQUFqQixFQUEwQixNQUFNRCxHQUFOO0FBQzFCLFdBQU9FLGdCQUFnQixDQUFDaEIsR0FBRCxFQUFNQyxJQUFOLEVBQVlFLFNBQVosQ0FBdkI7QUFDRDtBQUNGOztBQUVELFNBQVNhLGdCQUFULENBQTJCaEIsR0FBM0IsRUFBZ0NDLElBQWhDLEVBQXNDRSxTQUF0QyxFQUFpRDtBQUMvQyxNQUFNRCxJQUFJLEdBQUc7QUFDWEMsYUFBUyxFQUFUQSxTQURXO0FBRVhjLGdCQUFZLEVBQUU7QUFGSCxHQUFiO0FBSUF0QixVQUFRLENBQUNLLEdBQUQsRUFBTUMsSUFBTixFQUFZQyxJQUFaLENBQVI7QUFDQSxTQUFPTixVQUFVLENBQUNJLEdBQUQsQ0FBakI7QUFDRDs7QUFFRGtCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnBCLFFBQWpCIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2ZzLWV4dHJhL2xpYi9tb3ZlLXN5bmMvbW92ZS1zeW5jLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IGZzID0gcmVxdWlyZSgnZ3JhY2VmdWwtZnMnKVxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKVxuY29uc3QgY29weVN5bmMgPSByZXF1aXJlKCcuLi9jb3B5LXN5bmMnKS5jb3B5U3luY1xuY29uc3QgcmVtb3ZlU3luYyA9IHJlcXVpcmUoJy4uL3JlbW92ZScpLnJlbW92ZVN5bmNcbmNvbnN0IG1rZGlycFN5bmMgPSByZXF1aXJlKCcuLi9ta2RpcnMnKS5ta2RpcnBTeW5jXG5jb25zdCBzdGF0ID0gcmVxdWlyZSgnLi4vdXRpbC9zdGF0JylcblxuZnVuY3Rpb24gbW92ZVN5bmMgKHNyYywgZGVzdCwgb3B0cykge1xuICBvcHRzID0gb3B0cyB8fCB7fVxuICBjb25zdCBvdmVyd3JpdGUgPSBvcHRzLm92ZXJ3cml0ZSB8fCBvcHRzLmNsb2JiZXIgfHwgZmFsc2VcblxuICBjb25zdCB7IHNyY1N0YXQgfSA9IHN0YXQuY2hlY2tQYXRoc1N5bmMoc3JjLCBkZXN0LCAnbW92ZScpXG4gIHN0YXQuY2hlY2tQYXJlbnRQYXRoc1N5bmMoc3JjLCBzcmNTdGF0LCBkZXN0LCAnbW92ZScpXG4gIG1rZGlycFN5bmMocGF0aC5kaXJuYW1lKGRlc3QpKVxuICByZXR1cm4gZG9SZW5hbWUoc3JjLCBkZXN0LCBvdmVyd3JpdGUpXG59XG5cbmZ1bmN0aW9uIGRvUmVuYW1lIChzcmMsIGRlc3QsIG92ZXJ3cml0ZSkge1xuICBpZiAob3ZlcndyaXRlKSB7XG4gICAgcmVtb3ZlU3luYyhkZXN0KVxuICAgIHJldHVybiByZW5hbWUoc3JjLCBkZXN0LCBvdmVyd3JpdGUpXG4gIH1cbiAgaWYgKGZzLmV4aXN0c1N5bmMoZGVzdCkpIHRocm93IG5ldyBFcnJvcignZGVzdCBhbHJlYWR5IGV4aXN0cy4nKVxuICByZXR1cm4gcmVuYW1lKHNyYywgZGVzdCwgb3ZlcndyaXRlKVxufVxuXG5mdW5jdGlvbiByZW5hbWUgKHNyYywgZGVzdCwgb3ZlcndyaXRlKSB7XG4gIHRyeSB7XG4gICAgZnMucmVuYW1lU3luYyhzcmMsIGRlc3QpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChlcnIuY29kZSAhPT0gJ0VYREVWJykgdGhyb3cgZXJyXG4gICAgcmV0dXJuIG1vdmVBY3Jvc3NEZXZpY2Uoc3JjLCBkZXN0LCBvdmVyd3JpdGUpXG4gIH1cbn1cblxuZnVuY3Rpb24gbW92ZUFjcm9zc0RldmljZSAoc3JjLCBkZXN0LCBvdmVyd3JpdGUpIHtcbiAgY29uc3Qgb3B0cyA9IHtcbiAgICBvdmVyd3JpdGUsXG4gICAgZXJyb3JPbkV4aXN0OiB0cnVlXG4gIH1cbiAgY29weVN5bmMoc3JjLCBkZXN0LCBvcHRzKVxuICByZXR1cm4gcmVtb3ZlU3luYyhzcmMpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gbW92ZVN5bmNcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/fs-extra/lib/move-sync/move-sync.js\n");

/***/ }),

/***/ "./node_modules/fs-extra/lib/move/index.js":
/*!*************************************************!*\
  !*** ./node_modules/fs-extra/lib/move/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar u = __webpack_require__(/*! universalify */ \"./node_modules/universalify/index.js\").fromCallback;\n\nmodule.exports = {\n  move: u(__webpack_require__(/*! ./move */ \"./node_modules/fs-extra/lib/move/move.js\"))\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGtib3gtZ3VpLy4vbm9kZV9tb2R1bGVzL2ZzLWV4dHJhL2xpYi9tb3ZlL2luZGV4LmpzPzA4YzMiXSwibmFtZXMiOlsidSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwibW92ZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsQ0FBQyxHQUFHQyw0RkFBVjs7QUFDQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2ZDLE1BQUksRUFBRUosQ0FBQyxDQUFDQyxtQkFBTyxDQUFDLHdEQUFELENBQVI7QUFEUSxDQUFqQiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9mcy1leHRyYS9saWIvbW92ZS9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCB1ID0gcmVxdWlyZSgndW5pdmVyc2FsaWZ5JykuZnJvbUNhbGxiYWNrXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgbW92ZTogdShyZXF1aXJlKCcuL21vdmUnKSlcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/fs-extra/lib/move/index.js\n");

/***/ }),

/***/ "./node_modules/fs-extra/lib/move/move.js":
/*!************************************************!*\
  !*** ./node_modules/fs-extra/lib/move/move.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar fs = __webpack_require__(/*! graceful-fs */ \"./node_modules/graceful-fs/graceful-fs.js\");\n\nvar path = __webpack_require__(/*! path */ \"path\");\n\nvar copy = __webpack_require__(/*! ../copy */ \"./node_modules/fs-extra/lib/copy/index.js\").copy;\n\nvar remove = __webpack_require__(/*! ../remove */ \"./node_modules/fs-extra/lib/remove/index.js\").remove;\n\nvar mkdirp = __webpack_require__(/*! ../mkdirs */ \"./node_modules/fs-extra/lib/mkdirs/index.js\").mkdirp;\n\nvar pathExists = __webpack_require__(/*! ../path-exists */ \"./node_modules/fs-extra/lib/path-exists/index.js\").pathExists;\n\nvar stat = __webpack_require__(/*! ../util/stat */ \"./node_modules/fs-extra/lib/util/stat.js\");\n\nfunction move(src, dest, opts, cb) {\n  if (typeof opts === 'function') {\n    cb = opts;\n    opts = {};\n  }\n\n  var overwrite = opts.overwrite || opts.clobber || false;\n  stat.checkPaths(src, dest, 'move', function (err, stats) {\n    if (err) return cb(err);\n    var srcStat = stats.srcStat;\n    stat.checkParentPaths(src, srcStat, dest, 'move', function (err) {\n      if (err) return cb(err);\n      mkdirp(path.dirname(dest), function (err) {\n        if (err) return cb(err);\n        return doRename(src, dest, overwrite, cb);\n      });\n    });\n  });\n}\n\nfunction doRename(src, dest, overwrite, cb) {\n  if (overwrite) {\n    return remove(dest, function (err) {\n      if (err) return cb(err);\n      return rename(src, dest, overwrite, cb);\n    });\n  }\n\n  pathExists(dest, function (err, destExists) {\n    if (err) return cb(err);\n    if (destExists) return cb(new Error('dest already exists.'));\n    return rename(src, dest, overwrite, cb);\n  });\n}\n\nfunction rename(src, dest, overwrite, cb) {\n  fs.rename(src, dest, function (err) {\n    if (!err) return cb();\n    if (err.code !== 'EXDEV') return cb(err);\n    return moveAcrossDevice(src, dest, overwrite, cb);\n  });\n}\n\nfunction moveAcrossDevice(src, dest, overwrite, cb) {\n  var opts = {\n    overwrite: overwrite,\n    errorOnExist: true\n  };\n  copy(src, dest, opts, function (err) {\n    if (err) return cb(err);\n    return remove(src, cb);\n  });\n}\n\nmodule.exports = move;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGtib3gtZ3VpLy4vbm9kZV9tb2R1bGVzL2ZzLWV4dHJhL2xpYi9tb3ZlL21vdmUuanM/NTFjZSJdLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJwYXRoIiwiY29weSIsInJlbW92ZSIsIm1rZGlycCIsInBhdGhFeGlzdHMiLCJzdGF0IiwibW92ZSIsInNyYyIsImRlc3QiLCJvcHRzIiwiY2IiLCJvdmVyd3JpdGUiLCJjbG9iYmVyIiwiY2hlY2tQYXRocyIsImVyciIsInN0YXRzIiwic3JjU3RhdCIsImNoZWNrUGFyZW50UGF0aHMiLCJkaXJuYW1lIiwiZG9SZW5hbWUiLCJyZW5hbWUiLCJkZXN0RXhpc3RzIiwiRXJyb3IiLCJjb2RlIiwibW92ZUFjcm9zc0RldmljZSIsImVycm9yT25FeGlzdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLEVBQUUsR0FBR0MsbUJBQU8sQ0FBQyw4REFBRCxDQUFsQjs7QUFDQSxJQUFNQyxJQUFJLEdBQUdELG1CQUFPLENBQUMsa0JBQUQsQ0FBcEI7O0FBQ0EsSUFBTUUsSUFBSSxHQUFHRixvRkFBYjs7QUFDQSxJQUFNRyxNQUFNLEdBQUdILDBGQUFmOztBQUNBLElBQU1JLE1BQU0sR0FBR0osMEZBQWY7O0FBQ0EsSUFBTUssVUFBVSxHQUFHTCx3R0FBbkI7O0FBQ0EsSUFBTU0sSUFBSSxHQUFHTixtQkFBTyxDQUFDLDhEQUFELENBQXBCOztBQUVBLFNBQVNPLElBQVQsQ0FBZUMsR0FBZixFQUFvQkMsSUFBcEIsRUFBMEJDLElBQTFCLEVBQWdDQyxFQUFoQyxFQUFvQztBQUNsQyxNQUFJLE9BQU9ELElBQVAsS0FBZ0IsVUFBcEIsRUFBZ0M7QUFDOUJDLE1BQUUsR0FBR0QsSUFBTDtBQUNBQSxRQUFJLEdBQUcsRUFBUDtBQUNEOztBQUVELE1BQU1FLFNBQVMsR0FBR0YsSUFBSSxDQUFDRSxTQUFMLElBQWtCRixJQUFJLENBQUNHLE9BQXZCLElBQWtDLEtBQXBE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QnJCLElBQWpCIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2ZzLWV4dHJhL2xpYi9tb3ZlL21vdmUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgZnMgPSByZXF1aXJlKCdncmFjZWZ1bC1mcycpXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpXG5jb25zdCBjb3B5ID0gcmVxdWlyZSgnLi4vY29weScpLmNvcHlcbmNvbnN0IHJlbW92ZSA9IHJlcXVpcmUoJy4uL3JlbW92ZScpLnJlbW92ZVxuY29uc3QgbWtkaXJwID0gcmVxdWlyZSgnLi4vbWtkaXJzJykubWtkaXJwXG5jb25zdCBwYXRoRXhpc3RzID0gcmVxdWlyZSgnLi4vcGF0aC1leGlzdHMnKS5wYXRoRXhpc3RzXG5jb25zdCBzdGF0ID0gcmVxdWlyZSgnLi4vdXRpbC9zdGF0JylcblxuZnVuY3Rpb24gbW92ZSAoc3JjLCBkZXN0LCBvcHRzLCBjYikge1xuICBpZiAodHlwZW9mIG9wdHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IG9wdHNcbiAgICBvcHRzID0ge31cbiAgfVxuXG4gIGNvbnN0IG92ZXJ3cml0ZSA9IG9wdHMub3ZlcndyaXRlIHx8IG9wdHMuY2xvYmJlciB8fCBmYWxzZVxuXG4gIHN0YXQuY2hlY2tQYXRocyhzcmMsIGRlc3QsICdtb3ZlJywgKGVyciwgc3RhdHMpID0+IHtcbiAgICBpZiAoZXJyKSByZXR1cm4gY2IoZXJyKVxuICAgIGNvbnN0IHsgc3JjU3RhdCB9ID0gc3RhdHNcbiAgICBzdGF0LmNoZWNrUGFyZW50UGF0aHMoc3JjLCBzcmNTdGF0LCBkZXN0LCAnbW92ZScsIGVyciA9PiB7XG4gICAgICBpZiAoZXJyKSByZXR1cm4gY2IoZXJyKVxuICAgICAgbWtkaXJwKHBhdGguZGlybmFtZShkZXN0KSwgZXJyID0+IHtcbiAgICAgICAgaWYgKGVycikgcmV0dXJuIGNiKGVycilcbiAgICAgICAgcmV0dXJuIGRvUmVuYW1lKHNyYywgZGVzdCwgb3ZlcndyaXRlLCBjYilcbiAgICAgIH0pXG4gICAgfSlcbiAgfSlcbn1cblxuZnVuY3Rpb24gZG9SZW5hbWUgKHNyYywgZGVzdCwgb3ZlcndyaXRlLCBjYikge1xuICBpZiAob3ZlcndyaXRlKSB7XG4gICAgcmV0dXJuIHJlbW92ZShkZXN0LCBlcnIgPT4ge1xuICAgICAgaWYgKGVycikgcmV0dXJuIGNiKGVycilcbiAgICAgIHJldHVybiByZW5hbWUoc3JjLCBkZXN0LCBvdmVyd3JpdGUsIGNiKVxuICAgIH0pXG4gIH1cbiAgcGF0aEV4aXN0cyhkZXN0LCAoZXJyLCBkZXN0RXhpc3RzKSA9PiB7XG4gICAgaWYgKGVycikgcmV0dXJuIGNiKGVycilcbiAgICBpZiAoZGVzdEV4aXN0cykgcmV0dXJuIGNiKG5ldyBFcnJvcignZGVzdCBhbHJlYWR5IGV4aXN0cy4nKSlcbiAgICByZXR1cm4gcmVuYW1lKHNyYywgZGVzdCwgb3ZlcndyaXRlLCBjYilcbiAgfSlcbn1cblxuZnVuY3Rpb24gcmVuYW1lIChzcmMsIGRlc3QsIG92ZXJ3cml0ZSwgY2IpIHtcbiAgZnMucmVuYW1lKHNyYywgZGVzdCwgZXJyID0+IHtcbiAgICBpZiAoIWVycikgcmV0dXJuIGNiKClcbiAgICBpZiAoZXJyLmNvZGUgIT09ICdFWERFVicpIHJldHVybiBjYihlcnIpXG4gICAgcmV0dXJuIG1vdmVBY3Jvc3NEZXZpY2Uoc3JjLCBkZXN0LCBvdmVyd3JpdGUsIGNiKVxuICB9KVxufVxuXG5mdW5jdGlvbiBtb3ZlQWNyb3NzRGV2aWNlIChzcmMsIGRlc3QsIG92ZXJ3cml0ZSwgY2IpIHtcbiAgY29uc3Qgb3B0cyA9IHtcbiAgICBvdmVyd3JpdGUsXG4gICAgZXJyb3JPbkV4aXN0OiB0cnVlXG4gIH1cbiAgY29weShzcmMsIGRlc3QsIG9wdHMsIGVyciA9PiB7XG4gICAgaWYgKGVycikgcmV0dXJuIGNiKGVycilcbiAgICByZXR1cm4gcmVtb3ZlKHNyYywgY2IpXG4gIH0pXG59XG5cbm1vZHVsZS5leHBvcnRzID0gbW92ZVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/fs-extra/lib/move/move.js\n");

/***/ }),

/***/ "./node_modules/fs-extra/lib/output/index.js":
/*!***************************************************!*\
  !*** ./node_modules/fs-extra/lib/output/index.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar u = __webpack_require__(/*! universalify */ \"./node_modules/universalify/index.js\").fromCallback;\n\nvar fs = __webpack_require__(/*! graceful-fs */ \"./node_modules/graceful-fs/graceful-fs.js\");\n\nvar path = __webpack_require__(/*! path */ \"path\");\n\nvar mkdir = __webpack_require__(/*! ../mkdirs */ \"./node_modules/fs-extra/lib/mkdirs/index.js\");\n\nvar pathExists = __webpack_require__(/*! ../path-exists */ \"./node_modules/fs-extra/lib/path-exists/index.js\").pathExists;\n\nfunction outputFile(file, data, encoding, callback) {\n  if (typeof encoding === 'function') {\n    callback = encoding;\n    encoding = 'utf8';\n  }\n\n  var dir = path.dirname(file);\n  pathExists(dir, function (err, itDoes) {\n    if (err) return callback(err);\n    if (itDoes) return fs.writeFile(file, data, encoding, callback);\n    mkdir.mkdirs(dir, function (err) {\n      if (err) return callback(err);\n      fs.writeFile(file, data, encoding, callback);\n    });\n  });\n}\n\nfunction outputFileSync(file) {\n  var dir = path.dirname(file);\n\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  if (fs.existsSync(dir)) {\n    return fs.writeFileSync.apply(fs, [file].concat(args));\n  }\n\n  mkdir.mkdirsSync(dir);\n  fs.writeFileSync.apply(fs, [file].concat(args));\n}\n\nmodule.exports = {\n  outputFile: u(outputFile),\n  outputFileSync: outputFileSync\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGtib3gtZ3VpLy4vbm9kZV9tb2R1bGVzL2ZzLWV4dHJhL2xpYi9vdXRwdXQvaW5kZXguanM/N2Y3OSJdLCJuYW1lcyI6WyJ1IiwicmVxdWlyZSIsImZzIiwicGF0aCIsIm1rZGlyIiwicGF0aEV4aXN0cyIsIm91dHB1dEZpbGUiLCJmaWxlIiwiZGF0YSIsImVuY29kaW5nIiwiY2FsbGJhY2siLCJkaXIiLCJkaXJuYW1lIiwiZXJyIiwiaXREb2VzIiwid3JpdGVGaWxlIiwibWtkaXJzIiwib3V0cHV0RmlsZVN5bmMiLCJhcmdzIiwiZXhpc3RzU3luYyIsIndyaXRlRmlsZVN5bmMiLCJta2RpcnNTeW5jIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsQ0FBQyxHQUFHQyw0RkFBVjs7QUFDQSxJQUFNQyxFQUFFLEdBQUdELG1CQUFPLENBQUMsOERBQUQsQ0FBbEI7O0FBQ0EsSUFBTUUsSUFBSSxHQUFHRixtQkFBTyxDQUFDLGtCQUFELENBQXBCOztBQUNBLElBQU1HLEtBQUssR0FBR0gsbUJBQU8sQ0FBQyw4REFBRCxDQUFyQjs7QUFDQSxJQUFNSSxVQUFVLEdBQUdKLHdHQUFuQjs7QUFFQSxTQUFTSyxVQUFULENBQXFCQyxJQUFyQixFQUEyQkMsSUFBM0IsRUFBaUNDLFFBQWpDLEVBQTJDQyxRQUEzQyxFQUFxRDtBQUNuRCxNQUFJLE9BQU9ELFFBQVAsS0FBb0IsVUFBeEIsRUFBb0M7QUFDbENDLFlBQVEsR0FBR0QsUUFBWDtBQUNBQSxZQUFRLEdBQUcsTUFBWDtBQUNEOztBQUVELE1BQU1FLEdBQUcsR0FBR1IsSUFBSSxDQUFDUyxPQUFMLENBQWFMLElBQWIsQ0FBWjtBQUNBRixZQUFVLENBQUNNLEdBQUQsRUFBTSxVQUFDRSxHQUFELEVBQU1DLE1BQU4sRUFBaUI7QUFDL0IsUUFBSUQsR0FBSixFQUFTLE9BQU9ILFFBQVEsQ0FBQ0csR0FBRCxDQUFmO0FBQ1QsUUFBSUMsTUFBSixFQUFZLE9BQU9aLEVBQUUsQ0FBQ2EsU0FBSCxDQUFhUixJQUFiLEVBQW1CQyxJQUFuQixFQUF5QkMsUUFBekIsRUFBbUNDLFFBQW5DLENBQVA7QUFFWk4sU0FBSyxDQUFDWSxNQUFOLENBQWFMLEdBQWIsRUFBa0IsVUFBQUUsR0FBRyxFQUFJO0FBQ3ZCLFVBQUlBLEdBQUosRUFBUyxPQUFPSCxRQUFRLENBQUNHLEdBQUQsQ0FBZjtBQUVUWCxRQUFFLENBQUNhLFNBQUgsQ0FBYVIsSUFBYixFQUFtQkMsSUFBbkIsRUFBeUJDLFFBQXpCLEVBQW1DQyxRQUFuQztBQUNELEtBSkQ7QUFLRCxHQVRTLENBQVY7QUFVRDs7QUFFRCxTQUFTTyxjQUFULENBQXlCVixJQUF6QixFQUF3QztBQUN0QyxNQUFNSSxHQUFHLEdBQUdSLElBQUksQ0FBQ1MsT0FBTCxDQUFhTCxJQUFiLENBQVo7O0FBRHNDLG9DQUFOVyxJQUFNO0FBQU5BLFFBQU07QUFBQTs7QUFFdEMsTUFBSWhCLEVBQUUsQ0FBQ2lCLFVBQUgsQ0FBY1IsR0FBZCxDQUFKLEVBQXdCO0FBQ3RCLFdBQU9ULEVBQUUsQ0FBQ2tCLGFBQUgsT0FBQWxCLEVBQUUsR0FBZUssSUFBZixTQUF3QlcsSUFBeEIsRUFBVDtBQUNEOztBQUNEZCxPQUFLLENBQUNpQixVQUFOLENBQWlCVixHQUFqQjtBQUNBVCxJQUFFLENBQUNrQixhQUFILE9BQUFsQixFQUFFLEdBQWVLLElBQWYsU0FBd0JXLElBQXhCLEVBQUY7QUFDRDs7QUFFREksTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2ZqQixZQUFVLEVBQUVOLENBQUMsQ0FBQ00sVUFBRCxDQURFO0FBRWZXLGdCQUFjLEVBQWRBO0FBRmUsQ0FBakIiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZnMtZXh0cmEvbGliL291dHB1dC9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCB1ID0gcmVxdWlyZSgndW5pdmVyc2FsaWZ5JykuZnJvbUNhbGxiYWNrXG5jb25zdCBmcyA9IHJlcXVpcmUoJ2dyYWNlZnVsLWZzJylcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJylcbmNvbnN0IG1rZGlyID0gcmVxdWlyZSgnLi4vbWtkaXJzJylcbmNvbnN0IHBhdGhFeGlzdHMgPSByZXF1aXJlKCcuLi9wYXRoLWV4aXN0cycpLnBhdGhFeGlzdHNcblxuZnVuY3Rpb24gb3V0cHV0RmlsZSAoZmlsZSwgZGF0YSwgZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IGVuY29kaW5nXG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgfVxuXG4gIGNvbnN0IGRpciA9IHBhdGguZGlybmFtZShmaWxlKVxuICBwYXRoRXhpc3RzKGRpciwgKGVyciwgaXREb2VzKSA9PiB7XG4gICAgaWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGVycilcbiAgICBpZiAoaXREb2VzKSByZXR1cm4gZnMud3JpdGVGaWxlKGZpbGUsIGRhdGEsIGVuY29kaW5nLCBjYWxsYmFjaylcblxuICAgIG1rZGlyLm1rZGlycyhkaXIsIGVyciA9PiB7XG4gICAgICBpZiAoZXJyKSByZXR1cm4gY2FsbGJhY2soZXJyKVxuXG4gICAgICBmcy53cml0ZUZpbGUoZmlsZSwgZGF0YSwgZW5jb2RpbmcsIGNhbGxiYWNrKVxuICAgIH0pXG4gIH0pXG59XG5cbmZ1bmN0aW9uIG91dHB1dEZpbGVTeW5jIChmaWxlLCAuLi5hcmdzKSB7XG4gIGNvbnN0IGRpciA9IHBhdGguZGlybmFtZShmaWxlKVxuICBpZiAoZnMuZXhpc3RzU3luYyhkaXIpKSB7XG4gICAgcmV0dXJuIGZzLndyaXRlRmlsZVN5bmMoZmlsZSwgLi4uYXJncylcbiAgfVxuICBta2Rpci5ta2RpcnNTeW5jKGRpcilcbiAgZnMud3JpdGVGaWxlU3luYyhmaWxlLCAuLi5hcmdzKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgb3V0cHV0RmlsZTogdShvdXRwdXRGaWxlKSxcbiAgb3V0cHV0RmlsZVN5bmNcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/fs-extra/lib/output/index.js\n");

/***/ }),

/***/ "./node_modules/fs-extra/lib/path-exists/index.js":
/*!********************************************************!*\
  !*** ./node_modules/fs-extra/lib/path-exists/index.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar u = __webpack_require__(/*! universalify */ \"./node_modules/universalify/index.js\").fromPromise;\n\nvar fs = __webpack_require__(/*! ../fs */ \"./node_modules/fs-extra/lib/fs/index.js\");\n\nfunction pathExists(path) {\n  return fs.access(path).then(function () {\n    return true;\n  })[\"catch\"](function () {\n    return false;\n  });\n}\n\nmodule.exports = {\n  pathExists: u(pathExists),\n  pathExistsSync: fs.existsSync\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGtib3gtZ3VpLy4vbm9kZV9tb2R1bGVzL2ZzLWV4dHJhL2xpYi9wYXRoLWV4aXN0cy9pbmRleC5qcz9jNTAwIl0sIm5hbWVzIjpbInUiLCJyZXF1aXJlIiwiZnMiLCJwYXRoRXhpc3RzIiwicGF0aCIsImFjY2VzcyIsInRoZW4iLCJtb2R1bGUiLCJleHBvcnRzIiwicGF0aEV4aXN0c1N5bmMiLCJleGlzdHNTeW5jIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxJQUFNQSxDQUFDLEdBQUdDLDJGQUFWOztBQUNBLElBQU1DLEVBQUUsR0FBR0QsbUJBQU8sQ0FBQyxzREFBRCxDQUFsQjs7QUFFQSxTQUFTRSxVQUFULENBQXFCQyxJQUFyQixFQUEyQjtBQUN6QixTQUFPRixFQUFFLENBQUNHLE1BQUgsQ0FBVUQsSUFBVixFQUFnQkUsSUFBaEIsQ0FBcUI7QUFBQSxXQUFNLElBQU47QUFBQSxHQUFyQixXQUF1QztBQUFBLFdBQU0sS0FBTjtBQUFBLEdBQXZDLENBQVA7QUFDRDs7QUFFREMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2ZMLFlBQVUsRUFBRUgsQ0FBQyxDQUFDRyxVQUFELENBREU7QUFFZk0sZ0JBQWMsRUFBRVAsRUFBRSxDQUFDUTtBQUZKLENBQWpCIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2ZzLWV4dHJhL2xpYi9wYXRoLWV4aXN0cy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuY29uc3QgdSA9IHJlcXVpcmUoJ3VuaXZlcnNhbGlmeScpLmZyb21Qcm9taXNlXG5jb25zdCBmcyA9IHJlcXVpcmUoJy4uL2ZzJylcblxuZnVuY3Rpb24gcGF0aEV4aXN0cyAocGF0aCkge1xuICByZXR1cm4gZnMuYWNjZXNzKHBhdGgpLnRoZW4oKCkgPT4gdHJ1ZSkuY2F0Y2goKCkgPT4gZmFsc2UpXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBwYXRoRXhpc3RzOiB1KHBhdGhFeGlzdHMpLFxuICBwYXRoRXhpc3RzU3luYzogZnMuZXhpc3RzU3luY1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/fs-extra/lib/path-exists/index.js\n");

/***/ }),

/***/ "./node_modules/fs-extra/lib/remove/index.js":
/*!***************************************************!*\
  !*** ./node_modules/fs-extra/lib/remove/index.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar u = __webpack_require__(/*! universalify */ \"./node_modules/universalify/index.js\").fromCallback;\n\nvar rimraf = __webpack_require__(/*! ./rimraf */ \"./node_modules/fs-extra/lib/remove/rimraf.js\");\n\nmodule.exports = {\n  remove: u(rimraf),\n  removeSync: rimraf.sync\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGtib3gtZ3VpLy4vbm9kZV9tb2R1bGVzL2ZzLWV4dHJhL2xpYi9yZW1vdmUvaW5kZXguanM/YjQxZCJdLCJuYW1lcyI6WyJ1IiwicmVxdWlyZSIsInJpbXJhZiIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZW1vdmUiLCJyZW1vdmVTeW5jIiwic3luYyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsQ0FBQyxHQUFHQyw0RkFBVjs7QUFDQSxJQUFNQyxNQUFNLEdBQUdELG1CQUFPLENBQUMsOERBQUQsQ0FBdEI7O0FBRUFFLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNmQyxRQUFNLEVBQUVMLENBQUMsQ0FBQ0UsTUFBRCxDQURNO0FBRWZJLFlBQVUsRUFBRUosTUFBTSxDQUFDSztBQUZKLENBQWpCIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2ZzLWV4dHJhL2xpYi9yZW1vdmUvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgdSA9IHJlcXVpcmUoJ3VuaXZlcnNhbGlmeScpLmZyb21DYWxsYmFja1xuY29uc3QgcmltcmFmID0gcmVxdWlyZSgnLi9yaW1yYWYnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcmVtb3ZlOiB1KHJpbXJhZiksXG4gIHJlbW92ZVN5bmM6IHJpbXJhZi5zeW5jXG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/fs-extra/lib/remove/index.js\n");

/***/ }),

/***/ "./node_modules/fs-extra/lib/remove/rimraf.js":
/*!****************************************************!*\
  !*** ./node_modules/fs-extra/lib/remove/rimraf.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar fs = __webpack_require__(/*! graceful-fs */ \"./node_modules/graceful-fs/graceful-fs.js\");\n\nvar path = __webpack_require__(/*! path */ \"path\");\n\nvar assert = __webpack_require__(/*! assert */ \"assert\");\n\nvar isWindows = process.platform === 'win32';\n\nfunction defaults(options) {\n  var methods = ['unlink', 'chmod', 'stat', 'lstat', 'rmdir', 'readdir'];\n  methods.forEach(function (m) {\n    options[m] = options[m] || fs[m];\n    m = m + 'Sync';\n    options[m] = options[m] || fs[m];\n  });\n  options.maxBusyTries = options.maxBusyTries || 3;\n}\n\nfunction rimraf(p, options, cb) {\n  var busyTries = 0;\n\n  if (typeof options === 'function') {\n    cb = options;\n    options = {};\n  }\n\n  assert(p, 'rimraf: missing path');\n  assert.strictEqual(_typeof(p), 'string', 'rimraf: path should be a string');\n  assert.strictEqual(_typeof(cb), 'function', 'rimraf: callback function required');\n  assert(options, 'rimraf: invalid options argument provided');\n  assert.strictEqual(_typeof(options), 'object', 'rimraf: options should be object');\n  defaults(options);\n  rimraf_(p, options, function CB(er) {\n    if (er) {\n      if ((er.code === 'EBUSY' || er.code === 'ENOTEMPTY' || er.code === 'EPERM') && busyTries < options.maxBusyTries) {\n        busyTries++;\n        var time = busyTries * 100; // try again, with the same exact callback as this one.\n\n        return setTimeout(function () {\n          return rimraf_(p, options, CB);\n        }, time);\n      } // already gone\n\n\n      if (er.code === 'ENOENT') er = null;\n    }\n\n    cb(er);\n  });\n} // Two possible strategies.\n// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR\n// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR\n//\n// Both result in an extra syscall when you guess wrong.  However, there\n// are likely far more normal files in the world than directories.  This\n// is based on the assumption that a the average number of files per\n// directory is >= 1.\n//\n// If anyone ever complains about this, then I guess the strategy could\n// be made configurable somehow.  But until then, YAGNI.\n\n\nfunction rimraf_(p, options, cb) {\n  assert(p);\n  assert(options);\n  assert(typeof cb === 'function'); // sunos lets the root user unlink directories, which is... weird.\n  // so we have to lstat here and make sure it's not a dir.\n\n  options.lstat(p, function (er, st) {\n    if (er && er.code === 'ENOENT') {\n      return cb(null);\n    } // Windows can EPERM on stat.  Life is suffering.\n\n\n    if (er && er.code === 'EPERM' && isWindows) {\n      return fixWinEPERM(p, options, er, cb);\n    }\n\n    if (st && st.isDirectory()) {\n      return rmdir(p, options, er, cb);\n    }\n\n    options.unlink(p, function (er) {\n      if (er) {\n        if (er.code === 'ENOENT') {\n          return cb(null);\n        }\n\n        if (er.code === 'EPERM') {\n          return isWindows ? fixWinEPERM(p, options, er, cb) : rmdir(p, options, er, cb);\n        }\n\n        if (er.code === 'EISDIR') {\n          return rmdir(p, options, er, cb);\n        }\n      }\n\n      return cb(er);\n    });\n  });\n}\n\nfunction fixWinEPERM(p, options, er, cb) {\n  assert(p);\n  assert(options);\n  assert(typeof cb === 'function');\n  options.chmod(p, 438, function (er2) {\n    if (er2) {\n      cb(er2.code === 'ENOENT' ? null : er);\n    } else {\n      options.stat(p, function (er3, stats) {\n        if (er3) {\n          cb(er3.code === 'ENOENT' ? null : er);\n        } else if (stats.isDirectory()) {\n          rmdir(p, options, er, cb);\n        } else {\n          options.unlink(p, cb);\n        }\n      });\n    }\n  });\n}\n\nfunction fixWinEPERMSync(p, options, er) {\n  var stats;\n  assert(p);\n  assert(options);\n\n  try {\n    options.chmodSync(p, 438);\n  } catch (er2) {\n    if (er2.code === 'ENOENT') {\n      return;\n    } else {\n      throw er;\n    }\n  }\n\n  try {\n    stats = options.statSync(p);\n  } catch (er3) {\n    if (er3.code === 'ENOENT') {\n      return;\n    } else {\n      throw er;\n    }\n  }\n\n  if (stats.isDirectory()) {\n    rmdirSync(p, options, er);\n  } else {\n    options.unlinkSync(p);\n  }\n}\n\nfunction rmdir(p, options, originalEr, cb) {\n  assert(p);\n  assert(options);\n  assert(typeof cb === 'function'); // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)\n  // if we guessed wrong, and it's not a directory, then\n  // raise the original error.\n\n  options.rmdir(p, function (er) {\n    if (er && (er.code === 'ENOTEMPTY' || er.code === 'EEXIST' || er.code === 'EPERM')) {\n      rmkids(p, options, cb);\n    } else if (er && er.code === 'ENOTDIR') {\n      cb(originalEr);\n    } else {\n      cb(er);\n    }\n  });\n}\n\nfunction rmkids(p, options, cb) {\n  assert(p);\n  assert(options);\n  assert(typeof cb === 'function');\n  options.readdir(p, function (er, files) {\n    if (er) return cb(er);\n    var n = files.length;\n    var errState;\n    if (n === 0) return options.rmdir(p, cb);\n    files.forEach(function (f) {\n      rimraf(path.join(p, f), options, function (er) {\n        if (errState) {\n          return;\n        }\n\n        if (er) return cb(errState = er);\n\n        if (--n === 0) {\n          options.rmdir(p, cb);\n        }\n      });\n    });\n  });\n} // this looks simpler, and is strictly *faster*, but will\n// tie up the JavaScript thread and fail on excessively\n// deep directory trees.\n\n\nfunction rimrafSync(p, options) {\n  var st;\n  options = options || {};\n  defaults(options);\n  assert(p, 'rimraf: missing path');\n  assert.strictEqual(_typeof(p), 'string', 'rimraf: path should be a string');\n  assert(options, 'rimraf: missing options');\n  assert.strictEqual(_typeof(options), 'object', 'rimraf: options should be object');\n\n  try {\n    st = options.lstatSync(p);\n  } catch (er) {\n    if (er.code === 'ENOENT') {\n      return;\n    } // Windows can EPERM on stat.  Life is suffering.\n\n\n    if (er.code === 'EPERM' && isWindows) {\n      fixWinEPERMSync(p, options, er);\n    }\n  }\n\n  try {\n    // sunos lets the root user unlink directories, which is... weird.\n    if (st && st.isDirectory()) {\n      rmdirSync(p, options, null);\n    } else {\n      options.unlinkSync(p);\n    }\n  } catch (er) {\n    if (er.code === 'ENOENT') {\n      return;\n    } else if (er.code === 'EPERM') {\n      return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er);\n    } else if (er.code !== 'EISDIR') {\n      throw er;\n    }\n\n    rmdirSync(p, options, er);\n  }\n}\n\nfunction rmdirSync(p, options, originalEr) {\n  assert(p);\n  assert(options);\n\n  try {\n    options.rmdirSync(p);\n  } catch (er) {\n    if (er.code === 'ENOTDIR') {\n      throw originalEr;\n    } else if (er.code === 'ENOTEMPTY' || er.code === 'EEXIST' || er.code === 'EPERM') {\n      rmkidsSync(p, options);\n    } else if (er.code !== 'ENOENT') {\n      throw er;\n    }\n  }\n}\n\nfunction rmkidsSync(p, options) {\n  assert(p);\n  assert(options);\n  options.readdirSync(p).forEach(function (f) {\n    return rimrafSync(path.join(p, f), options);\n  });\n\n  if (isWindows) {\n    // We only end up here once we got ENOTEMPTY at least once, and\n    // at this point, we are guaranteed to have removed all the kids.\n    // So, we know that it won't be ENOENT or ENOTDIR or anything else.\n    // try really hard to delete stuff on windows, because it has a\n    // PROFOUNDLY annoying habit of not closing handles promptly when\n    // files are deleted, resulting in spurious ENOTEMPTY errors.\n    var startTime = Date.now();\n\n    do {\n      try {\n        var ret = options.rmdirSync(p, options);\n        return ret;\n      } catch (_unused) {}\n    } while (Date.now() - startTime < 500); // give up after 500ms\n\n  } else {\n    var _ret = options.rmdirSync(p, options);\n\n    return _ret;\n  }\n}\n\nmodule.exports = rimraf;\nrimraf.sync = rimrafSync;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/fs-extra/lib/remove/rimraf.js\n");

/***/ }),

/***/ "./node_modules/fs-extra/lib/util/stat.js":
/*!************************************************!*\
  !*** ./node_modules/fs-extra/lib/util/stat.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar fs = __webpack_require__(/*! ../fs */ \"./node_modules/fs-extra/lib/fs/index.js\");\n\nvar path = __webpack_require__(/*! path */ \"path\");\n\nvar util = __webpack_require__(/*! util */ \"util\");\n\nvar atLeastNode = __webpack_require__(/*! at-least-node */ \"./node_modules/at-least-node/index.js\");\n\nvar nodeSupportsBigInt = atLeastNode('10.5.0');\n\nvar stat = function stat(file) {\n  return nodeSupportsBigInt ? fs.stat(file, {\n    bigint: true\n  }) : fs.stat(file);\n};\n\nvar statSync = function statSync(file) {\n  return nodeSupportsBigInt ? fs.statSync(file, {\n    bigint: true\n  }) : fs.statSync(file);\n};\n\nfunction getStats(src, dest) {\n  return Promise.all([stat(src), stat(dest)[\"catch\"](function (err) {\n    if (err.code === 'ENOENT') return null;\n    throw err;\n  })]).then(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        srcStat = _ref2[0],\n        destStat = _ref2[1];\n\n    return {\n      srcStat: srcStat,\n      destStat: destStat\n    };\n  });\n}\n\nfunction getStatsSync(src, dest) {\n  var destStat;\n  var srcStat = statSync(src);\n\n  try {\n    destStat = statSync(dest);\n  } catch (err) {\n    if (err.code === 'ENOENT') return {\n      srcStat: srcStat,\n      destStat: null\n    };\n    throw err;\n  }\n\n  return {\n    srcStat: srcStat,\n    destStat: destStat\n  };\n}\n\nfunction checkPaths(src, dest, funcName, cb) {\n  util.callbackify(getStats)(src, dest, function (err, stats) {\n    if (err) return cb(err);\n    var srcStat = stats.srcStat,\n        destStat = stats.destStat;\n\n    if (destStat && areIdentical(srcStat, destStat)) {\n      return cb(new Error('Source and destination must not be the same.'));\n    }\n\n    if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {\n      return cb(new Error(errMsg(src, dest, funcName)));\n    }\n\n    return cb(null, {\n      srcStat: srcStat,\n      destStat: destStat\n    });\n  });\n}\n\nfunction checkPathsSync(src, dest, funcName) {\n  var _getStatsSync = getStatsSync(src, dest),\n      srcStat = _getStatsSync.srcStat,\n      destStat = _getStatsSync.destStat;\n\n  if (destStat && areIdentical(srcStat, destStat)) {\n    throw new Error('Source and destination must not be the same.');\n  }\n\n  if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {\n    throw new Error(errMsg(src, dest, funcName));\n  }\n\n  return {\n    srcStat: srcStat,\n    destStat: destStat\n  };\n} // recursively check if dest parent is a subdirectory of src.\n// It works for all file types including symlinks since it\n// checks the src and dest inodes. It starts from the deepest\n// parent and stops once it reaches the src parent or the root path.\n\n\nfunction checkParentPaths(src, srcStat, dest, funcName, cb) {\n  var srcParent = path.resolve(path.dirname(src));\n  var destParent = path.resolve(path.dirname(dest));\n  if (destParent === srcParent || destParent === path.parse(destParent).root) return cb();\n\n  var callback = function callback(err, destStat) {\n    if (err) {\n      if (err.code === 'ENOENT') return cb();\n      return cb(err);\n    }\n\n    if (areIdentical(srcStat, destStat)) {\n      return cb(new Error(errMsg(src, dest, funcName)));\n    }\n\n    return checkParentPaths(src, srcStat, destParent, funcName, cb);\n  };\n\n  if (nodeSupportsBigInt) fs.stat(destParent, {\n    bigint: true\n  }, callback);else fs.stat(destParent, callback);\n}\n\nfunction checkParentPathsSync(src, srcStat, dest, funcName) {\n  var srcParent = path.resolve(path.dirname(src));\n  var destParent = path.resolve(path.dirname(dest));\n  if (destParent === srcParent || destParent === path.parse(destParent).root) return;\n  var destStat;\n\n  try {\n    destStat = statSync(destParent);\n  } catch (err) {\n    if (err.code === 'ENOENT') return;\n    throw err;\n  }\n\n  if (areIdentical(srcStat, destStat)) {\n    throw new Error(errMsg(src, dest, funcName));\n  }\n\n  return checkParentPathsSync(src, srcStat, destParent, funcName);\n}\n\nfunction areIdentical(srcStat, destStat) {\n  if (destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev) {\n    if (nodeSupportsBigInt || destStat.ino < Number.MAX_SAFE_INTEGER) {\n      // definitive answer\n      return true;\n    } // Use additional heuristics if we can't use 'bigint'.\n    // Different 'ino' could be represented the same if they are >= Number.MAX_SAFE_INTEGER\n    // See issue 657\n\n\n    if (destStat.size === srcStat.size && destStat.mode === srcStat.mode && destStat.nlink === srcStat.nlink && destStat.atimeMs === srcStat.atimeMs && destStat.mtimeMs === srcStat.mtimeMs && destStat.ctimeMs === srcStat.ctimeMs && destStat.birthtimeMs === srcStat.birthtimeMs) {\n      // heuristic answer\n      return true;\n    }\n  }\n\n  return false;\n} // return true if dest is a subdir of src, otherwise false.\n// It only checks the path strings.\n\n\nfunction isSrcSubdir(src, dest) {\n  var srcArr = path.resolve(src).split(path.sep).filter(function (i) {\n    return i;\n  });\n  var destArr = path.resolve(dest).split(path.sep).filter(function (i) {\n    return i;\n  });\n  return srcArr.reduce(function (acc, cur, i) {\n    return acc && destArr[i] === cur;\n  }, true);\n}\n\nfunction errMsg(src, dest, funcName) {\n  return \"Cannot \".concat(funcName, \" '\").concat(src, \"' to a subdirectory of itself, '\").concat(dest, \"'.\");\n}\n\nmodule.exports = {\n  checkPaths: checkPaths,\n  checkPathsSync: checkPathsSync,\n  checkParentPaths: checkParentPaths,\n  checkParentPathsSync: checkParentPathsSync,\n  isSrcSubdir: isSrcSubdir\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/fs-extra/lib/util/stat.js\n");

/***/ }),

/***/ "./node_modules/fs-extra/lib/util/utimes.js":
/*!**************************************************!*\
  !*** ./node_modules/fs-extra/lib/util/utimes.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar fs = __webpack_require__(/*! graceful-fs */ \"./node_modules/graceful-fs/graceful-fs.js\");\n\nfunction utimesMillis(path, atime, mtime, callback) {\n  // if (!HAS_MILLIS_RES) return fs.utimes(path, atime, mtime, callback)\n  fs.open(path, 'r+', function (err, fd) {\n    if (err) return callback(err);\n    fs.futimes(fd, atime, mtime, function (futimesErr) {\n      fs.close(fd, function (closeErr) {\n        if (callback) callback(futimesErr || closeErr);\n      });\n    });\n  });\n}\n\nfunction utimesMillisSync(path, atime, mtime) {\n  var fd = fs.openSync(path, 'r+');\n  fs.futimesSync(fd, atime, mtime);\n  return fs.closeSync(fd);\n}\n\nmodule.exports = {\n  utimesMillis: utimesMillis,\n  utimesMillisSync: utimesMillisSync\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGtib3gtZ3VpLy4vbm9kZV9tb2R1bGVzL2ZzLWV4dHJhL2xpYi91dGlsL3V0aW1lcy5qcz85YjFlIl0sIm5hbWVzIjpbImZzIiwicmVxdWlyZSIsInV0aW1lc01pbGxpcyIsInBhdGgiLCJhdGltZSIsIm10aW1lIiwiY2FsbGJhY2siLCJvcGVuIiwiZXJyIiwiZmQiLCJmdXRpbWVzIiwiZnV0aW1lc0VyciIsImNsb3NlIiwiY2xvc2VFcnIiLCJ1dGltZXNNaWxsaXNTeW5jIiwib3BlblN5bmMiLCJmdXRpbWVzU3luYyIsImNsb3NlU3luYyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLEVBQUUsR0FBR0MsbUJBQU8sQ0FBQyw4REFBRCxDQUFsQjs7QUFFQSxTQUFTQyxZQUFULENBQXVCQyxJQUF2QixFQUE2QkMsS0FBN0IsRUFBb0NDLEtBQXBDLEVBQTJDQyxRQUEzQyxFQUFxRDtBQUNuRDtBQUNBTixJQUFFLENBQUNPLElBQUgsQ0FBUUosSUFBUixFQUFjLElBQWQsRUFBb0IsVUFBQ0ssR0FBRCxFQUFNQyxFQUFOLEVBQWE7QUFDL0IsUUFBSUQsR0FBSixFQUFTLE9BQU9GLFFBQVEsQ0FBQ0UsR0FBRCxDQUFmO0FBQ1RSLE1BQUUsQ0FBQ1UsT0FBSCxDQUFXRCxFQUFYLEVBQWVMLEtBQWYsRUFBc0JDLEtBQXRCLEVBQTZCLFVBQUFNLFVBQVUsRUFBSTtBQUN6Q1gsUUFBRSxDQUFDWSxLQUFILENBQVNILEVBQVQsRUFBYSxVQUFBSSxRQUFRLEVBQUk7QUFDdkIsWUFBSVAsUUFBSixFQUFjQSxRQUFRLENBQUNLLFVBQVUsSUFBSUUsUUFBZixDQUFSO0FBQ2YsT0FGRDtBQUdELEtBSkQ7QUFLRCxHQVBEO0FBUUQ7O0FBRUQsU0FBU0MsZ0JBQVQsQ0FBMkJYLElBQTNCLEVBQWlDQyxLQUFqQyxFQUF3Q0MsS0FBeEMsRUFBK0M7QUFDN0MsTUFBTUksRUFBRSxHQUFHVCxFQUFFLENBQUNlLFFBQUgsQ0FBWVosSUFBWixFQUFrQixJQUFsQixDQUFYO0FBQ0FILElBQUUsQ0FBQ2dCLFdBQUgsQ0FBZVAsRUFBZixFQUFtQkwsS0FBbkIsRUFBMEJDLEtBQTFCO0FBQ0EsU0FBT0wsRUFBRSxDQUFDaUIsU0FBSCxDQUFhUixFQUFiLENBQVA7QUFDRDs7QUFFRFMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2ZqQixjQUFZLEVBQVpBLFlBRGU7QUFFZlksa0JBQWdCLEVBQWhCQTtBQUZlLENBQWpCIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2ZzLWV4dHJhL2xpYi91dGlsL3V0aW1lcy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCBmcyA9IHJlcXVpcmUoJ2dyYWNlZnVsLWZzJylcblxuZnVuY3Rpb24gdXRpbWVzTWlsbGlzIChwYXRoLCBhdGltZSwgbXRpbWUsIGNhbGxiYWNrKSB7XG4gIC8vIGlmICghSEFTX01JTExJU19SRVMpIHJldHVybiBmcy51dGltZXMocGF0aCwgYXRpbWUsIG10aW1lLCBjYWxsYmFjaylcbiAgZnMub3BlbihwYXRoLCAncisnLCAoZXJyLCBmZCkgPT4ge1xuICAgIGlmIChlcnIpIHJldHVybiBjYWxsYmFjayhlcnIpXG4gICAgZnMuZnV0aW1lcyhmZCwgYXRpbWUsIG10aW1lLCBmdXRpbWVzRXJyID0+IHtcbiAgICAgIGZzLmNsb3NlKGZkLCBjbG9zZUVyciA9PiB7XG4gICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soZnV0aW1lc0VyciB8fCBjbG9zZUVycilcbiAgICAgIH0pXG4gICAgfSlcbiAgfSlcbn1cblxuZnVuY3Rpb24gdXRpbWVzTWlsbGlzU3luYyAocGF0aCwgYXRpbWUsIG10aW1lKSB7XG4gIGNvbnN0IGZkID0gZnMub3BlblN5bmMocGF0aCwgJ3IrJylcbiAgZnMuZnV0aW1lc1N5bmMoZmQsIGF0aW1lLCBtdGltZSlcbiAgcmV0dXJuIGZzLmNsb3NlU3luYyhmZClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHV0aW1lc01pbGxpcyxcbiAgdXRpbWVzTWlsbGlzU3luY1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/fs-extra/lib/util/utimes.js\n");

/***/ }),

/***/ "./node_modules/universalify/index.js":
/*!********************************************!*\
  !*** ./node_modules/universalify/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports.fromCallback = function (fn) {\n  return Object.defineProperty(function () {\n    var _this = this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (typeof args[args.length - 1] === 'function') fn.apply(this, args);else {\n      return new Promise(function (resolve, reject) {\n        fn.call.apply(fn, [_this].concat(args, [function (err, res) {\n          return err != null ? reject(err) : resolve(res);\n        }]));\n      });\n    }\n  }, 'name', {\n    value: fn.name\n  });\n};\n\nexports.fromPromise = function (fn) {\n  return Object.defineProperty(function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    var cb = args[args.length - 1];\n    if (typeof cb !== 'function') return fn.apply(this, args);else fn.apply(this, args.slice(0, -1)).then(function (r) {\n      return cb(null, r);\n    }, cb);\n  }, 'name', {\n    value: fn.name\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGtib3gtZ3VpLy4vbm9kZV9tb2R1bGVzL3VuaXZlcnNhbGlmeS9pbmRleC5qcz82NDJlIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJmbiIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiYXJncyIsImxlbmd0aCIsImFwcGx5IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJjYWxsIiwiZXJyIiwicmVzIiwidmFsdWUiLCJuYW1lIiwiY2IiLCJzbGljZSIsInRoZW4iLCJyIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsb0JBQUEsR0FBdUIsVUFBVUMsRUFBVixFQUFjO0FBQ25DLFNBQU9DLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQixZQUFtQjtBQUFBOztBQUFBLHNDQUFOQyxJQUFNO0FBQU5BLFVBQU07QUFBQTs7QUFDOUMsUUFBSSxPQUFPQSxJQUFJLENBQUNBLElBQUksQ0FBQ0MsTUFBTCxHQUFjLENBQWYsQ0FBWCxLQUFpQyxVQUFyQyxFQUFpREosRUFBRSxDQUFDSyxLQUFILENBQVMsSUFBVCxFQUFlRixJQUFmLEVBQWpELEtBQ0s7QUFDSCxhQUFPLElBQUlHLE9BQUosQ0FBWSxVQUFDQyxPQUFELEVBQVVDLE1BQVYsRUFBcUI7QUFDdENSLFVBQUUsQ0FBQ1MsSUFBSCxPQUFBVCxFQUFFLEdBQ0EsS0FEQSxTQUVHRyxJQUZILEdBR0EsVUFBQ08sR0FBRCxFQUFNQyxHQUFOO0FBQUEsaUJBQWVELEdBQUcsSUFBSSxJQUFSLEdBQWdCRixNQUFNLENBQUNFLEdBQUQsQ0FBdEIsR0FBOEJILE9BQU8sQ0FBQ0ksR0FBRCxDQUFuRDtBQUFBLFNBSEEsR0FBRjtBQUtELE9BTk0sQ0FBUDtBQU9EO0FBQ0YsR0FYTSxFQVdKLE1BWEksRUFXSTtBQUFFQyxTQUFLLEVBQUVaLEVBQUUsQ0FBQ2E7QUFBWixHQVhKLENBQVA7QUFZRCxDQWJEOztBQWVBZCxtQkFBQSxHQUFzQixVQUFVQyxFQUFWLEVBQWM7QUFDbEMsU0FBT0MsTUFBTSxDQUFDQyxjQUFQLENBQXNCLFlBQW1CO0FBQUEsdUNBQU5DLElBQU07QUFBTkEsVUFBTTtBQUFBOztBQUM5QyxRQUFNVyxFQUFFLEdBQUdYLElBQUksQ0FBQ0EsSUFBSSxDQUFDQyxNQUFMLEdBQWMsQ0FBZixDQUFmO0FBQ0EsUUFBSSxPQUFPVSxFQUFQLEtBQWMsVUFBbEIsRUFBOEIsT0FBT2QsRUFBRSxDQUFDSyxLQUFILENBQVMsSUFBVCxFQUFlRixJQUFmLENBQVAsQ0FBOUIsS0FDS0gsRUFBRSxDQUFDSyxLQUFILENBQVMsSUFBVCxFQUFlRixJQUFJLENBQUNZLEtBQUwsQ0FBVyxDQUFYLEVBQWMsQ0FBQyxDQUFmLENBQWYsRUFBa0NDLElBQWxDLENBQXVDLFVBQUFDLENBQUM7QUFBQSxhQUFJSCxFQUFFLENBQUMsSUFBRCxFQUFPRyxDQUFQLENBQU47QUFBQSxLQUF4QyxFQUF5REgsRUFBekQ7QUFDTixHQUpNLEVBSUosTUFKSSxFQUlJO0FBQUVGLFNBQUssRUFBRVosRUFBRSxDQUFDYTtBQUFaLEdBSkosQ0FBUDtBQUtELENBTkQiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdW5pdmVyc2FsaWZ5L2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuZnJvbUNhbGxiYWNrID0gZnVuY3Rpb24gKGZuKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICBpZiAodHlwZW9mIGFyZ3NbYXJncy5sZW5ndGggLSAxXSA9PT0gJ2Z1bmN0aW9uJykgZm4uYXBwbHkodGhpcywgYXJncylcbiAgICBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGZuLmNhbGwoXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICAuLi5hcmdzLFxuICAgICAgICAgIChlcnIsIHJlcykgPT4gKGVyciAhPSBudWxsKSA/IHJlamVjdChlcnIpIDogcmVzb2x2ZShyZXMpXG4gICAgICAgIClcbiAgICAgIH0pXG4gICAgfVxuICB9LCAnbmFtZScsIHsgdmFsdWU6IGZuLm5hbWUgfSlcbn1cblxuZXhwb3J0cy5mcm9tUHJvbWlzZSA9IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgY29uc3QgY2IgPSBhcmdzW2FyZ3MubGVuZ3RoIC0gMV1cbiAgICBpZiAodHlwZW9mIGNiICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJncylcbiAgICBlbHNlIGZuLmFwcGx5KHRoaXMsIGFyZ3Muc2xpY2UoMCwgLTEpKS50aGVuKHIgPT4gY2IobnVsbCwgciksIGNiKVxuICB9LCAnbmFtZScsIHsgdmFsdWU6IGZuLm5hbWUgfSlcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/universalify/index.js\n");

/***/ }),

/***/ "./src/main/main.js":
/*!**************************!*\
  !*** ./src/main/main.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("/* jslint node: true, sub: true, esversion: 6 */\nvar _require = __webpack_require__(/*! electron */ \"electron\"),\n    app = _require.app,\n    BrowserWindow = _require.BrowserWindow,\n    ipcMain = _require.ipcMain,\n    dialog = _require.dialog,\n    globalShortcut = _require.globalShortcut;\n\nvar os = __webpack_require__(/*! os */ \"os\");\n\nvar path = __webpack_require__(/*! path */ \"path\");\n\nglobal.SDKBOX_CHANEL = 'gui';\n\nvar LaunchWin = __webpack_require__(/*! ./mainForStandalone */ \"./src/main/mainForStandalone.js\"); // Keep a global reference of the window object, if you don't, the window will\n// be closed automatically when the JavaScript object is garbage collected.\n\n\nvar win; // This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\n\napp.on('ready', function () {\n  // const ret = globalShortcut.register('f12', () => {\n  //     let win = BrowserWindow.getFocusedWindow();\n  //     if (!win) return;\n  //     win.webContents.toggleDevTools();\n  // })\n  // if (!ret) {\n  //     console.log('registration f12 failed')\n  // }\n  win = LaunchWin.launch();\n}); // Quit when all windows are closed.\n\napp.on('window-all-closed', function () {\n  // On macOS it is common for applications and their menu bar\n  // to stay active until the user quits explicitly with Cmd + Q\n  if (process.platform !== 'darwin') {\n    app.quit();\n  }\n});\napp.on('activate', function () {\n  // On macOS it's common to re-create a window in the app when the\n  // dock icon is clicked and there are no other windows open.\n  if (win === null) {\n    win = LaunchWin.launch();\n  }\n});\napp.on('will-quit', function () {\n  // Unregister a shortcut.\n  globalShortcut.unregister('f12'); // Unregister all shortcuts.\n\n  globalShortcut.unregisterAll();\n}); // In this file you can include the rest of your app's specific main process\n// code. You can also put them in separate files and require them here.\n// Make this app a single instance app.\n//\n// The main window will be restored and focused instead of a second window\n// opened when a person attempts to launch a second instance.\n//\n// Returns true if the current version of the app should quit instead of\n// launching.\n\nfunction makeSingleInstance() {\n  if (process.mas) return false;\n  return app.makeSingleInstance(function () {\n    if (mainWindow) {\n      if (mainWindow.isMinimized()) mainWindow.restore();\n      mainWindow.focus();\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGtib3gtZ3VpLy4vc3JjL21haW4vbWFpbi5qcz8xNTY5Il0sIm5hbWVzIjpbInJlcXVpcmUiLCJhcHAiLCJCcm93c2VyV2luZG93IiwiaXBjTWFpbiIsImRpYWxvZyIsImdsb2JhbFNob3J0Y3V0Iiwib3MiLCJwYXRoIiwiZ2xvYmFsIiwiU0RLQk9YX0NIQU5FTCIsIkxhdW5jaFdpbiIsIndpbiIsIm9uIiwibGF1bmNoIiwicHJvY2VzcyIsInBsYXRmb3JtIiwicXVpdCIsInVucmVnaXN0ZXIiLCJ1bnJlZ2lzdGVyQWxsIiwibWFrZVNpbmdsZUluc3RhbmNlIiwibWFzIiwibWFpbldpbmRvdyIsImlzTWluaW1pemVkIiwicmVzdG9yZSIsImZvY3VzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUVBLGVBTUlBLG1CQUFPLENBQUMsMEJBQUQsQ0FOWDtBQUFBLElBQ0lDLEdBREosWUFDSUEsR0FESjtBQUFBLElBRUlDLGFBRkosWUFFSUEsYUFGSjtBQUFBLElBR0lDLE9BSEosWUFHSUEsT0FISjtBQUFBLElBSUlDLE1BSkosWUFJSUEsTUFKSjtBQUFBLElBS0lDLGNBTEosWUFLSUEsY0FMSjs7QUFRQSxJQUFNQyxFQUFFLEdBQUdOLG1CQUFPLENBQUMsY0FBRCxDQUFsQjs7QUFDQSxJQUFNTyxJQUFJLEdBQUdQLG1CQUFPLENBQUMsa0JBQUQsQ0FBcEI7O0FBQ0FRLE1BQU0sQ0FBQ0MsYUFBUCxHQUF1QixLQUF2Qjs7QUFDQSxJQUFNQyxTQUFTLEdBQUdWLG1CQUFPLENBQUMsNERBQUQsQ0FBekIsQyxDQUVBO0FBQ0E7OztBQUNBLElBQUlXLEdBQUosQyxDQUVBO0FBQ0E7QUFDQTs7QUFDQVYsR0FBRyxDQUFDVyxFQUFKLENBQU8sT0FBUCxFQUFnQixZQUFNO0FBRWxCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQUQsS0FBRyxHQUFHRCxTQUFTLENBQUNHLE1BQVYsRUFBTjtBQUNILENBYkQsRSxDQWVBOztBQUNBWixHQUFHLENBQUNXLEVBQUosQ0FBTyxtQkFBUCxFQUE0QixZQUFNO0FBQzlCO0FBQ0E7QUFDQSxNQUFJRSxPQUFPLENBQUNDLFFBQVIsS0FBcUIsUUFBekIsRUFBbUM7QUFDL0JkLE9BQUcsQ0FBQ2UsSUFBSjtBQUNIO0FBQ0osQ0FORDtBQVFBZixHQUFHLENBQUNXLEVBQUosQ0FBTyxVQUFQLEVBQW1CLFlBQU07QUFDckI7QUFDQTtBQUNBLE1BQUlELEdBQUcsS0FBSyxJQUFaLEVBQWtCO0FBQ2RBLE9BQUcsR0FBR0QsU0FBUyxDQUFDRyxNQUFWLEVBQU47QUFDSDtBQUNKLENBTkQ7QUFRQVosR0FBRyxDQUFDVyxFQUFKLENBQU8sV0FBUCxFQUFvQixZQUFNO0FBQ3RCO0FBQ0FQLGdCQUFjLENBQUNZLFVBQWYsQ0FBMEIsS0FBMUIsRUFGc0IsQ0FJdEI7O0FBQ0FaLGdCQUFjLENBQUNhLGFBQWY7QUFDSCxDQU5ELEUsQ0FRQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsU0FBU0Msa0JBQVQsR0FBOEI7QUFDMUIsTUFBSUwsT0FBTyxDQUFDTSxHQUFaLEVBQWlCLE9BQU8sS0FBUDtBQUVqQixTQUFPbkIsR0FBRyxDQUFDa0Isa0JBQUosQ0FBdUIsWUFBVztBQUNyQyxRQUFJRSxVQUFKLEVBQWdCO0FBQ1osVUFBSUEsVUFBVSxDQUFDQyxXQUFYLEVBQUosRUFBOEJELFVBQVUsQ0FBQ0UsT0FBWDtBQUM5QkYsZ0JBQVUsQ0FBQ0csS0FBWDtBQUNIO0FBQ0osR0FMTSxDQUFQO0FBTUgiLCJmaWxlIjoiLi9zcmMvbWFpbi9tYWluLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoganNsaW50IG5vZGU6IHRydWUsIHN1YjogdHJ1ZSwgZXN2ZXJzaW9uOiA2ICovXG5cbmNvbnN0IHtcbiAgICBhcHAsXG4gICAgQnJvd3NlcldpbmRvdyxcbiAgICBpcGNNYWluLFxuICAgIGRpYWxvZyxcbiAgICBnbG9iYWxTaG9ydGN1dFxufSA9IHJlcXVpcmUoJ2VsZWN0cm9uJyk7XG5cbmNvbnN0IG9zID0gcmVxdWlyZSgnb3MnKTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5nbG9iYWwuU0RLQk9YX0NIQU5FTCA9ICdndWknO1xuY29uc3QgTGF1bmNoV2luID0gcmVxdWlyZSgnLi9tYWluRm9yU3RhbmRhbG9uZScpO1xuXG4vLyBLZWVwIGEgZ2xvYmFsIHJlZmVyZW5jZSBvZiB0aGUgd2luZG93IG9iamVjdCwgaWYgeW91IGRvbid0LCB0aGUgd2luZG93IHdpbGxcbi8vIGJlIGNsb3NlZCBhdXRvbWF0aWNhbGx5IHdoZW4gdGhlIEphdmFTY3JpcHQgb2JqZWN0IGlzIGdhcmJhZ2UgY29sbGVjdGVkLlxubGV0IHdpbjtcblxuLy8gVGhpcyBtZXRob2Qgd2lsbCBiZSBjYWxsZWQgd2hlbiBFbGVjdHJvbiBoYXMgZmluaXNoZWRcbi8vIGluaXRpYWxpemF0aW9uIGFuZCBpcyByZWFkeSB0byBjcmVhdGUgYnJvd3NlciB3aW5kb3dzLlxuLy8gU29tZSBBUElzIGNhbiBvbmx5IGJlIHVzZWQgYWZ0ZXIgdGhpcyBldmVudCBvY2N1cnMuXG5hcHAub24oJ3JlYWR5JywgKCkgPT4ge1xuXG4gICAgLy8gY29uc3QgcmV0ID0gZ2xvYmFsU2hvcnRjdXQucmVnaXN0ZXIoJ2YxMicsICgpID0+IHtcbiAgICAvLyAgICAgbGV0IHdpbiA9IEJyb3dzZXJXaW5kb3cuZ2V0Rm9jdXNlZFdpbmRvdygpO1xuICAgIC8vICAgICBpZiAoIXdpbikgcmV0dXJuO1xuICAgIC8vICAgICB3aW4ud2ViQ29udGVudHMudG9nZ2xlRGV2VG9vbHMoKTtcbiAgICAvLyB9KVxuXG4gICAgLy8gaWYgKCFyZXQpIHtcbiAgICAvLyAgICAgY29uc29sZS5sb2coJ3JlZ2lzdHJhdGlvbiBmMTIgZmFpbGVkJylcbiAgICAvLyB9XG5cbiAgICB3aW4gPSBMYXVuY2hXaW4ubGF1bmNoKCk7XG59KTtcblxuLy8gUXVpdCB3aGVuIGFsbCB3aW5kb3dzIGFyZSBjbG9zZWQuXG5hcHAub24oJ3dpbmRvdy1hbGwtY2xvc2VkJywgKCkgPT4ge1xuICAgIC8vIE9uIG1hY09TIGl0IGlzIGNvbW1vbiBmb3IgYXBwbGljYXRpb25zIGFuZCB0aGVpciBtZW51IGJhclxuICAgIC8vIHRvIHN0YXkgYWN0aXZlIHVudGlsIHRoZSB1c2VyIHF1aXRzIGV4cGxpY2l0bHkgd2l0aCBDbWQgKyBRXG4gICAgaWYgKHByb2Nlc3MucGxhdGZvcm0gIT09ICdkYXJ3aW4nKSB7XG4gICAgICAgIGFwcC5xdWl0KCk7XG4gICAgfVxufSk7XG5cbmFwcC5vbignYWN0aXZhdGUnLCAoKSA9PiB7XG4gICAgLy8gT24gbWFjT1MgaXQncyBjb21tb24gdG8gcmUtY3JlYXRlIGEgd2luZG93IGluIHRoZSBhcHAgd2hlbiB0aGVcbiAgICAvLyBkb2NrIGljb24gaXMgY2xpY2tlZCBhbmQgdGhlcmUgYXJlIG5vIG90aGVyIHdpbmRvd3Mgb3Blbi5cbiAgICBpZiAod2luID09PSBudWxsKSB7XG4gICAgICAgIHdpbiA9IExhdW5jaFdpbi5sYXVuY2goKTtcbiAgICB9XG59KTtcblxuYXBwLm9uKCd3aWxsLXF1aXQnLCAoKSA9PiB7XG4gICAgLy8gVW5yZWdpc3RlciBhIHNob3J0Y3V0LlxuICAgIGdsb2JhbFNob3J0Y3V0LnVucmVnaXN0ZXIoJ2YxMicpXG5cbiAgICAvLyBVbnJlZ2lzdGVyIGFsbCBzaG9ydGN1dHMuXG4gICAgZ2xvYmFsU2hvcnRjdXQudW5yZWdpc3RlckFsbCgpXG59KVxuXG4vLyBJbiB0aGlzIGZpbGUgeW91IGNhbiBpbmNsdWRlIHRoZSByZXN0IG9mIHlvdXIgYXBwJ3Mgc3BlY2lmaWMgbWFpbiBwcm9jZXNzXG4vLyBjb2RlLiBZb3UgY2FuIGFsc28gcHV0IHRoZW0gaW4gc2VwYXJhdGUgZmlsZXMgYW5kIHJlcXVpcmUgdGhlbSBoZXJlLlxuXG4vLyBNYWtlIHRoaXMgYXBwIGEgc2luZ2xlIGluc3RhbmNlIGFwcC5cbi8vXG4vLyBUaGUgbWFpbiB3aW5kb3cgd2lsbCBiZSByZXN0b3JlZCBhbmQgZm9jdXNlZCBpbnN0ZWFkIG9mIGEgc2Vjb25kIHdpbmRvd1xuLy8gb3BlbmVkIHdoZW4gYSBwZXJzb24gYXR0ZW1wdHMgdG8gbGF1bmNoIGEgc2Vjb25kIGluc3RhbmNlLlxuLy9cbi8vIFJldHVybnMgdHJ1ZSBpZiB0aGUgY3VycmVudCB2ZXJzaW9uIG9mIHRoZSBhcHAgc2hvdWxkIHF1aXQgaW5zdGVhZCBvZlxuLy8gbGF1bmNoaW5nLlxuZnVuY3Rpb24gbWFrZVNpbmdsZUluc3RhbmNlKCkge1xuICAgIGlmIChwcm9jZXNzLm1hcykgcmV0dXJuIGZhbHNlO1xuXG4gICAgcmV0dXJuIGFwcC5tYWtlU2luZ2xlSW5zdGFuY2UoZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChtYWluV2luZG93KSB7XG4gICAgICAgICAgICBpZiAobWFpbldpbmRvdy5pc01pbmltaXplZCgpKSBtYWluV2luZG93LnJlc3RvcmUoKTtcbiAgICAgICAgICAgIG1haW5XaW5kb3cuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main/main.js\n");

/***/ }),

/***/ "./src/main/mainForStandalone.js":
/*!***************************************!*\
  !*** ./src/main/mainForStandalone.js ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _shared_Config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/Config */ \"./src/shared/Config.js\");\n/* module decorator */ module = __webpack_require__.hmd(module);\nvar _require = __webpack_require__(/*! electron */ \"electron\"),\n    app = _require.app,\n    BrowserWindow = _require.BrowserWindow,\n    ipcMain = _require.ipcMain,\n    dialog = _require.dialog;\n\nvar os = __webpack_require__(/*! os */ \"os\");\n\nvar path = __webpack_require__(/*! path */ \"path\");\n\nvar http = __webpack_require__(/*! http */ \"http\");\n\n\n\nvar Utils = __webpack_require__(/*! ../shared/Utils */ \"./src/shared/Utils.js\");\n\nvar cfgFile = path.join(os.homedir(), '.sdkbox', 'conf', 'gui.json');\nvar infofile = path.join(os.homedir(), '.sdkbox', 'creator', 'data', 'info.json');\nvar SDKBoxWin;\n\nfunction load() {\n  track({\n    'event': 'creator_sdkbox_load'\n  }); // app.on('ready', () => {});\n  // app.on('activate', () => {});\n\n  app.on('will-quit', function () {\n    track({\n      'event': 'creator_quit'\n    });\n  });\n  fetchRemoteVersions();\n}\n\nfunction unload() {\n  track({\n    'event': 'creator_sdkbox_unload'\n  });\n}\n\nfunction launch() {\n  try {\n    if (SDKBoxWin) {\n      SDKBoxWin.show();\n    }\n  } catch (e) {\n    SDKBoxWin = null;\n  }\n\n  if (SDKBoxWin) {\n    return;\n  }\n\n  var win;\n  var configs = null; // load win size\n\n  if (true) {\n    configs = Utils.readJsonFromFile(cfgFile);\n  }\n\n  if (!configs) {\n    configs = {\n      windowPos: {\n        width: 1080,\n        height: 720\n      }\n    };\n  } // Create the browser window.\n\n\n  win = new BrowserWindow({\n    width: configs.windowPos.width,\n    height: configs.windowPos.height,\n    minWidth: 960,\n    minHeight: 600\n  });\n  win.downloads = {};\n  var projectRoot = Utils.getProjectRoot();\n  var html_path = \"file://\".concat(path.join(__dirname, '..', 'pages'), \"/index.html\");\n\n  if (false) {} // and load the index.html of the app.\n\n\n  win.loadURL(html_path);\n  track({\n    'event': 'session_start'\n  }); // Open the DevTools.\n  // win.webContents.openDevTools()\n\n  ipcMain.on('open-file-dialog', function (event) {\n    var path = dialog.showOpenDialog({\n      properties: ['openDirectory']\n    });\n    event.sender.send('selected-directory', path);\n  });\n  ipcMain.on('download-file', function (event, url) {\n    if (null == win) {\n      console.log('Win is null');\n      return;\n    }\n\n    win.webContents.downloadURL(url);\n  });\n  ipcMain.on('cancel-download-file', function (event, url) {\n    var item = win.downloads[url];\n\n    if (!item) {\n      console.log('failed, can not find download item by url');\n      return;\n    }\n\n    item.cancel();\n    delete win.downloads[url];\n  }); // Emitted when the window is closed.\n\n  win.on('close', function () {\n    SDKBoxWin = null;\n    track({\n      'event': 'session_end'\n    });\n\n    if (true) {\n      // save winsize\n      configs = Utils.readJsonFromFile(cfgFile);\n      var bounds = win.getBounds();\n\n      if (!configs) {\n        configs = {};\n      }\n\n      configs.windowPos = {\n        width: bounds.width,\n        height: bounds.height\n      };\n      Utils.writeJsonToFile(cfgFile, configs); // quit\n\n      app.quit();\n    }\n  });\n  win.on('closed', function () {\n    // Dereference the window object, usually you would store windows\n    // in an array if your app supports multi windows, this is the time\n    // when you should delete the corresponding element.\n    win = null;\n  });\n  win.webContents.session.on('will-download', function (event, item, webContents) {\n    // Set the save path, making Electron not to prompt a save dialog.\n    var win = SDKBoxWin;\n    var url = item.getURL();\n    var paths = url.split('/');\n    var temp_path = path.join(os.homedir(), '.sdkbox', 'temp', paths[paths.length - 1]);\n    item.setSavePath(temp_path);\n    win.downloads[url] = item;\n    item.on('updated', function (event, state) {\n      var options = {\n        'state': state,\n        'url': url\n      };\n\n      if (state === 'interrupted') {\n        delete win.downloads[url];\n      }\n\n      if (state === 'progressing') {\n        options.downloadRatio = item.getReceivedBytes() * 100 / item.getTotalBytes();\n      }\n\n      win.webContents.send('download-status', options); // if (state === 'interrupted') {\n      //     console.log('Download is interrupted but can be resumed')\n      // } else if (state === 'progressing') {\n      //     options.downloadRatio = item.getReceivedBytes() * 100 / item.getTotalBytes();\n      //     if (item.isPaused()) {\n      //         console.log('Download is paused')\n      //     } else {\n      //         console.log(`Received bytes: ${item.getReceivedBytes()*100/item.getTotalBytes()}`)\n      //     }\n      // }\n    });\n    item.once('done', function (event, state) {\n      if (!win) {\n        return;\n      }\n\n      delete win.downloads[url];\n      win.webContents.send('download-finish', {\n        'state': state,\n        'url': url\n      }); // if (state === 'completed') {\n      //     console.log('Download successfully')\n      // } else {\n      //     console.log(`Download failed: ${state}`)\n      // }\n    });\n  });\n  SDKBoxWin = win;\n  return win;\n}\n\nfunction sendMsgToSBWin(msg, options) {\n  if (null == SDKBoxWin) {\n    return;\n  }\n\n  if (null == SDKBoxWin.webContents) {\n    return;\n  }\n\n  if ('undefined' == typeof msg) {\n    return;\n  }\n\n  SDKBoxWin.webContents.send(msg, options);\n}\n\nfunction track(json) {\n  function httpGetAsync(theUrl, callback) {\n    // Editor.log(`URL Get: ${theUrl}`);\n    http.get(theUrl, function (res) {// Editor.log(`${theUrl} -> ${res.statusCode}`)\n    }).on('error', function () {});\n  }\n\n  json.chanel = \"gui\";\n\n  if ('undefined' != typeof Editor) {\n    json.userName = Editor.lastLogin;\n    json.creatorVersion = Editor.App.version;\n  }\n\n  json.version = _shared_Config__WEBPACK_IMPORTED_MODULE_0__.Config.version;\n  json.beta = _shared_Config__WEBPACK_IMPORTED_MODULE_0__.Config.beta;\n  var url = \"http://metrics.sdkbox.com/?\".concat(JSON.stringify(json));\n  httpGetAsync(url);\n}\n\nfunction fetchRemoteVersions() {\n  if (fs.existsSync(infofile)) {\n    var json = Utils.readJsonFromFile(infofile);\n\n    try {\n      var t = json.fetchTime;\n\n      var _ct = Date.parse(new Date());\n\n      if ('undefined' == typeof t || _ct - t > 1000 * 60 * 60 * 24) {\n        // one day\n        json.fetchTime = _ct;\n        Utils.writeJsonToFile(infofile, json);\n        Utils.loadRemoteVersions();\n      } else {// Editor.log('SDKBox GUI For Creator is the latest version.');\n      }\n    } catch (e) {}\n  } else {\n    ct = Date.parse(new Date());\n    var _json = {\n      fetchTime: ct\n    };\n    Utils.writeJsonToFile(infofile, _json);\n    Utils.loadRemoteVersions();\n  }\n}\n\nfunction needUpdate() {\n  var json = Utils.readJsonFromFile(infofile);\n\n  if (null == json) {\n    return true;\n  }\n\n  var update = true;\n\n  try {\n    if (Utils.compareVersions(json.version.installer.local, json.version.installer.remote) >= 0 && Utils.compareVersions(json.version.gui.local, json.version.gui.remote) >= 0) {\n      update = false;\n    }\n  } catch (e) {\n    update = true;\n  }\n\n  if (!update) {\n    fetchRemoteVersions();\n  }\n\n  return update;\n}\n\nmodule.exports.launch = launch;\nmodule.exports.sendMsgToSBWin = sendMsgToSBWin;\nmodule.exports.load = load;\nmodule.exports.unload = unload;\nmodule.exports.needUpdate = needUpdate;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGtib3gtZ3VpLy4vc3JjL21haW4vbWFpbkZvclN0YW5kYWxvbmUuanM/MDRlNyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiYXBwIiwiQnJvd3NlcldpbmRvdyIsImlwY01haW4iLCJkaWFsb2ciLCJvcyIsInBhdGgiLCJodHRwIiwiVXRpbHMiLCJjZmdGaWxlIiwiam9pbiIsImhvbWVkaXIiLCJpbmZvZmlsZSIsIlNES0JveFdpbiIsImxvYWQiLCJ0cmFjayIsIm9uIiwiZmV0Y2hSZW1vdGVWZXJzaW9ucyIsInVubG9hZCIsImxhdW5jaCIsInNob3ciLCJlIiwid2luIiwiY29uZmlncyIsInJlYWRKc29uRnJvbUZpbGUiLCJ3aW5kb3dQb3MiLCJ3aWR0aCIsImhlaWdodCIsIm1pbldpZHRoIiwibWluSGVpZ2h0IiwiZG93bmxvYWRzIiwicHJvamVjdFJvb3QiLCJnZXRQcm9qZWN0Um9vdCIsImh0bWxfcGF0aCIsIl9fZGlybmFtZSIsImxvYWRVUkwiLCJldmVudCIsInNob3dPcGVuRGlhbG9nIiwicHJvcGVydGllcyIsInNlbmRlciIsInNlbmQiLCJ1cmwiLCJjb25zb2xlIiwibG9nIiwid2ViQ29udGVudHMiLCJkb3dubG9hZFVSTCIsIml0ZW0iLCJjYW5jZWwiLCJib3VuZHMiLCJnZXRCb3VuZHMiLCJ3cml0ZUpzb25Ub0ZpbGUiLCJxdWl0Iiwic2Vzc2lvbiIsImdldFVSTCIsInBhdGhzIiwic3BsaXQiLCJ0ZW1wX3BhdGgiLCJsZW5ndGgiLCJzZXRTYXZlUGF0aCIsInN0YXRlIiwib3B0aW9ucyIsImRvd25sb2FkUmF0aW8iLCJnZXRSZWNlaXZlZEJ5dGVzIiwiZ2V0VG90YWxCeXRlcyIsIm9uY2UiLCJzZW5kTXNnVG9TQldpbiIsIm1zZyIsImpzb24iLCJodHRwR2V0QXN5bmMiLCJ0aGVVcmwiLCJjYWxsYmFjayIsImdldCIsInJlcyIsImNoYW5lbCIsIlNES0JPWF9DSEFORUwiLCJFZGl0b3IiLCJ1c2VyTmFtZSIsImxhc3RMb2dpbiIsImNyZWF0b3JWZXJzaW9uIiwiQXBwIiwidmVyc2lvbiIsIkNvbmZpZyIsImJldGEiLCJKU09OIiwic3RyaW5naWZ5IiwiZnMiLCJleGlzdHNTeW5jIiwidCIsImZldGNoVGltZSIsImN0IiwiRGF0ZSIsInBhcnNlIiwibG9hZFJlbW90ZVZlcnNpb25zIiwibmVlZFVwZGF0ZSIsInVwZGF0ZSIsImNvbXBhcmVWZXJzaW9ucyIsImluc3RhbGxlciIsImxvY2FsIiwicmVtb3RlIiwiZ3VpIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsZUFLSUEsbUJBQU8sQ0FBQywwQkFBRCxDQUxYO0FBQUEsSUFDSUMsR0FESixZQUNJQSxHQURKO0FBQUEsSUFFSUMsYUFGSixZQUVJQSxhQUZKO0FBQUEsSUFHSUMsT0FISixZQUdJQSxPQUhKO0FBQUEsSUFJSUMsTUFKSixZQUlJQSxNQUpKOztBQU9BLElBQU1DLEVBQUUsR0FBR0wsbUJBQU8sQ0FBQyxjQUFELENBQWxCOztBQUNBLElBQU1NLElBQUksR0FBR04sbUJBQU8sQ0FBQyxrQkFBRCxDQUFwQjs7QUFDQSxJQUFNTyxJQUFJLEdBQUdQLG1CQUFPLENBQUMsa0JBQUQsQ0FBcEI7O0FBQ0E7O0FBR0EsSUFBTVEsS0FBSyxHQUFHUixtQkFBTyxDQUFDLDhDQUFELENBQXJCOztBQUVBLElBQU1TLE9BQU8sR0FBR0gsSUFBSSxDQUFDSSxJQUFMLENBQVVMLEVBQUUsQ0FBQ00sT0FBSCxFQUFWLEVBQXdCLFNBQXhCLEVBQW1DLE1BQW5DLEVBQTJDLFVBQTNDLENBQWhCO0FBQ0EsSUFBTUMsUUFBUSxHQUFHTixJQUFJLENBQUNJLElBQUwsQ0FBVUwsRUFBRSxDQUFDTSxPQUFILEVBQVYsRUFBd0IsU0FBeEIsRUFBbUMsU0FBbkMsRUFBOEMsTUFBOUMsRUFBc0QsV0FBdEQsQ0FBakI7QUFDQSxJQUFJRSxTQUFKOztBQUVBLFNBQVNDLElBQVQsR0FBZ0I7QUFDWkMsT0FBSyxDQUFDO0FBQ0YsYUFBUztBQURQLEdBQUQsQ0FBTCxDQURZLENB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QUFJMkIsTUFBTSxHQUFHLElBQWI7O0FBQ0EsTUFBSTtBQUNBLFFBQUl0RixLQUFLLENBQUN1RixlQUFOLENBQXNCNUIsSUFBSSxDQUFDYSxPQUFMLENBQWFnQixTQUFiLENBQXVCQyxLQUE3QyxFQUFvRDlCLElBQUksQ0FBQ2EsT0FBTCxDQUFhZ0IsU0FBYixDQUF1QkUsTUFBM0UsS0FBc0YsQ0FBdEYsSUFDQTFGLEtBQUssQ0FBQ3VGLGVBQU4sQ0FBc0I1QixJQUFJLENBQUNhLE9BQUwsQ0FBYW1CLEdBQWIsQ0FBaUJGLEtBQXZDLEVBQThDOUIsSUFBSSxDQUFDYSxPQUFMLENBQWFtQixHQUFiLENBQWlCRCxNQUEvRCxLQUEwRSxDQUQ5RSxFQUNpRjtBQUM3RUosWUFBTSxHQUFHLEtBQVQ7QUFDSDtBQUNKLEdBTEQsQ0FLRSxPQUFPekUsQ0FBUCxFQUFVO0FBQ1J5RSxVQUFNLEdBQUcsSUFBVDtBQUNIOztBQUVELE1BQUksQ0FBQ0EsTUFBTCxFQUFhO0FBQ1Q3RSx1QkFBbUI7QUFDdEI7O0FBRUQsU0FBTzZFLE1BQVA7QUFDSDs7QUFFRE0sTUFBTSxDQUFDQyxPQUFQLENBQWVsRixNQUFmLEdBQXdCQSxNQUF4QjtBQUNBaUYsTUFBTSxDQUFDQyxPQUFQLENBQWVwQyxjQUFmLEdBQWdDQSxjQUFoQztBQUNBbUMsTUFBTSxDQUFDQyxPQUFQLENBQWV2RixJQUFmLEdBQXNCQSxJQUF0QjtBQUNBc0YsTUFBTSxDQUFDQyxPQUFQLENBQWVuRixNQUFmLEdBQXdCQSxNQUF4QjtBQUNBa0YsTUFBTSxDQUFDQyxPQUFQLENBQWVSLFVBQWYsR0FBNEJBLFVBQTVCIiwiZmlsZSI6Ii4vc3JjL21haW4vbWFpbkZvclN0YW5kYWxvbmUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7XG4gICAgYXBwLFxuICAgIEJyb3dzZXJXaW5kb3csXG4gICAgaXBjTWFpbixcbiAgICBkaWFsb2dcbn0gPSByZXF1aXJlKCdlbGVjdHJvbicpO1xuXG5jb25zdCBvcyA9IHJlcXVpcmUoJ29zJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgaHR0cCA9IHJlcXVpcmUoJ2h0dHAnKTtcbmltcG9ydCB7XG4gICAgQ29uZmlnXG59IGZyb20gJy4uL3NoYXJlZC9Db25maWcnO1xuY29uc3QgVXRpbHMgPSByZXF1aXJlKCcuLi9zaGFyZWQvVXRpbHMnKVxuXG5jb25zdCBjZmdGaWxlID0gcGF0aC5qb2luKG9zLmhvbWVkaXIoKSwgJy5zZGtib3gnLCAnY29uZicsICdndWkuanNvbicpO1xuY29uc3QgaW5mb2ZpbGUgPSBwYXRoLmpvaW4ob3MuaG9tZWRpcigpLCAnLnNka2JveCcsICdjcmVhdG9yJywgJ2RhdGEnLCAnaW5mby5qc29uJyk7XG5sZXQgU0RLQm94V2luO1xuXG5mdW5jdGlvbiBsb2FkKCkge1xuICAgIHRyYWNrKHtcbiAgICAgICAgJ2V2ZW50JzogJ2NyZWF0b3Jfc2RrYm94X2xvYWQnXG4gICAgfSk7XG5cbiAgICAvLyBhcHAub24oJ3JlYWR5JywgKCkgPT4ge30pO1xuICAgIC8vIGFwcC5vbignYWN0aXZhdGUnLCAoKSA9PiB7fSk7XG4gICAgYXBwLm9uKCd3aWxsLXF1aXQnLCAoKSA9PiB7XG4gICAgICAgIHRyYWNrKHtcbiAgICAgICAgICAgICdldmVudCc6ICdjcmVhdG9yX3F1aXQnXG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIGZldGNoUmVtb3RlVmVyc2lvbnMoKTtcbn1cblxuZnVuY3Rpb24gdW5sb2FkKCkge1xuICAgIHRyYWNrKHtcbiAgICAgICAgJ2V2ZW50JzogJ2NyZWF0b3Jfc2RrYm94X3VubG9hZCdcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gbGF1bmNoKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmIChTREtCb3hXaW4pIHtcbiAgICAgICAgICAgIFNES0JveFdpbi5zaG93KCk7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIFNES0JveFdpbiA9IG51bGw7XG4gICAgfVxuICAgIGlmIChTREtCb3hXaW4pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCB3aW47XG4gICAgbGV0IGNvbmZpZ3MgPSBudWxsO1xuXG4gICAgLy8gbG9hZCB3aW4gc2l6ZVxuICAgIGlmICgnY3JlYXRvcicgIT0gU0RLQk9YX0NIQU5FTCkge1xuICAgICAgICBjb25maWdzID0gVXRpbHMucmVhZEpzb25Gcm9tRmlsZShjZmdGaWxlKTtcbiAgICB9XG4gICAgaWYgKCFjb25maWdzKSB7XG4gICAgICAgIGNvbmZpZ3MgPSB7XG4gICAgICAgICAgICB3aW5kb3dQb3M6IHtcbiAgICAgICAgICAgICAgICB3aWR0aDogMTA4MCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDcyMFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIENyZWF0ZSB0aGUgYnJvd3NlciB3aW5kb3cuXG4gICAgd2luID0gbmV3IEJyb3dzZXJXaW5kb3coe1xuICAgICAgICB3aWR0aDogY29uZmlncy53aW5kb3dQb3Mud2lkdGgsXG4gICAgICAgIGhlaWdodDogY29uZmlncy53aW5kb3dQb3MuaGVpZ2h0LFxuICAgICAgICBtaW5XaWR0aDogOTYwLFxuICAgICAgICBtaW5IZWlnaHQ6IDYwMFxuICAgIH0pO1xuICAgIHdpbi5kb3dubG9hZHMgPSB7fTtcblxuICAgIGNvbnN0IHByb2plY3RSb290ID0gVXRpbHMuZ2V0UHJvamVjdFJvb3QoKTtcbiAgICBsZXQgaHRtbF9wYXRoID0gYGZpbGU6Ly8ke3BhdGguam9pbihfX2Rpcm5hbWUsICcuLicsICdwYWdlcycpfS9pbmRleC5odG1sYDtcbiAgICBpZiAoJ2NyZWF0b3InID09PSBTREtCT1hfQ0hBTkVMKSB7XG4gICAgICAgIGh0bWxfcGF0aCArPSBgP3Byb2plY3Q9JHtlbmNvZGVVUklDb21wb25lbnQocHJvamVjdFJvb3QpfSZidWlsdGluQ29jb3NSb290PSR7ZW5jb2RlVVJJQ29tcG9uZW50KEVkaXRvci5idWlsdGluQ29jb3NSb290KX1gO1xuICAgIH1cblxuICAgIC8vIGFuZCBsb2FkIHRoZSBpbmRleC5odG1sIG9mIHRoZSBhcHAuXG4gICAgd2luLmxvYWRVUkwoaHRtbF9wYXRoKTtcbiAgICB0cmFjayh7XG4gICAgICAgICdldmVudCc6ICdzZXNzaW9uX3N0YXJ0J1xuICAgIH0pO1xuXG4gICAgLy8gT3BlbiB0aGUgRGV2VG9vbHMuXG4gICAgLy8gd2luLndlYkNvbnRlbnRzLm9wZW5EZXZUb29scygpXG5cbiAgICBpcGNNYWluLm9uKCdvcGVuLWZpbGUtZGlhbG9nJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgbGV0IHBhdGggPSBkaWFsb2cuc2hvd09wZW5EaWFsb2coe1xuICAgICAgICAgICAgcHJvcGVydGllczogWydvcGVuRGlyZWN0b3J5J11cbiAgICAgICAgfSk7XG4gICAgICAgIGV2ZW50LnNlbmRlci5zZW5kKCdzZWxlY3RlZC1kaXJlY3RvcnknLCBwYXRoKTtcbiAgICB9KTtcblxuICAgIGlwY01haW4ub24oJ2Rvd25sb2FkLWZpbGUnLCBmdW5jdGlvbihldmVudCwgdXJsKSB7XG4gICAgICAgIGlmIChudWxsID09IHdpbikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1dpbiBpcyBudWxsJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB3aW4ud2ViQ29udGVudHMuZG93bmxvYWRVUkwodXJsKTtcbiAgICB9KTtcbiAgICBpcGNNYWluLm9uKCdjYW5jZWwtZG93bmxvYWQtZmlsZScsIGZ1bmN0aW9uKGV2ZW50LCB1cmwpIHtcbiAgICAgICAgbGV0IGl0ZW0gPSB3aW4uZG93bmxvYWRzW3VybF07XG4gICAgICAgIGlmICghaXRlbSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2ZhaWxlZCwgY2FuIG5vdCBmaW5kIGRvd25sb2FkIGl0ZW0gYnkgdXJsJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaXRlbS5jYW5jZWwoKTtcbiAgICAgICAgZGVsZXRlIHdpbi5kb3dubG9hZHNbdXJsXTtcbiAgICB9KTtcblxuICAgIC8vIEVtaXR0ZWQgd2hlbiB0aGUgd2luZG93IGlzIGNsb3NlZC5cbiAgICB3aW4ub24oJ2Nsb3NlJywgKCkgPT4ge1xuICAgICAgICBTREtCb3hXaW4gPSBudWxsO1xuICAgICAgICB0cmFjayh7XG4gICAgICAgICAgICAnZXZlbnQnOiAnc2Vzc2lvbl9lbmQnXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoJ2NyZWF0b3InICE9IFNES0JPWF9DSEFORUwpIHtcbiAgICAgICAgICAgIC8vIHNhdmUgd2luc2l6ZVxuICAgICAgICAgICAgY29uZmlncyA9IFV0aWxzLnJlYWRKc29uRnJvbUZpbGUoY2ZnRmlsZSk7XG4gICAgICAgICAgICBjb25zdCBib3VuZHMgPSB3aW4uZ2V0Qm91bmRzKCk7XG4gICAgICAgICAgICBpZiAoIWNvbmZpZ3MpIHtcbiAgICAgICAgICAgICAgICBjb25maWdzID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25maWdzLndpbmRvd1BvcyA9IHtcbiAgICAgICAgICAgICAgICB3aWR0aDogYm91bmRzLndpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogYm91bmRzLmhlaWdodFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFV0aWxzLndyaXRlSnNvblRvRmlsZShjZmdGaWxlLCBjb25maWdzKTtcblxuICAgICAgICAgICAgLy8gcXVpdFxuICAgICAgICAgICAgYXBwLnF1aXQoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgd2luLm9uKCdjbG9zZWQnLCAoKSA9PiB7XG4gICAgICAgIC8vIERlcmVmZXJlbmNlIHRoZSB3aW5kb3cgb2JqZWN0LCB1c3VhbGx5IHlvdSB3b3VsZCBzdG9yZSB3aW5kb3dzXG4gICAgICAgIC8vIGluIGFuIGFycmF5IGlmIHlvdXIgYXBwIHN1cHBvcnRzIG11bHRpIHdpbmRvd3MsIHRoaXMgaXMgdGhlIHRpbWVcbiAgICAgICAgLy8gd2hlbiB5b3Ugc2hvdWxkIGRlbGV0ZSB0aGUgY29ycmVzcG9uZGluZyBlbGVtZW50LlxuICAgICAgICB3aW4gPSBudWxsO1xuICAgIH0pO1xuXG4gICAgd2luLndlYkNvbnRlbnRzLnNlc3Npb24ub24oJ3dpbGwtZG93bmxvYWQnLCAoZXZlbnQsIGl0ZW0sIHdlYkNvbnRlbnRzKSA9PiB7XG4gICAgICAgIC8vIFNldCB0aGUgc2F2ZSBwYXRoLCBtYWtpbmcgRWxlY3Ryb24gbm90IHRvIHByb21wdCBhIHNhdmUgZGlhbG9nLlxuICAgICAgICBsZXQgd2luID0gU0RLQm94V2luO1xuICAgICAgICBjb25zdCB1cmwgPSBpdGVtLmdldFVSTCgpO1xuICAgICAgICBjb25zdCBwYXRocyA9IHVybC5zcGxpdCgnLycpO1xuICAgICAgICBjb25zdCB0ZW1wX3BhdGggPSBwYXRoLmpvaW4ob3MuaG9tZWRpcigpLCAnLnNka2JveCcsICd0ZW1wJywgcGF0aHNbcGF0aHMubGVuZ3RoIC0gMV0pO1xuICAgICAgICBpdGVtLnNldFNhdmVQYXRoKHRlbXBfcGF0aCk7XG4gICAgICAgIHdpbi5kb3dubG9hZHNbdXJsXSA9IGl0ZW07XG5cbiAgICAgICAgaXRlbS5vbigndXBkYXRlZCcsIChldmVudCwgc3RhdGUpID0+IHtcbiAgICAgICAgICAgIGxldCBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICdzdGF0ZSc6IHN0YXRlLFxuICAgICAgICAgICAgICAgICd1cmwnOiB1cmxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoc3RhdGUgPT09ICdpbnRlcnJ1cHRlZCcpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgd2luLmRvd25sb2Fkc1t1cmxdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YXRlID09PSAncHJvZ3Jlc3NpbmcnKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5kb3dubG9hZFJhdGlvID0gaXRlbS5nZXRSZWNlaXZlZEJ5dGVzKCkgKiAxMDAgLyBpdGVtLmdldFRvdGFsQnl0ZXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdpbi53ZWJDb250ZW50cy5zZW5kKCdkb3dubG9hZC1zdGF0dXMnLCBvcHRpb25zKTtcblxuICAgICAgICAgICAgLy8gaWYgKHN0YXRlID09PSAnaW50ZXJydXB0ZWQnKSB7XG4gICAgICAgICAgICAvLyAgICAgY29uc29sZS5sb2coJ0Rvd25sb2FkIGlzIGludGVycnVwdGVkIGJ1dCBjYW4gYmUgcmVzdW1lZCcpXG4gICAgICAgICAgICAvLyB9IGVsc2UgaWYgKHN0YXRlID09PSAncHJvZ3Jlc3NpbmcnKSB7XG4gICAgICAgICAgICAvLyAgICAgb3B0aW9ucy5kb3dubG9hZFJhdGlvID0gaXRlbS5nZXRSZWNlaXZlZEJ5dGVzKCkgKiAxMDAgLyBpdGVtLmdldFRvdGFsQnl0ZXMoKTtcbiAgICAgICAgICAgIC8vICAgICBpZiAoaXRlbS5pc1BhdXNlZCgpKSB7XG4gICAgICAgICAgICAvLyAgICAgICAgIGNvbnNvbGUubG9nKCdEb3dubG9hZCBpcyBwYXVzZWQnKVxuICAgICAgICAgICAgLy8gICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyAgICAgICAgIGNvbnNvbGUubG9nKGBSZWNlaXZlZCBieXRlczogJHtpdGVtLmdldFJlY2VpdmVkQnl0ZXMoKSoxMDAvaXRlbS5nZXRUb3RhbEJ5dGVzKCl9YClcbiAgICAgICAgICAgIC8vICAgICB9XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgIH0pXG4gICAgICAgIGl0ZW0ub25jZSgnZG9uZScsIChldmVudCwgc3RhdGUpID0+IHtcbiAgICAgICAgICAgIGlmICghd2luKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVsZXRlIHdpbi5kb3dubG9hZHNbdXJsXTtcbiAgICAgICAgICAgIHdpbi53ZWJDb250ZW50cy5zZW5kKCdkb3dubG9hZC1maW5pc2gnLCB7XG4gICAgICAgICAgICAgICAgJ3N0YXRlJzogc3RhdGUsXG4gICAgICAgICAgICAgICAgJ3VybCc6IHVybFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIGlmIChzdGF0ZSA9PT0gJ2NvbXBsZXRlZCcpIHtcbiAgICAgICAgICAgIC8vICAgICBjb25zb2xlLmxvZygnRG93bmxvYWQgc3VjY2Vzc2Z1bGx5JylcbiAgICAgICAgICAgIC8vIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyAgICAgY29uc29sZS5sb2coYERvd25sb2FkIGZhaWxlZDogJHtzdGF0ZX1gKVxuICAgICAgICAgICAgLy8gfVxuICAgICAgICB9KVxuICAgIH0pO1xuXG4gICAgU0RLQm94V2luID0gd2luO1xuXG4gICAgcmV0dXJuIHdpbjtcbn1cblxuXG5mdW5jdGlvbiBzZW5kTXNnVG9TQldpbihtc2csIG9wdGlvbnMpIHtcbiAgICBpZiAobnVsbCA9PSBTREtCb3hXaW4pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAobnVsbCA9PSBTREtCb3hXaW4ud2ViQ29udGVudHMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoJ3VuZGVmaW5lZCcgPT0gdHlwZW9mIG1zZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIFNES0JveFdpbi53ZWJDb250ZW50cy5zZW5kKG1zZywgb3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHRyYWNrKGpzb24pIHtcbiAgICBmdW5jdGlvbiBodHRwR2V0QXN5bmModGhlVXJsLCBjYWxsYmFjaykge1xuICAgICAgICAvLyBFZGl0b3IubG9nKGBVUkwgR2V0OiAke3RoZVVybH1gKTtcbiAgICAgICAgaHR0cC5nZXQodGhlVXJsLCAocmVzKSA9PiB7XG4gICAgICAgICAgICAvLyBFZGl0b3IubG9nKGAke3RoZVVybH0gLT4gJHtyZXMuc3RhdHVzQ29kZX1gKVxuICAgICAgICB9KVxuICAgICAgICAub24oJ2Vycm9yJywgZnVuY3Rpb24gKCkge30pO1xuICAgIH1cblxuICAgIGpzb24uY2hhbmVsID0gU0RLQk9YX0NIQU5FTDtcbiAgICBpZiAoJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIEVkaXRvcikge1xuICAgICAgICBqc29uLnVzZXJOYW1lID0gRWRpdG9yLmxhc3RMb2dpbjtcbiAgICAgICAganNvbi5jcmVhdG9yVmVyc2lvbiA9IEVkaXRvci5BcHAudmVyc2lvbjtcbiAgICB9XG4gICAganNvbi52ZXJzaW9uID0gQ29uZmlnLnZlcnNpb247XG4gICAganNvbi5iZXRhID0gQ29uZmlnLmJldGE7XG4gICAgY29uc3QgdXJsID0gYGh0dHA6Ly9tZXRyaWNzLnNka2JveC5jb20vPyR7SlNPTi5zdHJpbmdpZnkoanNvbil9YDtcbiAgICBodHRwR2V0QXN5bmModXJsKTtcbn1cblxuXG5mdW5jdGlvbiBmZXRjaFJlbW90ZVZlcnNpb25zKCkge1xuICAgIGlmIChmcy5leGlzdHNTeW5jKGluZm9maWxlKSkge1xuICAgICAgICBjb25zdCBqc29uID0gVXRpbHMucmVhZEpzb25Gcm9tRmlsZShpbmZvZmlsZSk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB0ID0ganNvbi5mZXRjaFRpbWU7XG4gICAgICAgICAgICBjb25zdCBjdCA9IERhdGUucGFyc2UobmV3IERhdGUoKSk7XG4gICAgICAgICAgICBpZiAoJ3VuZGVmaW5lZCcgPT0gdHlwZW9mIHQgfHwgY3QgLSB0ID4gMTAwMCAqIDYwICogNjAgKiAyNCkgeyAvLyBvbmUgZGF5XG4gICAgICAgICAgICAgICAganNvbi5mZXRjaFRpbWUgPSBjdDtcbiAgICAgICAgICAgICAgICBVdGlscy53cml0ZUpzb25Ub0ZpbGUoaW5mb2ZpbGUsIGpzb24pO1xuICAgICAgICAgICAgICAgIFV0aWxzLmxvYWRSZW1vdGVWZXJzaW9ucygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBFZGl0b3IubG9nKCdTREtCb3ggR1VJIEZvciBDcmVhdG9yIGlzIHRoZSBsYXRlc3QgdmVyc2lvbi4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY3QgPSBEYXRlLnBhcnNlKG5ldyBEYXRlKCkpO1xuICAgICAgICBjb25zdCBqc29uID0ge1xuICAgICAgICAgICAgZmV0Y2hUaW1lOiBjdFxuICAgICAgICB9XG4gICAgICAgIFV0aWxzLndyaXRlSnNvblRvRmlsZShpbmZvZmlsZSwganNvbik7XG4gICAgICAgIFV0aWxzLmxvYWRSZW1vdGVWZXJzaW9ucygpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gbmVlZFVwZGF0ZSgpIHtcbiAgICBjb25zdCBqc29uID0gVXRpbHMucmVhZEpzb25Gcm9tRmlsZShpbmZvZmlsZSk7XG4gICAgaWYgKG51bGwgPT0ganNvbikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBsZXQgdXBkYXRlID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgICBpZiAoVXRpbHMuY29tcGFyZVZlcnNpb25zKGpzb24udmVyc2lvbi5pbnN0YWxsZXIubG9jYWwsIGpzb24udmVyc2lvbi5pbnN0YWxsZXIucmVtb3RlKSA+PSAwICYmXG4gICAgICAgICAgICBVdGlscy5jb21wYXJlVmVyc2lvbnMoanNvbi52ZXJzaW9uLmd1aS5sb2NhbCwganNvbi52ZXJzaW9uLmd1aS5yZW1vdGUpID49IDApIHtcbiAgICAgICAgICAgIHVwZGF0ZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB1cGRhdGUgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICghdXBkYXRlKSB7XG4gICAgICAgIGZldGNoUmVtb3RlVmVyc2lvbnMoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdXBkYXRlO1xufVxuXG5tb2R1bGUuZXhwb3J0cy5sYXVuY2ggPSBsYXVuY2g7XG5tb2R1bGUuZXhwb3J0cy5zZW5kTXNnVG9TQldpbiA9IHNlbmRNc2dUb1NCV2luO1xubW9kdWxlLmV4cG9ydHMubG9hZCA9IGxvYWQ7XG5tb2R1bGUuZXhwb3J0cy51bmxvYWQgPSB1bmxvYWQ7XG5tb2R1bGUuZXhwb3J0cy5uZWVkVXBkYXRlID0gbmVlZFVwZGF0ZTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main/mainForStandalone.js\n");

/***/ }),

/***/ "./src/shared/CLI.js":
/*!***************************!*\
  !*** ./src/shared/CLI.js ***!
  \***************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar child_process = __webpack_require__(/*! child_process */ \"child_process\");\n\nvar _instance;\n\nmodule.exports = /*#__PURE__*/function () {\n  function CLI() {\n    _classCallCheck(this, CLI);\n\n    this._process = new Map();\n  }\n\n  _createClass(CLI, [{\n    key: \"exec\",\n    value: function exec(args, options, callback) {\n      this._nextId++;\n      var cmd = args.shift();\n      var tag = options.tag;\n      delete options.tag;\n      options.shell = true;\n      var child = child_process.spawn(cmd, args, options);\n      console.log(\"[CLI] spawn (\".concat(child.pid, \"): \").concat(cmd, \" \").concat(args.join(\" \")));\n      var procs = this._process;\n      procs.set(tag, child);\n      var stdout = [];\n      var stderr = [];\n      child.stdout.on('data', function (data) {\n        stdout.push(data);\n\n        if (_typeof(callback) === 'object') {\n          callback.stdout(data);\n        }\n      });\n      child.stderr.on('data', function (data) {\n        stderr.push(data);\n\n        if (_typeof(callback) === 'object') {\n          callback.stderr(data);\n        }\n      });\n      child.on('error', function (err) {\n        if (procs.has(tag)) {\n          procs[\"delete\"](tag);\n        }\n\n        if (_typeof(callback) === 'object') {\n          callback.error(err, stdout.join(''), stderr.join(''));\n        } else if (typeof callback === 'function') {\n          callback(err, stdout.join(''), stderr.join(''));\n        }\n      });\n      child.on('exit', function (code, signal) {\n        signal = signal ? signal : '';\n        console.log(\"[CLI] exit (\".concat(child.pid, \") \").concat(code, \" \").concat(signal));\n\n        if (procs.has(tag)) {\n          procs[\"delete\"](tag);\n        }\n\n        if (_typeof(callback) === 'object') {\n          callback.exit(stdout.join(''), stderr.join(''));\n        } else if (typeof callback === 'function') {\n          callback(null, stdout.join(''), stderr.join(''));\n        }\n      });\n    }\n  }, {\n    key: \"kill\",\n    value: function kill(tag) {\n      if (this._process.has(tag)) {\n        var child = this._process[tag];\n\n        if (child) {\n          child.kill();\n        }\n\n        this._process[\"delete\"](tag);\n      }\n    }\n  }, {\n    key: \"query\",\n    value: function query(tag) {\n      return this._process.has(tag);\n    }\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (!_instance) {\n        _instance = new CLI();\n      }\n\n      return _instance;\n    }\n  }]);\n\n  return CLI;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGtib3gtZ3VpLy4vc3JjL3NoYXJlZC9DTEkuanM/NzE1YyJdLCJuYW1lcyI6WyJjaGlsZF9wcm9jZXNzIiwicmVxdWlyZSIsIl9pbnN0YW5jZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJfcHJvY2VzcyIsIk1hcCIsImFyZ3MiLCJvcHRpb25zIiwiY2FsbGJhY2siLCJfbmV4dElkIiwiY21kIiwic2hpZnQiLCJ0YWciLCJzaGVsbCIsImNoaWxkIiwic3Bhd24iLCJjb25zb2xlIiwibG9nIiwicGlkIiwiam9pbiIsInByb2NzIiwic2V0Iiwic3Rkb3V0Iiwic3RkZXJyIiwib24iLCJkYXRhIiwicHVzaCIsImVyciIsImhhcyIsImVycm9yIiwiY29kZSIsInNpZ25hbCIsImV4aXQiLCJraWxsIiwiQ0xJIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLElBQU1BLGFBQWEsR0FBR0MsbUJBQU8sQ0FBQyxvQ0FBRCxDQUE3Qjs7QUFFQSxJQUFJQyxTQUFKOztBQUVBQyxNQUFNLENBQUNDLE9BQVA7QUFRSSxpQkFBYztBQUFBOztBQUNWLFNBQUtDLFFBQUwsR0FBZ0IsSUFBSUMsR0FBSixFQUFoQjtBQUNIOztBQVZMO0FBQUE7QUFBQSxXQVlJLGNBQUtDLElBQUwsRUFBV0MsT0FBWCxFQUFvQkMsUUFBcEIsRUFBOEI7QUFDMUIsV0FBS0MsT0FBTDtBQUVBLFVBQUlDLEdBQUcsR0FBR0osSUFBSSxDQUFDSyxLQUFMLEVBQVY7QUFDQSxVQUFJQyxHQUFHLEdBQUdMLE9BQU8sQ0FBQ0ssR0FBbEI7QUFDQSxhQUFPTCxPQUFPLENBQUNLLEdBQWY7QUFDQUwsYUFBTyxDQUFDTSxLQUFSLEdBQWdCLElBQWhCO0FBRUEsVUFBSUMsS0FBSyxHQUFHZixhQUFhLENBQUNnQixLQUFkLENBQW9CTCxHQUFwQixFQUF5QkosSUFBekIsRUFBK0JDLE9BQS9CLENBQVo7QUFDQVMsYUFBTyxDQUFDQyxHQUFSLHdCQUE0QkgsS0FBSyxDQUFDSSxHQUFsQyxnQkFBMkNS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QUNIOztBQUNELGFBQUs3QixRQUFMLFdBQXFCUSxHQUFyQjtBQUNIO0FBQ0o7QUExRUw7QUFBQTtBQUFBLFdBNEVJLGVBQU1BLEdBQU4sRUFBVztBQUNQLGFBQU8sS0FBS1IsUUFBTCxDQUFjd0IsR0FBZCxDQUFrQmhCLEdBQWxCLENBQVA7QUFDSDtBQTlFTDtBQUFBO0FBQUEsV0FDSSx1QkFBcUI7QUFDakIsVUFBSSxDQUFDWCxTQUFMLEVBQWdCO0FBQ1pBLGlCQUFTLEdBQUcsSUFBSWlDLEdBQUosRUFBWjtBQUNIOztBQUNELGFBQU9qQyxTQUFQO0FBQ0g7QUFOTDs7QUFBQTtBQUFBIiwiZmlsZSI6Ii4vc3JjL3NoYXJlZC9DTEkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjaGlsZF9wcm9jZXNzID0gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpO1xuXG5sZXQgX2luc3RhbmNlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIENMSSB7XG4gICAgc3RhdGljIGdldEluc3RhbmNlKCkge1xuICAgICAgICBpZiAoIV9pbnN0YW5jZSkge1xuICAgICAgICAgICAgX2luc3RhbmNlID0gbmV3IENMSSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfaW5zdGFuY2U7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX3Byb2Nlc3MgPSBuZXcgTWFwKCk7XG4gICAgfVxuXG4gICAgZXhlYyhhcmdzLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgICB0aGlzLl9uZXh0SWQrKztcblxuICAgICAgICBsZXQgY21kID0gYXJncy5zaGlmdCgpO1xuICAgICAgICBsZXQgdGFnID0gb3B0aW9ucy50YWc7XG4gICAgICAgIGRlbGV0ZSBvcHRpb25zLnRhZztcbiAgICAgICAgb3B0aW9ucy5zaGVsbCA9IHRydWU7XG5cbiAgICAgICAgbGV0IGNoaWxkID0gY2hpbGRfcHJvY2Vzcy5zcGF3bihjbWQsIGFyZ3MsIG9wdGlvbnMpO1xuICAgICAgICBjb25zb2xlLmxvZyhgW0NMSV0gc3Bhd24gKCR7Y2hpbGQucGlkfSk6ICR7Y21kfSAke2FyZ3Muam9pbihcIiBcIil9YCk7XG5cbiAgICAgICAgbGV0IHByb2NzID0gdGhpcy5fcHJvY2VzcztcbiAgICAgICAgcHJvY3Muc2V0KHRhZywgY2hpbGQpO1xuXG4gICAgICAgIGxldCBzdGRvdXQgPSBbXTtcbiAgICAgICAgbGV0IHN0ZGVyciA9IFtdO1xuXG4gICAgICAgIGNoaWxkLnN0ZG91dC5vbignZGF0YScsIChkYXRhKSA9PiB7XG4gICAgICAgICAgICBzdGRvdXQucHVzaChkYXRhKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2suc3Rkb3V0KGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgY2hpbGQuc3RkZXJyLm9uKCdkYXRhJywgKGRhdGEpID0+IHtcbiAgICAgICAgICAgIHN0ZGVyci5wdXNoKGRhdGEpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjay5zdGRlcnIoZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNoaWxkLm9uKCdlcnJvcicsIChlcnIpID0+IHtcbiAgICAgICAgICAgIGlmIChwcm9jcy5oYXModGFnKSkge1xuICAgICAgICAgICAgICAgIHByb2NzLmRlbGV0ZSh0YWcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjay5lcnJvcihlcnIsIHN0ZG91dC5qb2luKCcnKSwgc3RkZXJyLmpvaW4oJycpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyLCBzdGRvdXQuam9pbignJyksIHN0ZGVyci5qb2luKCcnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjaGlsZC5vbignZXhpdCcsIChjb2RlLCBzaWduYWwpID0+IHtcbiAgICAgICAgICAgIHNpZ25hbCA9IHNpZ25hbCA/IHNpZ25hbCA6ICcnO1xuICAgICAgICAgICAgY29uc29sZS5sb2coYFtDTEldIGV4aXQgKCR7Y2hpbGQucGlkfSkgJHtjb2RlfSAke3NpZ25hbH1gKTtcbiAgICAgICAgICAgIGlmIChwcm9jcy5oYXModGFnKSkge1xuICAgICAgICAgICAgICAgIHByb2NzLmRlbGV0ZSh0YWcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjay5leGl0KHN0ZG91dC5qb2luKCcnKSwgc3RkZXJyLmpvaW4oJycpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgc3Rkb3V0LmpvaW4oJycpLCBzdGRlcnIuam9pbignJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBraWxsKHRhZykge1xuICAgICAgICBpZiAodGhpcy5fcHJvY2Vzcy5oYXModGFnKSkge1xuICAgICAgICAgICAgbGV0IGNoaWxkID0gdGhpcy5fcHJvY2Vzc1t0YWddO1xuICAgICAgICAgICAgaWYgKGNoaWxkKSB7XG4gICAgICAgICAgICAgICAgY2hpbGQua2lsbCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fcHJvY2Vzcy5kZWxldGUodGFnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHF1ZXJ5KHRhZykge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJvY2Vzcy5oYXModGFnKTtcbiAgICB9XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/shared/CLI.js\n");

/***/ }),

/***/ "./src/shared/Config.js":
/*!******************************!*\
  !*** ./src/shared/Config.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Config\": () => (/* binding */ Config)\n/* harmony export */ });\nvar Config = {\n  version: '1.5.2',\n  beta: false\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGtib3gtZ3VpLy4vc3JjL3NoYXJlZC9Db25maWcuanM/N2ZkYSJdLCJuYW1lcyI6WyJDb25maWciLCJ2ZXJzaW9uIiwiYmV0YSJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQUlBLE1BQU0sR0FBRztBQUNUQyxTQUFPLEVBQUUsT0FEQTtBQUVUQyxNQUFJLEVBQUU7QUFGRyxDQUFiIiwiZmlsZSI6Ii4vc3JjL3NoYXJlZC9Db25maWcuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgQ29uZmlnID0ge1xuICAgIHZlcnNpb246ICcxLjUuMicsXG4gICAgYmV0YTogZmFsc2Vcbn1cblxuZXhwb3J0IHtcbiAgICBDb25maWdcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/shared/Config.js\n");

/***/ }),

/***/ "./src/shared/Utils.js":
/*!*****************************!*\
  !*** ./src/shared/Utils.js ***!
  \*****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar os = __webpack_require__(/*! os */ \"os\");\n\nvar path = __webpack_require__(/*! path */ \"path\");\n\nvar fs = __webpack_require__(/*! fs */ \"fs\");\n\nvar fse = __webpack_require__(/*! fs-extra */ \"./node_modules/fs-extra/lib/index.js\");\n\nvar http = __webpack_require__(/*! http */ \"http\");\n\nvar yauzl = __webpack_require__(/*! yauzl */ \"./node_modules/yauzl/index.js\");\n\nvar CLI = __webpack_require__(/*! ./CLI */ \"./src/shared/CLI.js\");\n\nvar deepmerge = __webpack_require__(/*! deepmerge */ \"./node_modules/deepmerge/dist/cjs.js\");\n\nvar projectRoot = null;\nvar downloadHost = null;\n\nvar Utils = /*#__PURE__*/function () {\n  function Utils() {\n    _classCallCheck(this, Utils);\n  }\n\n  _createClass(Utils, null, [{\n    key: \"checkPython\",\n    value: function checkPython(cb) {\n      var cli = CLI.getInstance();\n      var tag = 'check python';\n\n      if (cli.query(tag)) {\n        return;\n      }\n\n      var args = ['python', '--version'];\n      var options = {\n        tag: tag\n      };\n      cli.exec(args, options, {\n        stdout: function stdout(data) {},\n        stderr: function stderr(data) {},\n        exit: function exit(stdout, stderr) {\n          if (stderr && stderr.includes(\"Python 2.7\")) {\n            cb(\"success\");\n          } else {\n            cb(\"failed\", \"Python 2.7 is not installed\");\n          }\n        },\n        error: function error(err, stdout, stderr) {\n          cb('failed', 'Python 2.7 is not installed');\n        }\n      });\n    }\n    /******* Installer **********/\n\n  }, {\n    key: \"installerInstalled\",\n    value: function installerInstalled() {\n      var sdkbox_bin_path = path.join(os.homedir(), '.sdkbox', 'bin', 'sdkbox');\n      var stats = null;\n\n      try {\n        stats = fs.statSync(sdkbox_bin_path);\n      } catch (e) {\n        stats = null;\n      }\n\n      if (!stats) {\n        return false;\n      }\n\n      return stats.isFile();\n    }\n  }, {\n    key: \"needUpdate\",\n    value: function needUpdate() {\n      'sdkbox version--jsonapi';\n\n      var infofile = path.join(os.homedir(), '.sdkbox', 'creator', 'data', 'info.json');\n\n      try {\n        var contents = fs.readFileSync(infofile);\n        var json = JSON.parse(contents);\n\n        if (json.version.installer.local == json.version.installer.remote && json.version.gui.local == json.version.gui.remote) {\n          return false;\n        } else {\n          return true;\n        }\n      } catch (e) {\n        return true;\n      }\n    }\n  }, {\n    key: \"loadVersions\",\n    value: function loadVersions() {\n      Utils.loadLocalInstallerVersion();\n      Utils.loadLocalGUIVersion();\n      Utils.loadRemoteInstallerVersion();\n      Utils.loadRemoteGUIVersion();\n    }\n  }, {\n    key: \"loadRemoteVersions\",\n    value: function loadRemoteVersions() {\n      Utils.loadRemoteInstallerVersion();\n      Utils.loadRemoteGUIVersion();\n    }\n  }, {\n    key: \"loadLocalInstallerVersion\",\n    value: function loadLocalInstallerVersion() {\n      var cli = CLI.getInstance();\n      var tag = 'sdkbox version';\n\n      if (cli.query(tag)) {\n        return;\n      }\n\n      var sdkbox_path = Utils.getInstallerPath();\n      var args = [sdkbox_path, '--local', '--jsonapi', 'version'];\n      var options = {\n        tag: tag\n      };\n      cli.exec(args, options, {\n        stdout: function stdout(data) {\n          try {\n            var json = JSON.parse(data);\n            var v = {\n              'version': {\n                'installer': {\n                  'local': json.version\n                }\n              }\n            };\n            Utils.mergeAndSaveVersions(v);\n          } catch (e) {\n            console.log('loadLocalInstallerVersion:' + e);\n          }\n        },\n        stderr: function stderr(data) {},\n        exit: function exit(stdout, stderr) {},\n        error: function error(err, stdout, stderr) {}\n      });\n    }\n  }, {\n    key: \"loadRemoteInstallerVersion\",\n    value: function loadRemoteInstallerVersion() {\n      var url = \"\".concat(Utils.getDownloadHost(), \"installer/v1/manifest.json\");\n      Utils.getJson(url, function (json, error) {\n        if (error) {\n          console.log(error);\n        } else if (json) {\n          var keys = Object.keys(json.packages.SDKBOX.versions);\n          var v = {\n            'version': {\n              'installer': {\n                'remote': keys[0]\n              }\n            }\n          };\n          Utils.mergeAndSaveVersions(v);\n        }\n      });\n    }\n  }, {\n    key: \"loadLocalGUIVersion\",\n    value: function loadLocalGUIVersion() {\n      var infofile = path.join(os.homedir(), '.sdkbox', 'creator', 'app', 'package.json');\n      fse.readJson(infofile).then(function (json) {\n        var v = {\n          'version': {\n            'gui': {\n              'local': json.version\n            }\n          }\n        };\n        Utils.mergeAndSaveVersions(v);\n      })[\"catch\"](function (err) {});\n    }\n  }, {\n    key: \"loadRemoteGUIVersion\",\n    value: function loadRemoteGUIVersion() {\n      // const url = 'http://download.sdkbox.com/gui/creator/sdkbox-1.0.4.zip';\n      var url = \"\".concat(Utils.getDownloadHost(), \"gui/creator/version\");\n      Utils.getJson(url, function (json, error) {\n        if (error) {\n          console.log(error);\n          return;\n        } else if (json) {\n          var v = {\n            'version': {\n              'gui': {\n                'remote': json.version\n              }\n            }\n          };\n          Utils.mergeAndSaveVersions(v);\n        }\n      });\n    }\n  }, {\n    key: \"mergeAndSaveVersions\",\n    value: function mergeAndSaveVersions(data, jsonfile) {\n      var infofile = path.join(os.homedir(), '.sdkbox', 'creator', 'data', 'info.json');\n\n      if (jsonfile) {\n        infofile = jsonfile;\n      }\n\n      fse.pathExists(infofile).then(function (exist) {\n        if (exist) {\n          fse.readJson(infofile).then(function (json) {\n            var contents = JSON.stringify(deepmerge(json, data));\n            Utils.saveToFile(infofile, contents);\n          })[\"catch\"](function (err) {\n            console.error(err);\n          });\n        } else {\n          var contents = JSON.stringify(data);\n          Utils.saveToFile(infofile, contents);\n        }\n      })[\"catch\"](function (err) {\n        console.log(err);\n      });\n    }\n  }, {\n    key: \"installInstaller\",\n    value: function installInstaller(cb) {\n      //const install_cmd = \"python -c \\\"import urllib; s = urllib.urlopen('https://raw.githubusercontent.com/sdkbox-doc/en/master/install/install.py').read(); exec s\\\"\";\n      var cli = CLI.getInstance();\n      var tag = 'install sdkbox';\n\n      if (cli.query(tag)) {\n        return;\n      }\n\n      var args = ['python', '-c', \"import urllib; s = urllib.urlopen('https://raw.githubusercontent.com/sdkbox-doc/en/master/install/install.py').read(); exec s\"];\n      var options = {\n        tag: tag\n      };\n      cli.exec(args, options, {\n        stdout: function stdout(data) {\n          cb('loading');\n        },\n        stderr: function stderr(data) {},\n        exit: function exit(stdout, stderr) {\n          cb('success');\n        },\n        error: function error(err, stdout, stderr) {\n          cb('failed', 'install SDKBox Installer failed');\n        }\n      });\n    }\n  }, {\n    key: \"installInstallerIf\",\n    value: function installInstallerIf(cb) {\n      if (installerInstalled()) {\n        return;\n      }\n\n      installInstaller(cb);\n    }\n  }, {\n    key: \"updateInstaller\",\n    value: function updateInstaller(cb) {\n      var cli = CLI.getInstance();\n      var tag = 'sdkbox version';\n\n      if (cli.query(tag)) {\n        return;\n      }\n\n      var sdkbox_path = Utils.getInstallerPath();\n      var args = [sdkbox_path, '--alwaysupdate', '--nohelp', 'version'];\n      var options = {\n        tag: tag\n      };\n      cli.exec(args, options, {\n        stdout: function stdout(data) {\n          cb('loading');\n        },\n        stderr: function stderr(data) {},\n        exit: function exit(stdout, stderr) {\n          cb('success');\n        },\n        error: function error(err, stdout, stderr) {\n          cb('failed', 'update SDKBox Installer failed');\n        }\n      });\n    }\n  }, {\n    key: \"getInstallerPath\",\n    value: function getInstallerPath() {\n      var sdkbox_bin_path = path.join(os.homedir(), '.sdkbox', 'bin', 'sdkbox');\n\n      if ('win32' == os.platform()) {\n        sdkbox_bin_path += '.bat';\n      }\n\n      if (Utils.fileExist(sdkbox_bin_path)) {\n        return sdkbox_bin_path;\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"getSdkboxPluginsPath\",\n    value: function getSdkboxPluginsPath(plugin) {\n      var folder = path.join(os.homedir(), '.sdkbox', 'plugins');\n\n      if (plugin) {\n        return path.join(folder, plugin);\n      } else {\n        return folder;\n      }\n    }\n  }, {\n    key: \"updateGUIMod\",\n    value: function updateGUIMod(url, fileName, cb) {\n      var tmpPath = path.join(os.homedir(), '.sdkbox', 'temp', fileName);\n      Utils.downloadFile(url, tmpPath, function (filePath, error) {\n        if (error) {\n          cb('failed', error);\n        } else {\n          //check md5?\n          //extra\n          var tmpDst = path.join(os.homedir(), '.sdkbox', 'temp');\n          var unzipError = null;\n          yauzl.open(tmpPath, {\n            lazyEntries: true,\n            decodeStrings: false\n          }, function (err, zipfile) {\n            if (err) {\n              cb('failed', err);\n              return;\n            }\n\n            zipfile.readEntry();\n            zipfile.on(\"error\", function (err) {\n              unzipError = err;\n            });\n            zipfile.on(\"entry\", function (entry) {\n              var fileName = entry.fileName.toString('utf8');\n\n              if (/\\/$/.test(entry.fileName)) {\n                fse.ensureDir(path.join(tmpDst, fileName), function (err) {\n                  if (err) {\n                    unzipError = err;\n                    return;\n                  }\n\n                  zipfile.readEntry();\n                });\n              } else {\n                zipfile.openReadStream(entry, function (err, readStream) {\n                  if (err) {\n                    unzipError = err;\n                    return;\n                  }\n\n                  readStream.on(\"end\", function () {\n                    zipfile.readEntry();\n                  });\n                  readStream.pipe(fse.createWriteStream(path.join(tmpDst, fileName)));\n                });\n              }\n            });\n            zipfile.on(\"end\", function () {\n              if (unzipError) {\n                cb(\"failed\", unzipError);\n              } else {\n                var srcPath = path.join(tmpDst, 'sdkbox', 'app');\n                var dstPath = path.join(os.homedir(), '.sdkbox', 'creator', 'app');\n                Utils.deleteFolderRecursive(dstPath);\n                var e = fs.renameSync(srcPath, dstPath);\n\n                if (e) {\n                  cb('failed', e.message);\n                  return;\n                }\n\n                srcPath = path.join(tmpDst, 'sdkbox', 'package.json');\n                dstPath = path.join(os.homedir(), '.sdkbox', 'creator', 'app', 'package.json');\n                Utils.deleteFolderRecursive(dstPath);\n                e = fs.renameSync(srcPath, dstPath);\n\n                if (e) {\n                  cb('failed', e.message);\n                  return;\n                }\n\n                cb('success');\n              }\n            });\n          });\n        }\n      });\n    }\n  }, {\n    key: \"downloadFile\",\n    value: function downloadFile(url, fullfilepath, cb) {\n      var redirect = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n      // redirect = redirect || 1;\n      fse.remove(fullfilepath).then(function () {\n        return fse.ensureDir(path.dirname(fullfilepath));\n      }).then(function () {\n        var file = fse.createWriteStream(fullfilepath);\n        file.on('open', function () {\n          http.get(url, function (res) {\n            var statusCode = res.statusCode;\n            var contentType = res.headers['content-type'];\n\n            if (302 == statusCode && redirect < 4 && res.headers.location) {\n              Utils.downloadFile(res.headers.location, fullfilepath, cb, redirect + 1);\n              return;\n            }\n\n            if (statusCode !== 200) {\n              cb(null, \"status code:\".concat(statusCode));\n              return;\n            } // res.setEncoding('utf8');\n\n\n            res.pipe(file); // res.on('data', (chunk) => {\n            //     file.pipe(chunk);\n            // });\n\n            res.on('end', function () {\n              file.close();\n              cb(fullfilepath, null);\n            });\n          }).on('error', function (e) {\n            console.log(e);\n            fs.unlink(fullfilepath);\n            cb(null, e.message);\n          });\n        });\n        file.on('error', function (e) {\n          console.log(e);\n        });\n      })[\"catch\"](function (e) {\n        cb(null, e.message);\n      });\n    }\n  }, {\n    key: \"saveToFile\",\n    value: function saveToFile(filePath, data) {\n      var dir_path = path.dirname(filePath);\n      fse.ensureDir(dir_path).then(function () {\n        // console.log('saveToFile %s, %O', filePath, data);\n        // Editor.log(`saveToFile ${data}`);\n        fs.writeFileSync(filePath, data);\n      });\n    }\n  }, {\n    key: \"fileExist\",\n    value: function fileExist(file) {\n      var stats;\n\n      try {\n        stats = fs.statSync(file);\n      } catch (e) {\n        stats = null;\n      }\n\n      if (!stats) {\n        return false;\n      }\n\n      return stats.isFile();\n    }\n  }, {\n    key: \"getJson\",\n    value: function getJson(url, cb) {\n      http.get(url, function (res) {\n        var statusCode = res.statusCode;\n        var contentType = res.headers['content-type'];\n\n        if (statusCode !== 200) {\n          cb(null, \"status code:\".concat(statusCode));\n          return;\n        }\n\n        res.setEncoding('utf8');\n        var rawData = '';\n        res.on('data', function (chunk) {\n          rawData += chunk;\n        });\n        res.on('end', function () {\n          try {\n            var parsedData = JSON.parse(rawData);\n            cb(parsedData, null);\n          } catch (e) {\n            cb(null, e.message);\n          }\n        });\n      }).on('error', function (e) {\n        cb(null, e.message);\n      });\n    }\n  }, {\n    key: \"compareVersions\",\n    value: function compareVersions(v1, v2) {\n      if (null == v1 && null == v2) {\n        return 0;\n      }\n\n      if (null == v1) {\n        return -1;\n      }\n\n      if (null == v2) {\n        return 1;\n      }\n\n      var v1a = v1.replace(/^v/, '').split('.');\n      var v2a = v2.replace(/^v/, '').split('.');\n      var len = Math.min(v1a.length, v2a.length);\n\n      for (var i = 0; i < len; i++) {\n        var n1 = parseInt(v1a[i] || 0, 10);\n        var n2 = parseInt(v2a[i] || 0, 10);\n        if (n1 > n2) return 1;\n        if (n2 > n1) return -1;\n      }\n\n      if (v1a.length > len) {\n        for (var _i = len; _i < v1a.length; _i++) {\n          var n = parseInt(v1a[_i] || 0, 10);\n\n          if (0 != n) {\n            return 1;\n          }\n        }\n      }\n\n      if (v2a.length > len) {\n        for (var _i2 = len; _i2 < v2a.length; _i2++) {\n          var _n = parseInt(v2a[_i2] || 0, 10);\n\n          if (0 != _n) {\n            return -1;\n          }\n        }\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"readJsonFromFile\",\n    value: function readJsonFromFile(filePath) {\n      try {\n        var contents = fs.readFileSync(filePath);\n\n        if (contents) {\n          return JSON.parse(contents);\n        }\n      } catch (e) {}\n\n      return null;\n    }\n  }, {\n    key: \"writeJsonToFile\",\n    value: function writeJsonToFile(filePath, json) {\n      fs.writeFileSync(filePath, JSON.stringify(json, 0, 4));\n    }\n  }, {\n    key: \"getProjectRoot\",\n    value: function getProjectRoot() {\n      if (null == projectRoot) {\n        if (Editor.Project && Editor.Project.path) {\n          projectRoot = Editor.Project.path;\n        }\n      }\n\n      if (null == projectRoot) {\n        if (Editor.projectInfo && Editor.projectInfo.path) {\n          projectRoot = Editor.projectInfo.path;\n        }\n      }\n\n      return projectRoot;\n    }\n  }, {\n    key: \"getDownloadHost\",\n    value: function getDownloadHost() {\n      return \"http://download.sdkbox.com/\";\n      /* disable china cdn\n      if (downloadHost) {\n          return downloadHost;\n      }\n      const mainHost = \"http://download.sdkbox.com/\";\n      const cnHost = \"http://sdkbox.anysdk.com/\";\n      const countryCheckUrl = \"http://ip-api.com/json/\";\n      const dataFile = path.join(os.homedir(), '.sdkbox', 'conf', 'loc.json');\n      const dataJson = fse.readJsonSync(dataFile, {\n          throws: false\n      });\n       if (!dataJson || ! dataJson.countryCode) {\n          setTimeout(function() {\n              Utils.getJson(countryCheckUrl, (response, error) => {\n                  if (error) {\n                      console.log(error);\n                  } else if (response) {\n                      if ('CN' == response.countryCode) {\n                          downloadHost = cnHost;\n                      } else {\n                          downloadHost = mainHost;\n                      }\n      \n                      const v = {\n                          'countryCode': response.countryCode\n                      };\n                      Utils.mergeAndSaveVersions(v, dataFile);\n                  }\n              });\n          }, 100);\n          return mainHost;\n      } else if ('CN' == dataJson.countryCode) {\n          downloadHost = cnHost;\n      } else {\n          downloadHost = mainHost;\n      }\n      return downloadHost;\n      */\n    }\n  }, {\n    key: \"deleteFolderRecursive\",\n    value: function deleteFolderRecursive(directoryPath) {\n      if (!fs.existsSync(directoryPath)) {\n        return;\n      }\n\n      if (fs.lstatSync(directoryPath).isDirectory()) {\n        fs.readdirSync(directoryPath).forEach(function (file, index) {\n          var curPath = path.join(directoryPath, file);\n          Utils.deleteFolderRecursive(curPath);\n        });\n        fs.rmdirSync(directoryPath);\n      } else {\n        // delete file\n        fs.unlinkSync(directoryPath);\n      }\n    }\n  }]);\n\n  return Utils;\n}(); // export default Utils;\n\n\nmodule.exports = Utils;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/shared/Utils.js\n");

/***/ }),

/***/ "./node_modules/buffer-crc32/index.js":
/*!********************************************!*\
  !*** ./node_modules/buffer-crc32/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var Buffer = __webpack_require__(/*! buffer */ \"buffer\").Buffer;\n\nvar CRC_TABLE = [\n  0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419,\n  0x706af48f, 0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4,\n  0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07,\n  0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de,\n  0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856,\n  0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,\n  0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4,\n  0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,\n  0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3,\n  0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a,\n  0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599,\n  0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,\n  0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190,\n  0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f,\n  0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0x0f00f934, 0x9609a88e,\n  0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,\n  0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed,\n  0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,\n  0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3,\n  0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2,\n  0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a,\n  0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5,\n  0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010,\n  0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,\n  0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17,\n  0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6,\n  0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615,\n  0x73dc1683, 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8,\n  0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1, 0xf00f9344,\n  0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,\n  0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a,\n  0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,\n  0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1,\n  0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c,\n  0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef,\n  0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,\n  0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe,\n  0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31,\n  0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c,\n  0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,\n  0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b,\n  0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242,\n  0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1,\n  0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c,\n  0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278,\n  0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7,\n  0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66,\n  0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,\n  0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605,\n  0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8,\n  0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b,\n  0x2d02ef8d\n];\n\nif (typeof Int32Array !== 'undefined') {\n  CRC_TABLE = new Int32Array(CRC_TABLE);\n}\n\nfunction ensureBuffer(input) {\n  if (Buffer.isBuffer(input)) {\n    return input;\n  }\n\n  var hasNewBufferAPI =\n      typeof Buffer.alloc === \"function\" &&\n      typeof Buffer.from === \"function\";\n\n  if (typeof input === \"number\") {\n    return hasNewBufferAPI ? Buffer.alloc(input) : new Buffer(input);\n  }\n  else if (typeof input === \"string\") {\n    return hasNewBufferAPI ? Buffer.from(input) : new Buffer(input);\n  }\n  else {\n    throw new Error(\"input must be buffer, number, or string, received \" +\n                    typeof input);\n  }\n}\n\nfunction bufferizeInt(num) {\n  var tmp = ensureBuffer(4);\n  tmp.writeInt32BE(num, 0);\n  return tmp;\n}\n\nfunction _crc32(buf, previous) {\n  buf = ensureBuffer(buf);\n  if (Buffer.isBuffer(previous)) {\n    previous = previous.readUInt32BE(0);\n  }\n  var crc = ~~previous ^ -1;\n  for (var n = 0; n < buf.length; n++) {\n    crc = CRC_TABLE[(crc ^ buf[n]) & 0xff] ^ (crc >>> 8);\n  }\n  return (crc ^ -1);\n}\n\nfunction crc32() {\n  return bufferizeInt(_crc32.apply(null, arguments));\n}\ncrc32.signed = function () {\n  return _crc32.apply(null, arguments);\n};\ncrc32.unsigned = function () {\n  return _crc32.apply(null, arguments) >>> 0;\n};\n\nmodule.exports = crc32;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGtib3gtZ3VpLy4vbm9kZV9tb2R1bGVzL2J1ZmZlci1jcmMzMi9pbmRleC5qcz8zMDg2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGFBQWEsa0RBQXdCOztBQUVyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGdCQUFnQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYnVmZmVyLWNyYzMyL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcblxudmFyIENSQ19UQUJMRSA9IFtcbiAgMHgwMDAwMDAwMCwgMHg3NzA3MzA5NiwgMHhlZTBlNjEyYywgMHg5OTA5NTFiYSwgMHgwNzZkYzQxOSxcbiAgMHg3MDZhZjQ4ZiwgMHhlOTYzYTUzNSwgMHg5ZTY0OTVhMywgMHgwZWRiODgzMiwgMHg3OWRjYjhhNCxcbiAgMHhlMGQ1ZTkxZSwgMHg5N2QyZDk4OCwgMHgwOWI2NGMyYiwgMHg3ZWIxN2NiZCwgMHhlN2I4MmQwNyxcbiAgMHg5MGJmMWQ5MSwgMHgxZGI3MTA2NCwgMHg2YWIwMjBmMiwgMHhmM2I5NzE0OCwgMHg4NGJlNDFkZSxcbiAgMHgxYWRhZDQ3ZCwgMHg2ZGRkZTRlYiwgMHhmNGQ0YjU1MSwgMHg4M2QzODVjNywgMHgxMzZjOTg1NixcbiAgMHg2NDZiYThjMCwgMHhmZDYyZjk3YSwgMHg4YTY1YzllYywgMHgxNDAxNWM0ZiwgMHg2MzA2NmNkOSxcbiAgMHhmYTBmM2Q2MywgMHg4ZDA4MGRmNSwgMHgzYjZlMjBjOCwgMHg0YzY5MTA1ZSwgMHhkNTYwNDFlNCxcbiAgMHhhMjY3NzE3MiwgMHgzYzAzZTRkMSwgMHg0YjA0ZDQ0NywgMHhkMjBkODVmZCwgMHhhNTBhYjU2YixcbiAgMHgzNWI1YThmYSwgMHg0MmIyOTg2YywgMHhkYmJiYzlkNiwgMHhhY2JjZjk0MCwgMHgzMmQ4NmNlMyxcbiAgMHg0NWRmNWM3NSwgMHhkY2Q2MGRjZiwgMHhhYmQxM2Q1OSwgMHgyNmQ5MzBhYywgMHg1MWRlMDAzYSxcbiAgMHhjOGQ3NTE4MCwgMHhiZmQwNjExNiwgMHgyMWI0ZjRiNSwgMHg1NmIzYzQyMywgMHhjZmJhOTU5OSxcbiAgMHhiOGJkYTUwZiwgMHgyODAyYjg5ZSwgMHg1ZjA1ODgwOCwgMHhjNjBjZDliMiwgMHhiMTBiZTkyNCxcbiAgMHgyZjZmN2M4NywgMHg1ODY4NGMxMSwgMHhjMTYxMWRhYiwgMHhiNjY2MmQzZCwgMHg3NmRjNDE5MCxcbiAgMHgwMWRiNzEwNiwgMHg5OGQyMjBiYywgMHhlZmQ1MTAyYSwgMHg3MWIxODU4OSwgMHgwNmI2YjUxZixcbiAgMHg5ZmJmZTRhNSwgMHhlOGI4ZDQzMywgMHg3ODA3YzlhMiwgMHgwZjAwZjkzNCwgMHg5NjA5YTg4ZSxcbiAgMHhlMTBlOTgxOCwgMHg3ZjZhMGRiYiwgMHgwODZkM2QyZCwgMHg5MTY0NmM5NywgMHhlNjYzNWMwMSxcbiAgMHg2YjZiNTFmNCwgMHgxYzZjNjE2MiwgMHg4NTY1MzBkOCwgMHhmMjYyMDA0ZSwgMHg2YzA2OTVlZCxcbiAgMHgxYjAxYTU3YiwgMHg4MjA4ZjRjMSwgMHhmNTBmYzQ1NywgMHg2NWIwZDljNiwgMHgxMmI3ZTk1MCxcbiAgMHg4YmJlYjhlYSwgMHhmY2I5ODg3YywgMHg2MmRkMWRkZiwgMHgxNWRhMmQ0OSwgMHg4Y2QzN2NmMyxcbiAgMHhmYmQ0NGM2NSwgMHg0ZGIyNjE1OCwgMHgzYWI1NTFjZSwgMHhhM2JjMDA3NCwgMHhkNGJiMzBlMixcbiAgMHg0YWRmYTU0MSwgMHgzZGQ4OTVkNywgMHhhNGQxYzQ2ZCwgMHhkM2Q2ZjRmYiwgMHg0MzY5ZTk2YSxcbiAgMHgzNDZlZDlmYywgMHhhZDY3ODg0NiwgMHhkYTYwYjhkMCwgMHg0NDA0MmQ3MywgMHgzMzAzMWRlNSxcbiAgMHhhYTBhNGM1ZiwgMHhkZDBkN2NjOSwgMHg1MDA1NzEzYywgMHgyNzAyNDFhYSwgMHhiZTBiMTAxMCxcbiAgMHhjOTBjMjA4NiwgMHg1NzY4YjUyNSwgMHgyMDZmODViMywgMHhiOTY2ZDQwOSwgMHhjZTYxZTQ5ZixcbiAgMHg1ZWRlZjkwZSwgMHgyOWQ5Yzk5OCwgMHhiMGQwOTgyMiwgMHhjN2Q3YThiNCwgMHg1OWIzM2QxNyxcbiAgMHgyZWI0MGQ4MSwgMHhiN2JkNWMzYiwgMHhjMGJhNmNhZCwgMHhlZGI4ODMyMCwgMHg5YWJmYjNiNixcbiAgMHgwM2I2ZTIwYywgMHg3NGIxZDI5YSwgMHhlYWQ1NDczOSwgMHg5ZGQyNzdhZiwgMHgwNGRiMjYxNSxcbiAgMHg3M2RjMTY4MywgMHhlMzYzMGIxMiwgMHg5NDY0M2I4NCwgMHgwZDZkNmEzZSwgMHg3YTZhNWFhOCxcbiAgMHhlNDBlY2YwYiwgMHg5MzA5ZmY5ZCwgMHgwYTAwYWUyNywgMHg3ZDA3OWViMSwgMHhmMDBmOTM0NCxcbiAgMHg4NzA4YTNkMiwgMHgxZTAxZjI2OCwgMHg2OTA2YzJmZSwgMHhmNzYyNTc1ZCwgMHg4MDY1NjdjYixcbiAgMHgxOTZjMzY3MSwgMHg2ZTZiMDZlNywgMHhmZWQ0MWI3NiwgMHg4OWQzMmJlMCwgMHgxMGRhN2E1YSxcbiAgMHg2N2RkNGFjYywgMHhmOWI5ZGY2ZiwgMHg4ZWJlZWZmOSwgMHgxN2I3YmU0MywgMHg2MGIwOGVkNSxcbiAgMHhkNmQ2YTNlOCwgMHhhMWQxOTM3ZSwgMHgzOGQ4YzJjNCwgMHg0ZmRmZjI1MiwgMHhkMWJiNjdmMSxcbiAgMHhhNmJjNTc2NywgMHgzZmI1MDZkZCwgMHg0OGIyMzY0YiwgMHhkODBkMmJkYSwgMHhhZjBhMWI0YyxcbiAgMHgzNjAzNGFmNiwgMHg0MTA0N2E2MCwgMHhkZjYwZWZjMywgMHhhODY3ZGY1NSwgMHgzMTZlOGVlZixcbiAgMHg0NjY5YmU3OSwgMHhjYjYxYjM4YywgMHhiYzY2ODMxYSwgMHgyNTZmZDJhMCwgMHg1MjY4ZTIzNixcbiAgMHhjYzBjNzc5NSwgMHhiYjBiNDcwMywgMHgyMjAyMTZiOSwgMHg1NTA1MjYyZiwgMHhjNWJhM2JiZSxcbiAgMHhiMmJkMGIyOCwgMHgyYmI0NWE5MiwgMHg1Y2IzNmEwNCwgMHhjMmQ3ZmZhNywgMHhiNWQwY2YzMSxcbiAgMHgyY2Q5OWU4YiwgMHg1YmRlYWUxZCwgMHg5YjY0YzJiMCwgMHhlYzYzZjIyNiwgMHg3NTZhYTM5YyxcbiAgMHgwMjZkOTMwYSwgMHg5YzA5MDZhOSwgMHhlYjBlMzYzZiwgMHg3MjA3Njc4NSwgMHgwNTAwNTcxMyxcbiAgMHg5NWJmNGE4MiwgMHhlMmI4N2ExNCwgMHg3YmIxMmJhZSwgMHgwY2I2MWIzOCwgMHg5MmQyOGU5YixcbiAgMHhlNWQ1YmUwZCwgMHg3Y2RjZWZiNywgMHgwYmRiZGYyMSwgMHg4NmQzZDJkNCwgMHhmMWQ0ZTI0MixcbiAgMHg2OGRkYjNmOCwgMHgxZmRhODM2ZSwgMHg4MWJlMTZjZCwgMHhmNmI5MjY1YiwgMHg2ZmIwNzdlMSxcbiAgMHgxOGI3NDc3NywgMHg4ODA4NWFlNiwgMHhmZjBmNmE3MCwgMHg2NjA2M2JjYSwgMHgxMTAxMGI1YyxcbiAgMHg4ZjY1OWVmZiwgMHhmODYyYWU2OSwgMHg2MTZiZmZkMywgMHgxNjZjY2Y0NSwgMHhhMDBhZTI3OCxcbiAgMHhkNzBkZDJlZSwgMHg0ZTA0ODM1NCwgMHgzOTAzYjNjMiwgMHhhNzY3MjY2MSwgMHhkMDYwMTZmNyxcbiAgMHg0OTY5NDc0ZCwgMHgzZTZlNzdkYiwgMHhhZWQxNmE0YSwgMHhkOWQ2NWFkYywgMHg0MGRmMGI2NixcbiAgMHgzN2Q4M2JmMCwgMHhhOWJjYWU1MywgMHhkZWJiOWVjNSwgMHg0N2IyY2Y3ZiwgMHgzMGI1ZmZlOSxcbiAgMHhiZGJkZjIxYywgMHhjYWJhYzI4YSwgMHg1M2IzOTMzMCwgMHgyNGI0YTNhNiwgMHhiYWQwMzYwNSxcbiAgMHhjZGQ3MDY5MywgMHg1NGRlNTcyOSwgMHgyM2Q5NjdiZiwgMHhiMzY2N2EyZSwgMHhjNDYxNGFiOCxcbiAgMHg1ZDY4MWIwMiwgMHgyYTZmMmI5NCwgMHhiNDBiYmUzNywgMHhjMzBjOGVhMSwgMHg1YTA1ZGYxYixcbiAgMHgyZDAyZWY4ZFxuXTtcblxuaWYgKHR5cGVvZiBJbnQzMkFycmF5ICE9PSAndW5kZWZpbmVkJykge1xuICBDUkNfVEFCTEUgPSBuZXcgSW50MzJBcnJheShDUkNfVEFCTEUpO1xufVxuXG5mdW5jdGlvbiBlbnN1cmVCdWZmZXIoaW5wdXQpIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihpbnB1dCkpIHtcbiAgICByZXR1cm4gaW5wdXQ7XG4gIH1cblxuICB2YXIgaGFzTmV3QnVmZmVyQVBJID1cbiAgICAgIHR5cGVvZiBCdWZmZXIuYWxsb2MgPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgICAgdHlwZW9mIEJ1ZmZlci5mcm9tID09PSBcImZ1bmN0aW9uXCI7XG5cbiAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJudW1iZXJcIikge1xuICAgIHJldHVybiBoYXNOZXdCdWZmZXJBUEkgPyBCdWZmZXIuYWxsb2MoaW5wdXQpIDogbmV3IEJ1ZmZlcihpbnB1dCk7XG4gIH1cbiAgZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIGhhc05ld0J1ZmZlckFQSSA/IEJ1ZmZlci5mcm9tKGlucHV0KSA6IG5ldyBCdWZmZXIoaW5wdXQpO1xuICB9XG4gIGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcImlucHV0IG11c3QgYmUgYnVmZmVyLCBudW1iZXIsIG9yIHN0cmluZywgcmVjZWl2ZWQgXCIgK1xuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgaW5wdXQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJ1ZmZlcml6ZUludChudW0pIHtcbiAgdmFyIHRtcCA9IGVuc3VyZUJ1ZmZlcig0KTtcbiAgdG1wLndyaXRlSW50MzJCRShudW0sIDApO1xuICByZXR1cm4gdG1wO1xufVxuXG5mdW5jdGlvbiBfY3JjMzIoYnVmLCBwcmV2aW91cykge1xuICBidWYgPSBlbnN1cmVCdWZmZXIoYnVmKTtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihwcmV2aW91cykpIHtcbiAgICBwcmV2aW91cyA9IHByZXZpb3VzLnJlYWRVSW50MzJCRSgwKTtcbiAgfVxuICB2YXIgY3JjID0gfn5wcmV2aW91cyBeIC0xO1xuICBmb3IgKHZhciBuID0gMDsgbiA8IGJ1Zi5sZW5ndGg7IG4rKykge1xuICAgIGNyYyA9IENSQ19UQUJMRVsoY3JjIF4gYnVmW25dKSAmIDB4ZmZdIF4gKGNyYyA+Pj4gOCk7XG4gIH1cbiAgcmV0dXJuIChjcmMgXiAtMSk7XG59XG5cbmZ1bmN0aW9uIGNyYzMyKCkge1xuICByZXR1cm4gYnVmZmVyaXplSW50KF9jcmMzMi5hcHBseShudWxsLCBhcmd1bWVudHMpKTtcbn1cbmNyYzMyLnNpZ25lZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIF9jcmMzMi5hcHBseShudWxsLCBhcmd1bWVudHMpO1xufTtcbmNyYzMyLnVuc2lnbmVkID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX2NyYzMyLmFwcGx5KG51bGwsIGFyZ3VtZW50cykgPj4+IDA7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNyYzMyO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/buffer-crc32/index.js\n");

/***/ }),

/***/ "./node_modules/deepmerge/dist/cjs.js":
/*!********************************************!*\
  !*** ./node_modules/deepmerge/dist/cjs.js ***!
  \********************************************/
/***/ ((module) => {

"use strict";
eval("\n\nvar isMergeableObject = function isMergeableObject(value) {\n\treturn isNonNullObject(value)\n\t\t&& !isSpecial(value)\n};\n\nfunction isNonNullObject(value) {\n\treturn !!value && typeof value === 'object'\n}\n\nfunction isSpecial(value) {\n\tvar stringValue = Object.prototype.toString.call(value);\n\n\treturn stringValue === '[object RegExp]'\n\t\t|| stringValue === '[object Date]'\n\t\t|| isReactElement(value)\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n\treturn value.$$typeof === REACT_ELEMENT_TYPE\n}\n\nfunction emptyTarget(val) {\n\treturn Array.isArray(val) ? [] : {}\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n\treturn (options.clone !== false && options.isMergeableObject(value))\n\t\t? deepmerge(emptyTarget(value), value, options)\n\t\t: value\n}\n\nfunction defaultArrayMerge(target, source, options) {\n\treturn target.concat(source).map(function(element) {\n\t\treturn cloneUnlessOtherwiseSpecified(element, options)\n\t})\n}\n\nfunction getMergeFunction(key, options) {\n\tif (!options.customMerge) {\n\t\treturn deepmerge\n\t}\n\tvar customMerge = options.customMerge(key);\n\treturn typeof customMerge === 'function' ? customMerge : deepmerge\n}\n\nfunction getEnumerableOwnPropertySymbols(target) {\n\treturn Object.getOwnPropertySymbols\n\t\t? Object.getOwnPropertySymbols(target).filter(function(symbol) {\n\t\t\treturn target.propertyIsEnumerable(symbol)\n\t\t})\n\t\t: []\n}\n\nfunction getKeys(target) {\n\treturn Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))\n}\n\nfunction propertyIsOnObject(object, property) {\n\ttry {\n\t\treturn property in object\n\t} catch(_) {\n\t\treturn false\n\t}\n}\n\n// Protects from prototype poisoning and unexpected merging up the prototype chain.\nfunction propertyIsUnsafe(target, key) {\n\treturn propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,\n\t\t&& !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,\n\t\t\t&& Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.\n}\n\nfunction mergeObject(target, source, options) {\n\tvar destination = {};\n\tif (options.isMergeableObject(target)) {\n\t\tgetKeys(target).forEach(function(key) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n\t\t});\n\t}\n\tgetKeys(source).forEach(function(key) {\n\t\tif (propertyIsUnsafe(target, key)) {\n\t\t\treturn\n\t\t}\n\n\t\tif (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {\n\t\t\tdestination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n\t\t} else {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n\t\t}\n\t});\n\treturn destination\n}\n\nfunction deepmerge(target, source, options) {\n\toptions = options || {};\n\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\n\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\n\t// cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()\n\t// implementations can use it. The caller may not replace it.\n\toptions.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;\n\n\tvar sourceIsArray = Array.isArray(source);\n\tvar targetIsArray = Array.isArray(target);\n\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\tif (!sourceAndTargetTypesMatch) {\n\t\treturn cloneUnlessOtherwiseSpecified(source, options)\n\t} else if (sourceIsArray) {\n\t\treturn options.arrayMerge(target, source, options)\n\t} else {\n\t\treturn mergeObject(target, source, options)\n\t}\n}\n\ndeepmerge.all = function deepmergeAll(array, options) {\n\tif (!Array.isArray(array)) {\n\t\tthrow new Error('first argument should be an array')\n\t}\n\n\treturn array.reduce(function(prev, next) {\n\t\treturn deepmerge(prev, next, options)\n\t}, {})\n};\n\nvar deepmerge_1 = deepmerge;\n\nmodule.exports = deepmerge_1;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGtib3gtZ3VpLy4vbm9kZV9tb2R1bGVzL2RlZXBtZXJnZS9kaXN0L2Nqcy5qcz8zYzRlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUUsSUFBSTtBQUNOOztBQUVBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2RlZXBtZXJnZS9kaXN0L2Nqcy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGlzTWVyZ2VhYmxlT2JqZWN0ID0gZnVuY3Rpb24gaXNNZXJnZWFibGVPYmplY3QodmFsdWUpIHtcblx0cmV0dXJuIGlzTm9uTnVsbE9iamVjdCh2YWx1ZSlcblx0XHQmJiAhaXNTcGVjaWFsKHZhbHVlKVxufTtcblxuZnVuY3Rpb24gaXNOb25OdWxsT2JqZWN0KHZhbHVlKSB7XG5cdHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCdcbn1cblxuZnVuY3Rpb24gaXNTcGVjaWFsKHZhbHVlKSB7XG5cdHZhciBzdHJpbmdWYWx1ZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG5cblx0cmV0dXJuIHN0cmluZ1ZhbHVlID09PSAnW29iamVjdCBSZWdFeHBdJ1xuXHRcdHx8IHN0cmluZ1ZhbHVlID09PSAnW29iamVjdCBEYXRlXSdcblx0XHR8fCBpc1JlYWN0RWxlbWVudCh2YWx1ZSlcbn1cblxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iL2I1YWM5NjNmYjc5MWQxMjk4ZTdmMzk2MjM2MzgzYmM5NTVmOTE2YzEvc3JjL2lzb21vcnBoaWMvY2xhc3NpYy9lbGVtZW50L1JlYWN0RWxlbWVudC5qcyNMMjEtTDI1XG52YXIgY2FuVXNlU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuZm9yO1xudmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9IGNhblVzZVN5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSA6IDB4ZWFjNztcblxuZnVuY3Rpb24gaXNSZWFjdEVsZW1lbnQodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEVcbn1cblxuZnVuY3Rpb24gZW1wdHlUYXJnZXQodmFsKSB7XG5cdHJldHVybiBBcnJheS5pc0FycmF5KHZhbCkgPyBbXSA6IHt9XG59XG5cbmZ1bmN0aW9uIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHZhbHVlLCBvcHRpb25zKSB7XG5cdHJldHVybiAob3B0aW9ucy5jbG9uZSAhPT0gZmFsc2UgJiYgb3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCh2YWx1ZSkpXG5cdFx0PyBkZWVwbWVyZ2UoZW1wdHlUYXJnZXQodmFsdWUpLCB2YWx1ZSwgb3B0aW9ucylcblx0XHQ6IHZhbHVlXG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRBcnJheU1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG5cdHJldHVybiB0YXJnZXQuY29uY2F0KHNvdXJjZSkubWFwKGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0XHRyZXR1cm4gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoZWxlbWVudCwgb3B0aW9ucylcblx0fSlcbn1cblxuZnVuY3Rpb24gZ2V0TWVyZ2VGdW5jdGlvbihrZXksIG9wdGlvbnMpIHtcblx0aWYgKCFvcHRpb25zLmN1c3RvbU1lcmdlKSB7XG5cdFx0cmV0dXJuIGRlZXBtZXJnZVxuXHR9XG5cdHZhciBjdXN0b21NZXJnZSA9IG9wdGlvbnMuY3VzdG9tTWVyZ2Uoa2V5KTtcblx0cmV0dXJuIHR5cGVvZiBjdXN0b21NZXJnZSA9PT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbU1lcmdlIDogZGVlcG1lcmdlXG59XG5cbmZ1bmN0aW9uIGdldEVudW1lcmFibGVPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSB7XG5cdHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzXG5cdFx0PyBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkuZmlsdGVyKGZ1bmN0aW9uKHN5bWJvbCkge1xuXHRcdFx0cmV0dXJuIHRhcmdldC5wcm9wZXJ0eUlzRW51bWVyYWJsZShzeW1ib2wpXG5cdFx0fSlcblx0XHQ6IFtdXG59XG5cbmZ1bmN0aW9uIGdldEtleXModGFyZ2V0KSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyh0YXJnZXQpLmNvbmNhdChnZXRFbnVtZXJhYmxlT3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkpXG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5SXNPbk9iamVjdChvYmplY3QsIHByb3BlcnR5KSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHByb3BlcnR5IGluIG9iamVjdFxuXHR9IGNhdGNoKF8pIHtcblx0XHRyZXR1cm4gZmFsc2Vcblx0fVxufVxuXG4vLyBQcm90ZWN0cyBmcm9tIHByb3RvdHlwZSBwb2lzb25pbmcgYW5kIHVuZXhwZWN0ZWQgbWVyZ2luZyB1cCB0aGUgcHJvdG90eXBlIGNoYWluLlxuZnVuY3Rpb24gcHJvcGVydHlJc1Vuc2FmZSh0YXJnZXQsIGtleSkge1xuXHRyZXR1cm4gcHJvcGVydHlJc09uT2JqZWN0KHRhcmdldCwga2V5KSAvLyBQcm9wZXJ0aWVzIGFyZSBzYWZlIHRvIG1lcmdlIGlmIHRoZXkgZG9uJ3QgZXhpc3QgaW4gdGhlIHRhcmdldCB5ZXQsXG5cdFx0JiYgIShPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIGtleSkgLy8gdW5zYWZlIGlmIHRoZXkgZXhpc3QgdXAgdGhlIHByb3RvdHlwZSBjaGFpbixcblx0XHRcdCYmIE9iamVjdC5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHRhcmdldCwga2V5KSkgLy8gYW5kIGFsc28gdW5zYWZlIGlmIHRoZXkncmUgbm9uZW51bWVyYWJsZS5cbn1cblxuZnVuY3Rpb24gbWVyZ2VPYmplY3QodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcblx0dmFyIGRlc3RpbmF0aW9uID0ge307XG5cdGlmIChvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KHRhcmdldCkpIHtcblx0XHRnZXRLZXlzKHRhcmdldCkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRcdGRlc3RpbmF0aW9uW2tleV0gPSBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCh0YXJnZXRba2V5XSwgb3B0aW9ucyk7XG5cdFx0fSk7XG5cdH1cblx0Z2V0S2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdFx0aWYgKHByb3BlcnR5SXNVbnNhZmUodGFyZ2V0LCBrZXkpKSB7XG5cdFx0XHRyZXR1cm5cblx0XHR9XG5cblx0XHRpZiAocHJvcGVydHlJc09uT2JqZWN0KHRhcmdldCwga2V5KSAmJiBvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KHNvdXJjZVtrZXldKSkge1xuXHRcdFx0ZGVzdGluYXRpb25ba2V5XSA9IGdldE1lcmdlRnVuY3Rpb24oa2V5LCBvcHRpb25zKSh0YXJnZXRba2V5XSwgc291cmNlW2tleV0sIG9wdGlvbnMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkZXN0aW5hdGlvbltrZXldID0gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoc291cmNlW2tleV0sIG9wdGlvbnMpO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBkZXN0aW5hdGlvblxufVxuXG5mdW5jdGlvbiBkZWVwbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cdG9wdGlvbnMuYXJyYXlNZXJnZSA9IG9wdGlvbnMuYXJyYXlNZXJnZSB8fCBkZWZhdWx0QXJyYXlNZXJnZTtcblx0b3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCA9IG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QgfHwgaXNNZXJnZWFibGVPYmplY3Q7XG5cdC8vIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkIGlzIGFkZGVkIHRvIGBvcHRpb25zYCBzbyB0aGF0IGN1c3RvbSBhcnJheU1lcmdlKClcblx0Ly8gaW1wbGVtZW50YXRpb25zIGNhbiB1c2UgaXQuIFRoZSBjYWxsZXIgbWF5IG5vdCByZXBsYWNlIGl0LlxuXHRvcHRpb25zLmNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkID0gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQ7XG5cblx0dmFyIHNvdXJjZUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KHNvdXJjZSk7XG5cdHZhciB0YXJnZXRJc0FycmF5ID0gQXJyYXkuaXNBcnJheSh0YXJnZXQpO1xuXHR2YXIgc291cmNlQW5kVGFyZ2V0VHlwZXNNYXRjaCA9IHNvdXJjZUlzQXJyYXkgPT09IHRhcmdldElzQXJyYXk7XG5cblx0aWYgKCFzb3VyY2VBbmRUYXJnZXRUeXBlc01hdGNoKSB7XG5cdFx0cmV0dXJuIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHNvdXJjZSwgb3B0aW9ucylcblx0fSBlbHNlIGlmIChzb3VyY2VJc0FycmF5KSB7XG5cdFx0cmV0dXJuIG9wdGlvbnMuYXJyYXlNZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucylcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gbWVyZ2VPYmplY3QodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpXG5cdH1cbn1cblxuZGVlcG1lcmdlLmFsbCA9IGZ1bmN0aW9uIGRlZXBtZXJnZUFsbChhcnJheSwgb3B0aW9ucykge1xuXHRpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXkpKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdmaXJzdCBhcmd1bWVudCBzaG91bGQgYmUgYW4gYXJyYXknKVxuXHR9XG5cblx0cmV0dXJuIGFycmF5LnJlZHVjZShmdW5jdGlvbihwcmV2LCBuZXh0KSB7XG5cdFx0cmV0dXJuIGRlZXBtZXJnZShwcmV2LCBuZXh0LCBvcHRpb25zKVxuXHR9LCB7fSlcbn07XG5cbnZhciBkZWVwbWVyZ2VfMSA9IGRlZXBtZXJnZTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWVwbWVyZ2VfMTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/deepmerge/dist/cjs.js\n");

/***/ }),

/***/ "./node_modules/fd-slicer/index.js":
/*!*****************************************!*\
  !*** ./node_modules/fd-slicer/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var fs = __webpack_require__(/*! fs */ \"fs\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar stream = __webpack_require__(/*! stream */ \"stream\");\nvar Readable = stream.Readable;\nvar Writable = stream.Writable;\nvar PassThrough = stream.PassThrough;\nvar Pend = __webpack_require__(/*! pend */ \"./node_modules/pend/index.js\");\nvar EventEmitter = __webpack_require__(/*! events */ \"events\").EventEmitter;\n\nexports.createFromBuffer = createFromBuffer;\nexports.createFromFd = createFromFd;\nexports.BufferSlicer = BufferSlicer;\nexports.FdSlicer = FdSlicer;\n\nutil.inherits(FdSlicer, EventEmitter);\nfunction FdSlicer(fd, options) {\n  options = options || {};\n  EventEmitter.call(this);\n\n  this.fd = fd;\n  this.pend = new Pend();\n  this.pend.max = 1;\n  this.refCount = 0;\n  this.autoClose = !!options.autoClose;\n}\n\nFdSlicer.prototype.read = function(buffer, offset, length, position, callback) {\n  var self = this;\n  self.pend.go(function(cb) {\n    fs.read(self.fd, buffer, offset, length, position, function(err, bytesRead, buffer) {\n      cb();\n      callback(err, bytesRead, buffer);\n    });\n  });\n};\n\nFdSlicer.prototype.write = function(buffer, offset, length, position, callback) {\n  var self = this;\n  self.pend.go(function(cb) {\n    fs.write(self.fd, buffer, offset, length, position, function(err, written, buffer) {\n      cb();\n      callback(err, written, buffer);\n    });\n  });\n};\n\nFdSlicer.prototype.createReadStream = function(options) {\n  return new ReadStream(this, options);\n};\n\nFdSlicer.prototype.createWriteStream = function(options) {\n  return new WriteStream(this, options);\n};\n\nFdSlicer.prototype.ref = function() {\n  this.refCount += 1;\n};\n\nFdSlicer.prototype.unref = function() {\n  var self = this;\n  self.refCount -= 1;\n\n  if (self.refCount > 0) return;\n  if (self.refCount < 0) throw new Error(\"invalid unref\");\n\n  if (self.autoClose) {\n    fs.close(self.fd, onCloseDone);\n  }\n\n  function onCloseDone(err) {\n    if (err) {\n      self.emit('error', err);\n    } else {\n      self.emit('close');\n    }\n  }\n};\n\nutil.inherits(ReadStream, Readable);\nfunction ReadStream(context, options) {\n  options = options || {};\n  Readable.call(this, options);\n\n  this.context = context;\n  this.context.ref();\n\n  this.start = options.start || 0;\n  this.endOffset = options.end;\n  this.pos = this.start;\n  this.destroyed = false;\n}\n\nReadStream.prototype._read = function(n) {\n  var self = this;\n  if (self.destroyed) return;\n\n  var toRead = Math.min(self._readableState.highWaterMark, n);\n  if (self.endOffset != null) {\n    toRead = Math.min(toRead, self.endOffset - self.pos);\n  }\n  if (toRead <= 0) {\n    self.destroyed = true;\n    self.push(null);\n    self.context.unref();\n    return;\n  }\n  self.context.pend.go(function(cb) {\n    if (self.destroyed) return cb();\n    var buffer = new Buffer(toRead);\n    fs.read(self.context.fd, buffer, 0, toRead, self.pos, function(err, bytesRead) {\n      if (err) {\n        self.destroy(err);\n      } else if (bytesRead === 0) {\n        self.destroyed = true;\n        self.push(null);\n        self.context.unref();\n      } else {\n        self.pos += bytesRead;\n        self.push(buffer.slice(0, bytesRead));\n      }\n      cb();\n    });\n  });\n};\n\nReadStream.prototype.destroy = function(err) {\n  if (this.destroyed) return;\n  err = err || new Error(\"stream destroyed\");\n  this.destroyed = true;\n  this.emit('error', err);\n  this.context.unref();\n};\n\nutil.inherits(WriteStream, Writable);\nfunction WriteStream(context, options) {\n  options = options || {};\n  Writable.call(this, options);\n\n  this.context = context;\n  this.context.ref();\n\n  this.start = options.start || 0;\n  this.endOffset = (options.end == null) ? Infinity : +options.end;\n  this.bytesWritten = 0;\n  this.pos = this.start;\n  this.destroyed = false;\n\n  this.on('finish', this.destroy.bind(this));\n}\n\nWriteStream.prototype._write = function(buffer, encoding, callback) {\n  var self = this;\n  if (self.destroyed) return;\n\n  if (self.pos + buffer.length > self.endOffset) {\n    var err = new Error(\"maximum file length exceeded\");\n    err.code = 'ETOOBIG';\n    self.destroy();\n    callback(err);\n    return;\n  }\n  self.context.pend.go(function(cb) {\n    if (self.destroyed) return cb();\n    fs.write(self.context.fd, buffer, 0, buffer.length, self.pos, function(err, bytes) {\n      if (err) {\n        self.destroy();\n        cb();\n        callback(err);\n      } else {\n        self.bytesWritten += bytes;\n        self.pos += bytes;\n        self.emit('progress');\n        cb();\n        callback();\n      }\n    });\n  });\n};\n\nWriteStream.prototype.destroy = function() {\n  if (this.destroyed) return;\n  this.destroyed = true;\n  this.context.unref();\n};\n\nutil.inherits(BufferSlicer, EventEmitter);\nfunction BufferSlicer(buffer, options) {\n  EventEmitter.call(this);\n\n  options = options || {};\n  this.refCount = 0;\n  this.buffer = buffer;\n  this.maxChunkSize = options.maxChunkSize || Number.MAX_SAFE_INTEGER;\n}\n\nBufferSlicer.prototype.read = function(buffer, offset, length, position, callback) {\n  var end = position + length;\n  var delta = end - this.buffer.length;\n  var written = (delta > 0) ? delta : length;\n  this.buffer.copy(buffer, offset, position, end);\n  setImmediate(function() {\n    callback(null, written);\n  });\n};\n\nBufferSlicer.prototype.write = function(buffer, offset, length, position, callback) {\n  buffer.copy(this.buffer, position, offset, offset + length);\n  setImmediate(function() {\n    callback(null, length, buffer);\n  });\n};\n\nBufferSlicer.prototype.createReadStream = function(options) {\n  options = options || {};\n  var readStream = new PassThrough(options);\n  readStream.destroyed = false;\n  readStream.start = options.start || 0;\n  readStream.endOffset = options.end;\n  // by the time this function returns, we'll be done.\n  readStream.pos = readStream.endOffset || this.buffer.length;\n\n  // respect the maxChunkSize option to slice up the chunk into smaller pieces.\n  var entireSlice = this.buffer.slice(readStream.start, readStream.pos);\n  var offset = 0;\n  while (true) {\n    var nextOffset = offset + this.maxChunkSize;\n    if (nextOffset >= entireSlice.length) {\n      // last chunk\n      if (offset < entireSlice.length) {\n        readStream.write(entireSlice.slice(offset, entireSlice.length));\n      }\n      break;\n    }\n    readStream.write(entireSlice.slice(offset, nextOffset));\n    offset = nextOffset;\n  }\n\n  readStream.end();\n  readStream.destroy = function() {\n    readStream.destroyed = true;\n  };\n  return readStream;\n};\n\nBufferSlicer.prototype.createWriteStream = function(options) {\n  var bufferSlicer = this;\n  options = options || {};\n  var writeStream = new Writable(options);\n  writeStream.start = options.start || 0;\n  writeStream.endOffset = (options.end == null) ? this.buffer.length : +options.end;\n  writeStream.bytesWritten = 0;\n  writeStream.pos = writeStream.start;\n  writeStream.destroyed = false;\n  writeStream._write = function(buffer, encoding, callback) {\n    if (writeStream.destroyed) return;\n\n    var end = writeStream.pos + buffer.length;\n    if (end > writeStream.endOffset) {\n      var err = new Error(\"maximum file length exceeded\");\n      err.code = 'ETOOBIG';\n      writeStream.destroyed = true;\n      callback(err);\n      return;\n    }\n    buffer.copy(bufferSlicer.buffer, writeStream.pos, 0, buffer.length);\n\n    writeStream.bytesWritten += buffer.length;\n    writeStream.pos = end;\n    writeStream.emit('progress');\n    callback();\n  };\n  writeStream.destroy = function() {\n    writeStream.destroyed = true;\n  };\n  return writeStream;\n};\n\nBufferSlicer.prototype.ref = function() {\n  this.refCount += 1;\n};\n\nBufferSlicer.prototype.unref = function() {\n  this.refCount -= 1;\n\n  if (this.refCount < 0) {\n    throw new Error(\"invalid unref\");\n  }\n};\n\nfunction createFromBuffer(buffer, options) {\n  return new BufferSlicer(buffer, options);\n}\n\nfunction createFromFd(fd, options) {\n  return new FdSlicer(fd, options);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/fd-slicer/index.js\n");

/***/ }),

/***/ "./node_modules/graceful-fs/clone.js":
/*!*******************************************!*\
  !*** ./node_modules/graceful-fs/clone.js ***!
  \*******************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = clone\n\nfunction clone (obj) {\n  if (obj === null || typeof obj !== 'object')\n    return obj\n\n  if (obj instanceof Object)\n    var copy = { __proto__: obj.__proto__ }\n  else\n    var copy = Object.create(null)\n\n  Object.getOwnPropertyNames(obj).forEach(function (key) {\n    Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key))\n  })\n\n  return copy\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGtib3gtZ3VpLy4vbm9kZV9tb2R1bGVzL2dyYWNlZnVsLWZzL2Nsb25lLmpzP2VjNmQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVo7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9ncmFjZWZ1bC1mcy9jbG9uZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb25lXG5cbmZ1bmN0aW9uIGNsb25lIChvYmopIHtcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JylcbiAgICByZXR1cm4gb2JqXG5cbiAgaWYgKG9iaiBpbnN0YW5jZW9mIE9iamVjdClcbiAgICB2YXIgY29weSA9IHsgX19wcm90b19fOiBvYmouX19wcm90b19fIH1cbiAgZWxzZVxuICAgIHZhciBjb3B5ID0gT2JqZWN0LmNyZWF0ZShudWxsKVxuXG4gIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvcHksIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkpXG4gIH0pXG5cbiAgcmV0dXJuIGNvcHlcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/graceful-fs/clone.js\n");

/***/ }),

/***/ "./node_modules/graceful-fs/graceful-fs.js":
/*!*************************************************!*\
  !*** ./node_modules/graceful-fs/graceful-fs.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var fs = __webpack_require__(/*! fs */ \"fs\")\nvar polyfills = __webpack_require__(/*! ./polyfills.js */ \"./node_modules/graceful-fs/polyfills.js\")\nvar legacy = __webpack_require__(/*! ./legacy-streams.js */ \"./node_modules/graceful-fs/legacy-streams.js\")\nvar clone = __webpack_require__(/*! ./clone.js */ \"./node_modules/graceful-fs/clone.js\")\n\nvar util = __webpack_require__(/*! util */ \"util\")\n\n/* istanbul ignore next - node 0.x polyfill */\nvar gracefulQueue\nvar previousSymbol\n\n/* istanbul ignore else - node 0.x polyfill */\nif (typeof Symbol === 'function' && typeof Symbol.for === 'function') {\n  gracefulQueue = Symbol.for('graceful-fs.queue')\n  // This is used in testing by future versions\n  previousSymbol = Symbol.for('graceful-fs.previous')\n} else {\n  gracefulQueue = '___graceful-fs.queue'\n  previousSymbol = '___graceful-fs.previous'\n}\n\nfunction noop () {}\n\nvar debug = noop\nif (util.debuglog)\n  debug = util.debuglog('gfs4')\nelse if (/\\bgfs4\\b/i.test(process.env.NODE_DEBUG || ''))\n  debug = function() {\n    var m = util.format.apply(util, arguments)\n    m = 'GFS4: ' + m.split(/\\n/).join('\\nGFS4: ')\n    console.error(m)\n  }\n\n// Once time initialization\nif (!global[gracefulQueue]) {\n  // This queue can be shared by multiple loaded instances\n  var queue = []\n  Object.defineProperty(global, gracefulQueue, {\n    get: function() {\n      return queue\n    }\n  })\n\n  // Patch fs.close/closeSync to shared queue version, because we need\n  // to retry() whenever a close happens *anywhere* in the program.\n  // This is essential when multiple graceful-fs instances are\n  // in play at the same time.\n  fs.close = (function (fs$close) {\n    function close (fd, cb) {\n      return fs$close.call(fs, fd, function (err) {\n        // This function uses the graceful-fs shared queue\n        if (!err) {\n          retry()\n        }\n\n        if (typeof cb === 'function')\n          cb.apply(this, arguments)\n      })\n    }\n\n    Object.defineProperty(close, previousSymbol, {\n      value: fs$close\n    })\n    return close\n  })(fs.close)\n\n  fs.closeSync = (function (fs$closeSync) {\n    function closeSync (fd) {\n      // This function uses the graceful-fs shared queue\n      fs$closeSync.apply(fs, arguments)\n      retry()\n    }\n\n    Object.defineProperty(closeSync, previousSymbol, {\n      value: fs$closeSync\n    })\n    return closeSync\n  })(fs.closeSync)\n\n  if (/\\bgfs4\\b/i.test(process.env.NODE_DEBUG || '')) {\n    process.on('exit', function() {\n      debug(global[gracefulQueue])\n      __webpack_require__(/*! assert */ \"assert\").equal(global[gracefulQueue].length, 0)\n    })\n  }\n}\n\nmodule.exports = patch(clone(fs))\nif (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs.__patched) {\n    module.exports = patch(fs)\n    fs.__patched = true;\n}\n\nfunction patch (fs) {\n  // Everything that references the open() function needs to be in here\n  polyfills(fs)\n  fs.gracefulify = patch\n\n  fs.createReadStream = createReadStream\n  fs.createWriteStream = createWriteStream\n  var fs$readFile = fs.readFile\n  fs.readFile = readFile\n  function readFile (path, options, cb) {\n    if (typeof options === 'function')\n      cb = options, options = null\n\n    return go$readFile(path, options, cb)\n\n    function go$readFile (path, options, cb) {\n      return fs$readFile(path, options, function (err) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))\n          enqueue([go$readFile, [path, options, cb]])\n        else {\n          if (typeof cb === 'function')\n            cb.apply(this, arguments)\n          retry()\n        }\n      })\n    }\n  }\n\n  var fs$writeFile = fs.writeFile\n  fs.writeFile = writeFile\n  function writeFile (path, data, options, cb) {\n    if (typeof options === 'function')\n      cb = options, options = null\n\n    return go$writeFile(path, data, options, cb)\n\n    function go$writeFile (path, data, options, cb) {\n      return fs$writeFile(path, data, options, function (err) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))\n          enqueue([go$writeFile, [path, data, options, cb]])\n        else {\n          if (typeof cb === 'function')\n            cb.apply(this, arguments)\n          retry()\n        }\n      })\n    }\n  }\n\n  var fs$appendFile = fs.appendFile\n  if (fs$appendFile)\n    fs.appendFile = appendFile\n  function appendFile (path, data, options, cb) {\n    if (typeof options === 'function')\n      cb = options, options = null\n\n    return go$appendFile(path, data, options, cb)\n\n    function go$appendFile (path, data, options, cb) {\n      return fs$appendFile(path, data, options, function (err) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))\n          enqueue([go$appendFile, [path, data, options, cb]])\n        else {\n          if (typeof cb === 'function')\n            cb.apply(this, arguments)\n          retry()\n        }\n      })\n    }\n  }\n\n  var fs$readdir = fs.readdir\n  fs.readdir = readdir\n  function readdir (path, options, cb) {\n    var args = [path]\n    if (typeof options !== 'function') {\n      args.push(options)\n    } else {\n      cb = options\n    }\n    args.push(go$readdir$cb)\n\n    return go$readdir(args)\n\n    function go$readdir$cb (err, files) {\n      if (files && files.sort)\n        files.sort()\n\n      if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))\n        enqueue([go$readdir, [args]])\n\n      else {\n        if (typeof cb === 'function')\n          cb.apply(this, arguments)\n        retry()\n      }\n    }\n  }\n\n  function go$readdir (args) {\n    return fs$readdir.apply(fs, args)\n  }\n\n  if (process.version.substr(0, 4) === 'v0.8') {\n    var legStreams = legacy(fs)\n    ReadStream = legStreams.ReadStream\n    WriteStream = legStreams.WriteStream\n  }\n\n  var fs$ReadStream = fs.ReadStream\n  if (fs$ReadStream) {\n    ReadStream.prototype = Object.create(fs$ReadStream.prototype)\n    ReadStream.prototype.open = ReadStream$open\n  }\n\n  var fs$WriteStream = fs.WriteStream\n  if (fs$WriteStream) {\n    WriteStream.prototype = Object.create(fs$WriteStream.prototype)\n    WriteStream.prototype.open = WriteStream$open\n  }\n\n  Object.defineProperty(fs, 'ReadStream', {\n    get: function () {\n      return ReadStream\n    },\n    set: function (val) {\n      ReadStream = val\n    },\n    enumerable: true,\n    configurable: true\n  })\n  Object.defineProperty(fs, 'WriteStream', {\n    get: function () {\n      return WriteStream\n    },\n    set: function (val) {\n      WriteStream = val\n    },\n    enumerable: true,\n    configurable: true\n  })\n\n  // legacy names\n  Object.defineProperty(fs, 'FileReadStream', {\n    get: function () {\n      return ReadStream\n    },\n    set: function (val) {\n      ReadStream = val\n    },\n    enumerable: true,\n    configurable: true\n  })\n  Object.defineProperty(fs, 'FileWriteStream', {\n    get: function () {\n      return WriteStream\n    },\n    set: function (val) {\n      WriteStream = val\n    },\n    enumerable: true,\n    configurable: true\n  })\n\n  function ReadStream (path, options) {\n    if (this instanceof ReadStream)\n      return fs$ReadStream.apply(this, arguments), this\n    else\n      return ReadStream.apply(Object.create(ReadStream.prototype), arguments)\n  }\n\n  function ReadStream$open () {\n    var that = this\n    open(that.path, that.flags, that.mode, function (err, fd) {\n      if (err) {\n        if (that.autoClose)\n          that.destroy()\n\n        that.emit('error', err)\n      } else {\n        that.fd = fd\n        that.emit('open', fd)\n        that.read()\n      }\n    })\n  }\n\n  function WriteStream (path, options) {\n    if (this instanceof WriteStream)\n      return fs$WriteStream.apply(this, arguments), this\n    else\n      return WriteStream.apply(Object.create(WriteStream.prototype), arguments)\n  }\n\n  function WriteStream$open () {\n    var that = this\n    open(that.path, that.flags, that.mode, function (err, fd) {\n      if (err) {\n        that.destroy()\n        that.emit('error', err)\n      } else {\n        that.fd = fd\n        that.emit('open', fd)\n      }\n    })\n  }\n\n  function createReadStream (path, options) {\n    return new fs.ReadStream(path, options)\n  }\n\n  function createWriteStream (path, options) {\n    return new fs.WriteStream(path, options)\n  }\n\n  var fs$open = fs.open\n  fs.open = open\n  function open (path, flags, mode, cb) {\n    if (typeof mode === 'function')\n      cb = mode, mode = null\n\n    return go$open(path, flags, mode, cb)\n\n    function go$open (path, flags, mode, cb) {\n      return fs$open(path, flags, mode, function (err, fd) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))\n          enqueue([go$open, [path, flags, mode, cb]])\n        else {\n          if (typeof cb === 'function')\n            cb.apply(this, arguments)\n          retry()\n        }\n      })\n    }\n  }\n\n  return fs\n}\n\nfunction enqueue (elem) {\n  debug('ENQUEUE', elem[0].name, elem[1])\n  global[gracefulQueue].push(elem)\n}\n\nfunction retry () {\n  var elem = global[gracefulQueue].shift()\n  if (elem) {\n    debug('RETRY', elem[0].name, elem[1])\n    elem[0].apply(null, elem[1])\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/graceful-fs/graceful-fs.js\n");

/***/ }),

/***/ "./node_modules/graceful-fs/legacy-streams.js":
/*!****************************************************!*\
  !*** ./node_modules/graceful-fs/legacy-streams.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var Stream = __webpack_require__(/*! stream */ \"stream\").Stream\n\nmodule.exports = legacy\n\nfunction legacy (fs) {\n  return {\n    ReadStream: ReadStream,\n    WriteStream: WriteStream\n  }\n\n  function ReadStream (path, options) {\n    if (!(this instanceof ReadStream)) return new ReadStream(path, options);\n\n    Stream.call(this);\n\n    var self = this;\n\n    this.path = path;\n    this.fd = null;\n    this.readable = true;\n    this.paused = false;\n\n    this.flags = 'r';\n    this.mode = 438; /*=0666*/\n    this.bufferSize = 64 * 1024;\n\n    options = options || {};\n\n    // Mixin options into this\n    var keys = Object.keys(options);\n    for (var index = 0, length = keys.length; index < length; index++) {\n      var key = keys[index];\n      this[key] = options[key];\n    }\n\n    if (this.encoding) this.setEncoding(this.encoding);\n\n    if (this.start !== undefined) {\n      if ('number' !== typeof this.start) {\n        throw TypeError('start must be a Number');\n      }\n      if (this.end === undefined) {\n        this.end = Infinity;\n      } else if ('number' !== typeof this.end) {\n        throw TypeError('end must be a Number');\n      }\n\n      if (this.start > this.end) {\n        throw new Error('start must be <= end');\n      }\n\n      this.pos = this.start;\n    }\n\n    if (this.fd !== null) {\n      process.nextTick(function() {\n        self._read();\n      });\n      return;\n    }\n\n    fs.open(this.path, this.flags, this.mode, function (err, fd) {\n      if (err) {\n        self.emit('error', err);\n        self.readable = false;\n        return;\n      }\n\n      self.fd = fd;\n      self.emit('open', fd);\n      self._read();\n    })\n  }\n\n  function WriteStream (path, options) {\n    if (!(this instanceof WriteStream)) return new WriteStream(path, options);\n\n    Stream.call(this);\n\n    this.path = path;\n    this.fd = null;\n    this.writable = true;\n\n    this.flags = 'w';\n    this.encoding = 'binary';\n    this.mode = 438; /*=0666*/\n    this.bytesWritten = 0;\n\n    options = options || {};\n\n    // Mixin options into this\n    var keys = Object.keys(options);\n    for (var index = 0, length = keys.length; index < length; index++) {\n      var key = keys[index];\n      this[key] = options[key];\n    }\n\n    if (this.start !== undefined) {\n      if ('number' !== typeof this.start) {\n        throw TypeError('start must be a Number');\n      }\n      if (this.start < 0) {\n        throw new Error('start must be >= zero');\n      }\n\n      this.pos = this.start;\n    }\n\n    this.busy = false;\n    this._queue = [];\n\n    if (this.fd === null) {\n      this._open = fs.open;\n      this._queue.push([this._open, this.path, this.flags, this.mode, undefined]);\n      this.flush();\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGtib3gtZ3VpLy4vbm9kZV9tb2R1bGVzL2dyYWNlZnVsLWZzL2xlZ2FjeS1zdHJlYW1zLmpzP2MwMmYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsYUFBYSxrREFBd0I7O0FBRXJDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9CQUFvQjtBQUNwQjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsNkNBQTZDLGdCQUFnQjtBQUM3RDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCOztBQUVBOztBQUVBO0FBQ0E7QUFDQSw2Q0FBNkMsZ0JBQWdCO0FBQzdEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZ3JhY2VmdWwtZnMvbGVnYWN5LXN0cmVhbXMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJykuU3RyZWFtXG5cbm1vZHVsZS5leHBvcnRzID0gbGVnYWN5XG5cbmZ1bmN0aW9uIGxlZ2FjeSAoZnMpIHtcbiAgcmV0dXJuIHtcbiAgICBSZWFkU3RyZWFtOiBSZWFkU3RyZWFtLFxuICAgIFdyaXRlU3RyZWFtOiBXcml0ZVN0cmVhbVxuICB9XG5cbiAgZnVuY3Rpb24gUmVhZFN0cmVhbSAocGF0aCwgb3B0aW9ucykge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZWFkU3RyZWFtKSkgcmV0dXJuIG5ldyBSZWFkU3RyZWFtKHBhdGgsIG9wdGlvbnMpO1xuXG4gICAgU3RyZWFtLmNhbGwodGhpcyk7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICB0aGlzLnBhdGggPSBwYXRoO1xuICAgIHRoaXMuZmQgPSBudWxsO1xuICAgIHRoaXMucmVhZGFibGUgPSB0cnVlO1xuICAgIHRoaXMucGF1c2VkID0gZmFsc2U7XG5cbiAgICB0aGlzLmZsYWdzID0gJ3InO1xuICAgIHRoaXMubW9kZSA9IDQzODsgLyo9MDY2NiovXG4gICAgdGhpcy5idWZmZXJTaXplID0gNjQgKiAxMDI0O1xuXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAvLyBNaXhpbiBvcHRpb25zIGludG8gdGhpc1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucyk7XG4gICAgZm9yICh2YXIgaW5kZXggPSAwLCBsZW5ndGggPSBrZXlzLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2luZGV4XTtcbiAgICAgIHRoaXNba2V5XSA9IG9wdGlvbnNba2V5XTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5lbmNvZGluZykgdGhpcy5zZXRFbmNvZGluZyh0aGlzLmVuY29kaW5nKTtcblxuICAgIGlmICh0aGlzLnN0YXJ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICgnbnVtYmVyJyAhPT0gdHlwZW9mIHRoaXMuc3RhcnQpIHtcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKCdzdGFydCBtdXN0IGJlIGEgTnVtYmVyJyk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5lbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLmVuZCA9IEluZmluaXR5O1xuICAgICAgfSBlbHNlIGlmICgnbnVtYmVyJyAhPT0gdHlwZW9mIHRoaXMuZW5kKSB7XG4gICAgICAgIHRocm93IFR5cGVFcnJvcignZW5kIG11c3QgYmUgYSBOdW1iZXInKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuc3RhcnQgPiB0aGlzLmVuZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3N0YXJ0IG11c3QgYmUgPD0gZW5kJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucG9zID0gdGhpcy5zdGFydDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5mZCAhPT0gbnVsbCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgc2VsZi5fcmVhZCgpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZnMub3Blbih0aGlzLnBhdGgsIHRoaXMuZmxhZ3MsIHRoaXMubW9kZSwgZnVuY3Rpb24gKGVyciwgZmQpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgc2VsZi5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgICAgIHNlbGYucmVhZGFibGUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzZWxmLmZkID0gZmQ7XG4gICAgICBzZWxmLmVtaXQoJ29wZW4nLCBmZCk7XG4gICAgICBzZWxmLl9yZWFkKCk7XG4gICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIFdyaXRlU3RyZWFtIChwYXRoLCBvcHRpb25zKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFdyaXRlU3RyZWFtKSkgcmV0dXJuIG5ldyBXcml0ZVN0cmVhbShwYXRoLCBvcHRpb25zKTtcblxuICAgIFN0cmVhbS5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy5wYXRoID0gcGF0aDtcbiAgICB0aGlzLmZkID0gbnVsbDtcbiAgICB0aGlzLndyaXRhYmxlID0gdHJ1ZTtcblxuICAgIHRoaXMuZmxhZ3MgPSAndyc7XG4gICAgdGhpcy5lbmNvZGluZyA9ICdiaW5hcnknO1xuICAgIHRoaXMubW9kZSA9IDQzODsgLyo9MDY2NiovXG4gICAgdGhpcy5ieXRlc1dyaXR0ZW4gPSAwO1xuXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAvLyBNaXhpbiBvcHRpb25zIGludG8gdGhpc1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucyk7XG4gICAgZm9yICh2YXIgaW5kZXggPSAwLCBsZW5ndGggPSBrZXlzLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2luZGV4XTtcbiAgICAgIHRoaXNba2V5XSA9IG9wdGlvbnNba2V5XTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zdGFydCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoJ251bWJlcicgIT09IHR5cGVvZiB0aGlzLnN0YXJ0KSB7XG4gICAgICAgIHRocm93IFR5cGVFcnJvcignc3RhcnQgbXVzdCBiZSBhIE51bWJlcicpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc3RhcnQgPCAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignc3RhcnQgbXVzdCBiZSA+PSB6ZXJvJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucG9zID0gdGhpcy5zdGFydDtcbiAgICB9XG5cbiAgICB0aGlzLmJ1c3kgPSBmYWxzZTtcbiAgICB0aGlzLl9xdWV1ZSA9IFtdO1xuXG4gICAgaWYgKHRoaXMuZmQgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuX29wZW4gPSBmcy5vcGVuO1xuICAgICAgdGhpcy5fcXVldWUucHVzaChbdGhpcy5fb3BlbiwgdGhpcy5wYXRoLCB0aGlzLmZsYWdzLCB0aGlzLm1vZGUsIHVuZGVmaW5lZF0pO1xuICAgICAgdGhpcy5mbHVzaCgpO1xuICAgIH1cbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/graceful-fs/legacy-streams.js\n");

/***/ }),

/***/ "./node_modules/graceful-fs/polyfills.js":
/*!***********************************************!*\
  !*** ./node_modules/graceful-fs/polyfills.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var constants = __webpack_require__(/*! constants */ \"constants\")\n\nvar origCwd = process.cwd\nvar cwd = null\n\nvar platform = process.env.GRACEFUL_FS_PLATFORM || process.platform\n\nprocess.cwd = function() {\n  if (!cwd)\n    cwd = origCwd.call(process)\n  return cwd\n}\ntry {\n  process.cwd()\n} catch (er) {}\n\nvar chdir = process.chdir\nprocess.chdir = function(d) {\n  cwd = null\n  chdir.call(process, d)\n}\n\nmodule.exports = patch\n\nfunction patch (fs) {\n  // (re-)implement some things that are known busted or missing.\n\n  // lchmod, broken prior to 0.6.2\n  // back-port the fix here.\n  if (constants.hasOwnProperty('O_SYMLINK') &&\n      process.version.match(/^v0\\.6\\.[0-2]|^v0\\.5\\./)) {\n    patchLchmod(fs)\n  }\n\n  // lutimes implementation, or no-op\n  if (!fs.lutimes) {\n    patchLutimes(fs)\n  }\n\n  // https://github.com/isaacs/node-graceful-fs/issues/4\n  // Chown should not fail on einval or eperm if non-root.\n  // It should not fail on enosys ever, as this just indicates\n  // that a fs doesn't support the intended operation.\n\n  fs.chown = chownFix(fs.chown)\n  fs.fchown = chownFix(fs.fchown)\n  fs.lchown = chownFix(fs.lchown)\n\n  fs.chmod = chmodFix(fs.chmod)\n  fs.fchmod = chmodFix(fs.fchmod)\n  fs.lchmod = chmodFix(fs.lchmod)\n\n  fs.chownSync = chownFixSync(fs.chownSync)\n  fs.fchownSync = chownFixSync(fs.fchownSync)\n  fs.lchownSync = chownFixSync(fs.lchownSync)\n\n  fs.chmodSync = chmodFixSync(fs.chmodSync)\n  fs.fchmodSync = chmodFixSync(fs.fchmodSync)\n  fs.lchmodSync = chmodFixSync(fs.lchmodSync)\n\n  fs.stat = statFix(fs.stat)\n  fs.fstat = statFix(fs.fstat)\n  fs.lstat = statFix(fs.lstat)\n\n  fs.statSync = statFixSync(fs.statSync)\n  fs.fstatSync = statFixSync(fs.fstatSync)\n  fs.lstatSync = statFixSync(fs.lstatSync)\n\n  // if lchmod/lchown do not exist, then make them no-ops\n  if (!fs.lchmod) {\n    fs.lchmod = function (path, mode, cb) {\n      if (cb) process.nextTick(cb)\n    }\n    fs.lchmodSync = function () {}\n  }\n  if (!fs.lchown) {\n    fs.lchown = function (path, uid, gid, cb) {\n      if (cb) process.nextTick(cb)\n    }\n    fs.lchownSync = function () {}\n  }\n\n  // on Windows, A/V software can lock the directory, causing this\n  // to fail with an EACCES or EPERM if the directory contains newly\n  // created files.  Try again on failure, for up to 60 seconds.\n\n  // Set the timeout this long because some Windows Anti-Virus, such as Parity\n  // bit9, may lock files for up to a minute, causing npm package install\n  // failures. Also, take care to yield the scheduler. Windows scheduling gives\n  // CPU to a busy looping process, which can cause the program causing the lock\n  // contention to be starved of CPU by node, so the contention doesn't resolve.\n  if (platform === \"win32\") {\n    fs.rename = (function (fs$rename) { return function (from, to, cb) {\n      var start = Date.now()\n      var backoff = 0;\n      fs$rename(from, to, function CB (er) {\n        if (er\n            && (er.code === \"EACCES\" || er.code === \"EPERM\")\n            && Date.now() - start < 60000) {\n          setTimeout(function() {\n            fs.stat(to, function (stater, st) {\n              if (stater && stater.code === \"ENOENT\")\n                fs$rename(from, to, CB);\n              else\n                cb(er)\n            })\n          }, backoff)\n          if (backoff < 100)\n            backoff += 10;\n          return;\n        }\n        if (cb) cb(er)\n      })\n    }})(fs.rename)\n  }\n\n  // if read() returns EAGAIN, then just try it again.\n  fs.read = (function (fs$read) {\n    function read (fd, buffer, offset, length, position, callback_) {\n      var callback\n      if (callback_ && typeof callback_ === 'function') {\n        var eagCounter = 0\n        callback = function (er, _, __) {\n          if (er && er.code === 'EAGAIN' && eagCounter < 10) {\n            eagCounter ++\n            return fs$read.call(fs, fd, buffer, offset, length, position, callback)\n          }\n          callback_.apply(this, arguments)\n        }\n      }\n      return fs$read.call(fs, fd, buffer, offset, length, position, callback)\n    }\n\n    // This ensures `util.promisify` works as it does for native `fs.read`.\n    read.__proto__ = fs$read\n    return read\n  })(fs.read)\n\n  fs.readSync = (function (fs$readSync) { return function (fd, buffer, offset, length, position) {\n    var eagCounter = 0\n    while (true) {\n      try {\n        return fs$readSync.call(fs, fd, buffer, offset, length, position)\n      } catch (er) {\n        if (er.code === 'EAGAIN' && eagCounter < 10) {\n          eagCounter ++\n          continue\n        }\n        throw er\n      }\n    }\n  }})(fs.readSync)\n\n  function patchLchmod (fs) {\n    fs.lchmod = function (path, mode, callback) {\n      fs.open( path\n             , constants.O_WRONLY | constants.O_SYMLINK\n             , mode\n             , function (err, fd) {\n        if (err) {\n          if (callback) callback(err)\n          return\n        }\n        // prefer to return the chmod error, if one occurs,\n        // but still try to close, and report closing errors if they occur.\n        fs.fchmod(fd, mode, function (err) {\n          fs.close(fd, function(err2) {\n            if (callback) callback(err || err2)\n          })\n        })\n      })\n    }\n\n    fs.lchmodSync = function (path, mode) {\n      var fd = fs.openSync(path, constants.O_WRONLY | constants.O_SYMLINK, mode)\n\n      // prefer to return the chmod error, if one occurs,\n      // but still try to close, and report closing errors if they occur.\n      var threw = true\n      var ret\n      try {\n        ret = fs.fchmodSync(fd, mode)\n        threw = false\n      } finally {\n        if (threw) {\n          try {\n            fs.closeSync(fd)\n          } catch (er) {}\n        } else {\n          fs.closeSync(fd)\n        }\n      }\n      return ret\n    }\n  }\n\n  function patchLutimes (fs) {\n    if (constants.hasOwnProperty(\"O_SYMLINK\")) {\n      fs.lutimes = function (path, at, mt, cb) {\n        fs.open(path, constants.O_SYMLINK, function (er, fd) {\n          if (er) {\n            if (cb) cb(er)\n            return\n          }\n          fs.futimes(fd, at, mt, function (er) {\n            fs.close(fd, function (er2) {\n              if (cb) cb(er || er2)\n            })\n          })\n        })\n      }\n\n      fs.lutimesSync = function (path, at, mt) {\n        var fd = fs.openSync(path, constants.O_SYMLINK)\n        var ret\n        var threw = true\n        try {\n          ret = fs.futimesSync(fd, at, mt)\n          threw = false\n        } finally {\n          if (threw) {\n            try {\n              fs.closeSync(fd)\n            } catch (er) {}\n          } else {\n            fs.closeSync(fd)\n          }\n        }\n        return ret\n      }\n\n    } else {\n      fs.lutimes = function (_a, _b, _c, cb) { if (cb) process.nextTick(cb) }\n      fs.lutimesSync = function () {}\n    }\n  }\n\n  function chmodFix (orig) {\n    if (!orig) return orig\n    return function (target, mode, cb) {\n      return orig.call(fs, target, mode, function (er) {\n        if (chownErOk(er)) er = null\n        if (cb) cb.apply(this, arguments)\n      })\n    }\n  }\n\n  function chmodFixSync (orig) {\n    if (!orig) return orig\n    return function (target, mode) {\n      try {\n        return orig.call(fs, target, mode)\n      } catch (er) {\n        if (!chownErOk(er)) throw er\n      }\n    }\n  }\n\n\n  function chownFix (orig) {\n    if (!orig) return orig\n    return function (target, uid, gid, cb) {\n      return orig.call(fs, target, uid, gid, function (er) {\n        if (chownErOk(er)) er = null\n        if (cb) cb.apply(this, arguments)\n      })\n    }\n  }\n\n  function chownFixSync (orig) {\n    if (!orig) return orig\n    return function (target, uid, gid) {\n      try {\n        return orig.call(fs, target, uid, gid)\n      } catch (er) {\n        if (!chownErOk(er)) throw er\n      }\n    }\n  }\n\n  function statFix (orig) {\n    if (!orig) return orig\n    // Older versions of Node erroneously returned signed integers for\n    // uid + gid.\n    return function (target, options, cb) {\n      if (typeof options === 'function') {\n        cb = options\n        options = null\n      }\n      function callback (er, stats) {\n        if (stats) {\n          if (stats.uid < 0) stats.uid += 0x100000000\n          if (stats.gid < 0) stats.gid += 0x100000000\n        }\n        if (cb) cb.apply(this, arguments)\n      }\n      return options ? orig.call(fs, target, options, callback)\n        : orig.call(fs, target, callback)\n    }\n  }\n\n  function statFixSync (orig) {\n    if (!orig) return orig\n    // Older versions of Node erroneously returned signed integers for\n    // uid + gid.\n    return function (target, options) {\n      var stats = options ? orig.call(fs, target, options)\n        : orig.call(fs, target)\n      if (stats.uid < 0) stats.uid += 0x100000000\n      if (stats.gid < 0) stats.gid += 0x100000000\n      return stats;\n    }\n  }\n\n  // ENOSYS means that the fs doesn't support the op. Just ignore\n  // that, because it doesn't matter.\n  //\n  // if there's no getuid, or if getuid() is something other\n  // than 0, and the error is EINVAL or EPERM, then just ignore\n  // it.\n  //\n  // This specific case is a silent failure in cp, install, tar,\n  // and most other unix tools that manage permissions.\n  //\n  // When running as root, or if other types of errors are\n  // encountered, then it's strict.\n  function chownErOk (er) {\n    if (!er)\n      return true\n\n    if (er.code === \"ENOSYS\")\n      return true\n\n    var nonroot = !process.getuid || process.getuid() !== 0\n    if (nonroot) {\n      if (er.code === \"EINVAL\" || er.code === \"EPERM\")\n        return true\n    }\n\n    return false\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/graceful-fs/polyfills.js\n");

/***/ }),

/***/ "./node_modules/jsonfile/index.js":
/*!****************************************!*\
  !*** ./node_modules/jsonfile/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("let _fs\ntry {\n  _fs = __webpack_require__(/*! graceful-fs */ \"./node_modules/graceful-fs/graceful-fs.js\")\n} catch (_) {\n  _fs = __webpack_require__(/*! fs */ \"fs\")\n}\nconst universalify = __webpack_require__(/*! universalify */ \"./node_modules/universalify/index.js\")\nconst { stringify, stripBom } = __webpack_require__(/*! ./utils */ \"./node_modules/jsonfile/utils.js\")\n\nasync function _readFile (file, options = {}) {\n  if (typeof options === 'string') {\n    options = { encoding: options }\n  }\n\n  const fs = options.fs || _fs\n\n  const shouldThrow = 'throws' in options ? options.throws : true\n\n  let data = await universalify.fromCallback(fs.readFile)(file, options)\n\n  data = stripBom(data)\n\n  let obj\n  try {\n    obj = JSON.parse(data, options ? options.reviver : null)\n  } catch (err) {\n    if (shouldThrow) {\n      err.message = `${file}: ${err.message}`\n      throw err\n    } else {\n      return null\n    }\n  }\n\n  return obj\n}\n\nconst readFile = universalify.fromPromise(_readFile)\n\nfunction readFileSync (file, options = {}) {\n  if (typeof options === 'string') {\n    options = { encoding: options }\n  }\n\n  const fs = options.fs || _fs\n\n  const shouldThrow = 'throws' in options ? options.throws : true\n\n  try {\n    let content = fs.readFileSync(file, options)\n    content = stripBom(content)\n    return JSON.parse(content, options.reviver)\n  } catch (err) {\n    if (shouldThrow) {\n      err.message = `${file}: ${err.message}`\n      throw err\n    } else {\n      return null\n    }\n  }\n}\n\nasync function _writeFile (file, obj, options = {}) {\n  const fs = options.fs || _fs\n\n  const str = stringify(obj, options)\n\n  await universalify.fromCallback(fs.writeFile)(file, str, options)\n}\n\nconst writeFile = universalify.fromPromise(_writeFile)\n\nfunction writeFileSync (file, obj, options = {}) {\n  const fs = options.fs || _fs\n\n  const str = stringify(obj, options)\n  // not sure if fs.writeFileSync returns anything, but just in case\n  return fs.writeFileSync(file, str, options)\n}\n\nconst jsonfile = {\n  readFile,\n  readFileSync,\n  writeFile,\n  writeFileSync\n}\n\nmodule.exports = jsonfile\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGtib3gtZ3VpLy4vbm9kZV9tb2R1bGVzL2pzb25maWxlL2luZGV4LmpzP2MzMTMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBLFFBQVEsbUJBQU8sQ0FBQyw4REFBYTtBQUM3QixDQUFDO0FBQ0QsUUFBUSxtQkFBTyxDQUFDLGNBQUk7QUFDcEI7QUFDQSxxQkFBcUIsbUJBQU8sQ0FBQywwREFBYztBQUMzQyxPQUFPLHNCQUFzQixHQUFHLG1CQUFPLENBQUMsaURBQVM7O0FBRWpELDRDQUE0QztBQUM1QztBQUNBLGVBQWU7QUFDZjs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSx1QkFBdUIsS0FBSyxJQUFJLFlBQVk7QUFDNUM7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUEseUNBQXlDO0FBQ3pDO0FBQ0EsZUFBZTtBQUNmOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsdUJBQXVCLEtBQUssSUFBSSxZQUFZO0FBQzVDO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtEQUFrRDtBQUNsRDs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBLCtDQUErQztBQUMvQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvanNvbmZpbGUvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgX2ZzXG50cnkge1xuICBfZnMgPSByZXF1aXJlKCdncmFjZWZ1bC1mcycpXG59IGNhdGNoIChfKSB7XG4gIF9mcyA9IHJlcXVpcmUoJ2ZzJylcbn1cbmNvbnN0IHVuaXZlcnNhbGlmeSA9IHJlcXVpcmUoJ3VuaXZlcnNhbGlmeScpXG5jb25zdCB7IHN0cmluZ2lmeSwgc3RyaXBCb20gfSA9IHJlcXVpcmUoJy4vdXRpbHMnKVxuXG5hc3luYyBmdW5jdGlvbiBfcmVhZEZpbGUgKGZpbGUsIG9wdGlvbnMgPSB7fSkge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgb3B0aW9ucyA9IHsgZW5jb2Rpbmc6IG9wdGlvbnMgfVxuICB9XG5cbiAgY29uc3QgZnMgPSBvcHRpb25zLmZzIHx8IF9mc1xuXG4gIGNvbnN0IHNob3VsZFRocm93ID0gJ3Rocm93cycgaW4gb3B0aW9ucyA/IG9wdGlvbnMudGhyb3dzIDogdHJ1ZVxuXG4gIGxldCBkYXRhID0gYXdhaXQgdW5pdmVyc2FsaWZ5LmZyb21DYWxsYmFjayhmcy5yZWFkRmlsZSkoZmlsZSwgb3B0aW9ucylcblxuICBkYXRhID0gc3RyaXBCb20oZGF0YSlcblxuICBsZXQgb2JqXG4gIHRyeSB7XG4gICAgb2JqID0gSlNPTi5wYXJzZShkYXRhLCBvcHRpb25zID8gb3B0aW9ucy5yZXZpdmVyIDogbnVsbClcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKHNob3VsZFRocm93KSB7XG4gICAgICBlcnIubWVzc2FnZSA9IGAke2ZpbGV9OiAke2Vyci5tZXNzYWdlfWBcbiAgICAgIHRocm93IGVyclxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvYmpcbn1cblxuY29uc3QgcmVhZEZpbGUgPSB1bml2ZXJzYWxpZnkuZnJvbVByb21pc2UoX3JlYWRGaWxlKVxuXG5mdW5jdGlvbiByZWFkRmlsZVN5bmMgKGZpbGUsIG9wdGlvbnMgPSB7fSkge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgb3B0aW9ucyA9IHsgZW5jb2Rpbmc6IG9wdGlvbnMgfVxuICB9XG5cbiAgY29uc3QgZnMgPSBvcHRpb25zLmZzIHx8IF9mc1xuXG4gIGNvbnN0IHNob3VsZFRocm93ID0gJ3Rocm93cycgaW4gb3B0aW9ucyA/IG9wdGlvbnMudGhyb3dzIDogdHJ1ZVxuXG4gIHRyeSB7XG4gICAgbGV0IGNvbnRlbnQgPSBmcy5yZWFkRmlsZVN5bmMoZmlsZSwgb3B0aW9ucylcbiAgICBjb250ZW50ID0gc3RyaXBCb20oY29udGVudClcbiAgICByZXR1cm4gSlNPTi5wYXJzZShjb250ZW50LCBvcHRpb25zLnJldml2ZXIpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChzaG91bGRUaHJvdykge1xuICAgICAgZXJyLm1lc3NhZ2UgPSBgJHtmaWxlfTogJHtlcnIubWVzc2FnZX1gXG4gICAgICB0aHJvdyBlcnJcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gX3dyaXRlRmlsZSAoZmlsZSwgb2JqLCBvcHRpb25zID0ge30pIHtcbiAgY29uc3QgZnMgPSBvcHRpb25zLmZzIHx8IF9mc1xuXG4gIGNvbnN0IHN0ciA9IHN0cmluZ2lmeShvYmosIG9wdGlvbnMpXG5cbiAgYXdhaXQgdW5pdmVyc2FsaWZ5LmZyb21DYWxsYmFjayhmcy53cml0ZUZpbGUpKGZpbGUsIHN0ciwgb3B0aW9ucylcbn1cblxuY29uc3Qgd3JpdGVGaWxlID0gdW5pdmVyc2FsaWZ5LmZyb21Qcm9taXNlKF93cml0ZUZpbGUpXG5cbmZ1bmN0aW9uIHdyaXRlRmlsZVN5bmMgKGZpbGUsIG9iaiwgb3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IGZzID0gb3B0aW9ucy5mcyB8fCBfZnNcblxuICBjb25zdCBzdHIgPSBzdHJpbmdpZnkob2JqLCBvcHRpb25zKVxuICAvLyBub3Qgc3VyZSBpZiBmcy53cml0ZUZpbGVTeW5jIHJldHVybnMgYW55dGhpbmcsIGJ1dCBqdXN0IGluIGNhc2VcbiAgcmV0dXJuIGZzLndyaXRlRmlsZVN5bmMoZmlsZSwgc3RyLCBvcHRpb25zKVxufVxuXG5jb25zdCBqc29uZmlsZSA9IHtcbiAgcmVhZEZpbGUsXG4gIHJlYWRGaWxlU3luYyxcbiAgd3JpdGVGaWxlLFxuICB3cml0ZUZpbGVTeW5jXG59XG5cbm1vZHVsZS5leHBvcnRzID0ganNvbmZpbGVcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/jsonfile/index.js\n");

/***/ }),

/***/ "./node_modules/jsonfile/utils.js":
/*!****************************************!*\
  !*** ./node_modules/jsonfile/utils.js ***!
  \****************************************/
/***/ ((module) => {

eval("function stringify (obj, { EOL = '\\n', finalEOL = true, replacer = null, spaces } = {}) {\n  const EOF = finalEOL ? EOL : ''\n  const str = JSON.stringify(obj, replacer, spaces)\n\n  return str.replace(/\\n/g, EOL) + EOF\n}\n\nfunction stripBom (content) {\n  // we do this because JSON.parse would convert it to a utf8 string if encoding wasn't specified\n  if (Buffer.isBuffer(content)) content = content.toString('utf8')\n  return content.replace(/^\\uFEFF/, '')\n}\n\nmodule.exports = { stringify, stripBom }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGtib3gtZ3VpLy4vbm9kZV9tb2R1bGVzL2pzb25maWxlL3V0aWxzLmpzPzkwZjAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMEJBQTBCLHVEQUF1RCxLQUFLO0FBQ3RGO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtCQUFrQiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9qc29uZmlsZS91dGlscy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHN0cmluZ2lmeSAob2JqLCB7IEVPTCA9ICdcXG4nLCBmaW5hbEVPTCA9IHRydWUsIHJlcGxhY2VyID0gbnVsbCwgc3BhY2VzIH0gPSB7fSkge1xuICBjb25zdCBFT0YgPSBmaW5hbEVPTCA/IEVPTCA6ICcnXG4gIGNvbnN0IHN0ciA9IEpTT04uc3RyaW5naWZ5KG9iaiwgcmVwbGFjZXIsIHNwYWNlcylcblxuICByZXR1cm4gc3RyLnJlcGxhY2UoL1xcbi9nLCBFT0wpICsgRU9GXG59XG5cbmZ1bmN0aW9uIHN0cmlwQm9tIChjb250ZW50KSB7XG4gIC8vIHdlIGRvIHRoaXMgYmVjYXVzZSBKU09OLnBhcnNlIHdvdWxkIGNvbnZlcnQgaXQgdG8gYSB1dGY4IHN0cmluZyBpZiBlbmNvZGluZyB3YXNuJ3Qgc3BlY2lmaWVkXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoY29udGVudCkpIGNvbnRlbnQgPSBjb250ZW50LnRvU3RyaW5nKCd1dGY4JylcbiAgcmV0dXJuIGNvbnRlbnQucmVwbGFjZSgvXlxcdUZFRkYvLCAnJylcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IHN0cmluZ2lmeSwgc3RyaXBCb20gfVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/jsonfile/utils.js\n");

/***/ }),

/***/ "./node_modules/pend/index.js":
/*!************************************!*\
  !*** ./node_modules/pend/index.js ***!
  \************************************/
/***/ ((module) => {

eval("module.exports = Pend;\n\nfunction Pend() {\n  this.pending = 0;\n  this.max = Infinity;\n  this.listeners = [];\n  this.waiting = [];\n  this.error = null;\n}\n\nPend.prototype.go = function(fn) {\n  if (this.pending < this.max) {\n    pendGo(this, fn);\n  } else {\n    this.waiting.push(fn);\n  }\n};\n\nPend.prototype.wait = function(cb) {\n  if (this.pending === 0) {\n    cb(this.error);\n  } else {\n    this.listeners.push(cb);\n  }\n};\n\nPend.prototype.hold = function() {\n  return pendHold(this);\n};\n\nfunction pendHold(self) {\n  self.pending += 1;\n  var called = false;\n  return onCb;\n  function onCb(err) {\n    if (called) throw new Error(\"callback called twice\");\n    called = true;\n    self.error = self.error || err;\n    self.pending -= 1;\n    if (self.waiting.length > 0 && self.pending < self.max) {\n      pendGo(self, self.waiting.shift());\n    } else if (self.pending === 0) {\n      var listeners = self.listeners;\n      self.listeners = [];\n      listeners.forEach(cbListener);\n    }\n  }\n  function cbListener(listener) {\n    listener(self.error);\n  }\n}\n\nfunction pendGo(self, fn) {\n  fn(pendHold(self));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGtib3gtZ3VpLy4vbm9kZV9tb2R1bGVzL3BlbmQvaW5kZXguanM/ZjBjOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9wZW5kL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBQZW5kO1xuXG5mdW5jdGlvbiBQZW5kKCkge1xuICB0aGlzLnBlbmRpbmcgPSAwO1xuICB0aGlzLm1heCA9IEluZmluaXR5O1xuICB0aGlzLmxpc3RlbmVycyA9IFtdO1xuICB0aGlzLndhaXRpbmcgPSBbXTtcbiAgdGhpcy5lcnJvciA9IG51bGw7XG59XG5cblBlbmQucHJvdG90eXBlLmdvID0gZnVuY3Rpb24oZm4pIHtcbiAgaWYgKHRoaXMucGVuZGluZyA8IHRoaXMubWF4KSB7XG4gICAgcGVuZEdvKHRoaXMsIGZuKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLndhaXRpbmcucHVzaChmbik7XG4gIH1cbn07XG5cblBlbmQucHJvdG90eXBlLndhaXQgPSBmdW5jdGlvbihjYikge1xuICBpZiAodGhpcy5wZW5kaW5nID09PSAwKSB7XG4gICAgY2IodGhpcy5lcnJvcik7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5saXN0ZW5lcnMucHVzaChjYik7XG4gIH1cbn07XG5cblBlbmQucHJvdG90eXBlLmhvbGQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHBlbmRIb2xkKHRoaXMpO1xufTtcblxuZnVuY3Rpb24gcGVuZEhvbGQoc2VsZikge1xuICBzZWxmLnBlbmRpbmcgKz0gMTtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICByZXR1cm4gb25DYjtcbiAgZnVuY3Rpb24gb25DYihlcnIpIHtcbiAgICBpZiAoY2FsbGVkKSB0aHJvdyBuZXcgRXJyb3IoXCJjYWxsYmFjayBjYWxsZWQgdHdpY2VcIik7XG4gICAgY2FsbGVkID0gdHJ1ZTtcbiAgICBzZWxmLmVycm9yID0gc2VsZi5lcnJvciB8fCBlcnI7XG4gICAgc2VsZi5wZW5kaW5nIC09IDE7XG4gICAgaWYgKHNlbGYud2FpdGluZy5sZW5ndGggPiAwICYmIHNlbGYucGVuZGluZyA8IHNlbGYubWF4KSB7XG4gICAgICBwZW5kR28oc2VsZiwgc2VsZi53YWl0aW5nLnNoaWZ0KCkpO1xuICAgIH0gZWxzZSBpZiAoc2VsZi5wZW5kaW5nID09PSAwKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gc2VsZi5saXN0ZW5lcnM7XG4gICAgICBzZWxmLmxpc3RlbmVycyA9IFtdO1xuICAgICAgbGlzdGVuZXJzLmZvckVhY2goY2JMaXN0ZW5lcik7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGNiTGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgICBsaXN0ZW5lcihzZWxmLmVycm9yKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwZW5kR28oc2VsZiwgZm4pIHtcbiAgZm4ocGVuZEhvbGQoc2VsZikpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/pend/index.js\n");

/***/ }),

/***/ "./node_modules/yauzl/index.js":
/*!*************************************!*\
  !*** ./node_modules/yauzl/index.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var fs = __webpack_require__(/*! fs */ \"fs\");\nvar zlib = __webpack_require__(/*! zlib */ \"zlib\");\nvar fd_slicer = __webpack_require__(/*! fd-slicer */ \"./node_modules/fd-slicer/index.js\");\nvar crc32 = __webpack_require__(/*! buffer-crc32 */ \"./node_modules/buffer-crc32/index.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar EventEmitter = __webpack_require__(/*! events */ \"events\").EventEmitter;\nvar Transform = __webpack_require__(/*! stream */ \"stream\").Transform;\nvar PassThrough = __webpack_require__(/*! stream */ \"stream\").PassThrough;\nvar Writable = __webpack_require__(/*! stream */ \"stream\").Writable;\n\nexports.open = open;\nexports.fromFd = fromFd;\nexports.fromBuffer = fromBuffer;\nexports.fromRandomAccessReader = fromRandomAccessReader;\nexports.dosDateTimeToDate = dosDateTimeToDate;\nexports.validateFileName = validateFileName;\nexports.ZipFile = ZipFile;\nexports.Entry = Entry;\nexports.RandomAccessReader = RandomAccessReader;\n\nfunction open(path, options, callback) {\n  if (typeof options === \"function\") {\n    callback = options;\n    options = null;\n  }\n  if (options == null) options = {};\n  if (options.autoClose == null) options.autoClose = true;\n  if (options.lazyEntries == null) options.lazyEntries = false;\n  if (options.decodeStrings == null) options.decodeStrings = true;\n  if (options.validateEntrySizes == null) options.validateEntrySizes = true;\n  if (options.strictFileNames == null) options.strictFileNames = false;\n  if (callback == null) callback = defaultCallback;\n  fs.open(path, \"r\", function(err, fd) {\n    if (err) return callback(err);\n    fromFd(fd, options, function(err, zipfile) {\n      if (err) fs.close(fd, defaultCallback);\n      callback(err, zipfile);\n    });\n  });\n}\n\nfunction fromFd(fd, options, callback) {\n  if (typeof options === \"function\") {\n    callback = options;\n    options = null;\n  }\n  if (options == null) options = {};\n  if (options.autoClose == null) options.autoClose = false;\n  if (options.lazyEntries == null) options.lazyEntries = false;\n  if (options.decodeStrings == null) options.decodeStrings = true;\n  if (options.validateEntrySizes == null) options.validateEntrySizes = true;\n  if (options.strictFileNames == null) options.strictFileNames = false;\n  if (callback == null) callback = defaultCallback;\n  fs.fstat(fd, function(err, stats) {\n    if (err) return callback(err);\n    var reader = fd_slicer.createFromFd(fd, {autoClose: true});\n    fromRandomAccessReader(reader, stats.size, options, callback);\n  });\n}\n\nfunction fromBuffer(buffer, options, callback) {\n  if (typeof options === \"function\") {\n    callback = options;\n    options = null;\n  }\n  if (options == null) options = {};\n  options.autoClose = false;\n  if (options.lazyEntries == null) options.lazyEntries = false;\n  if (options.decodeStrings == null) options.decodeStrings = true;\n  if (options.validateEntrySizes == null) options.validateEntrySizes = true;\n  if (options.strictFileNames == null) options.strictFileNames = false;\n  // limit the max chunk size. see https://github.com/thejoshwolfe/yauzl/issues/87\n  var reader = fd_slicer.createFromBuffer(buffer, {maxChunkSize: 0x10000});\n  fromRandomAccessReader(reader, buffer.length, options, callback);\n}\n\nfunction fromRandomAccessReader(reader, totalSize, options, callback) {\n  if (typeof options === \"function\") {\n    callback = options;\n    options = null;\n  }\n  if (options == null) options = {};\n  if (options.autoClose == null) options.autoClose = true;\n  if (options.lazyEntries == null) options.lazyEntries = false;\n  if (options.decodeStrings == null) options.decodeStrings = true;\n  var decodeStrings = !!options.decodeStrings;\n  if (options.validateEntrySizes == null) options.validateEntrySizes = true;\n  if (options.strictFileNames == null) options.strictFileNames = false;\n  if (callback == null) callback = defaultCallback;\n  if (typeof totalSize !== \"number\") throw new Error(\"expected totalSize parameter to be a number\");\n  if (totalSize > Number.MAX_SAFE_INTEGER) {\n    throw new Error(\"zip file too large. only file sizes up to 2^52 are supported due to JavaScript's Number type being an IEEE 754 double.\");\n  }\n\n  // the matching unref() call is in zipfile.close()\n  reader.ref();\n\n  // eocdr means End of Central Directory Record.\n  // search backwards for the eocdr signature.\n  // the last field of the eocdr is a variable-length comment.\n  // the comment size is encoded in a 2-byte field in the eocdr, which we can't find without trudging backwards through the comment to find it.\n  // as a consequence of this design decision, it's possible to have ambiguous zip file metadata if a coherent eocdr was in the comment.\n  // we search backwards for a eocdr signature, and hope that whoever made the zip file was smart enough to forbid the eocdr signature in the comment.\n  var eocdrWithoutCommentSize = 22;\n  var maxCommentSize = 0xffff; // 2-byte size\n  var bufferSize = Math.min(eocdrWithoutCommentSize + maxCommentSize, totalSize);\n  var buffer = newBuffer(bufferSize);\n  var bufferReadStart = totalSize - buffer.length;\n  readAndAssertNoEof(reader, buffer, 0, bufferSize, bufferReadStart, function(err) {\n    if (err) return callback(err);\n    for (var i = bufferSize - eocdrWithoutCommentSize; i >= 0; i -= 1) {\n      if (buffer.readUInt32LE(i) !== 0x06054b50) continue;\n      // found eocdr\n      var eocdrBuffer = buffer.slice(i);\n\n      // 0 - End of central directory signature = 0x06054b50\n      // 4 - Number of this disk\n      var diskNumber = eocdrBuffer.readUInt16LE(4);\n      if (diskNumber !== 0) {\n        return callback(new Error(\"multi-disk zip files are not supported: found disk number: \" + diskNumber));\n      }\n      // 6 - Disk where central directory starts\n      // 8 - Number of central directory records on this disk\n      // 10 - Total number of central directory records\n      var entryCount = eocdrBuffer.readUInt16LE(10);\n      // 12 - Size of central directory (bytes)\n      // 16 - Offset of start of central directory, relative to start of archive\n      var centralDirectoryOffset = eocdrBuffer.readUInt32LE(16);\n      // 20 - Comment length\n      var commentLength = eocdrBuffer.readUInt16LE(20);\n      var expectedCommentLength = eocdrBuffer.length - eocdrWithoutCommentSize;\n      if (commentLength !== expectedCommentLength) {\n        return callback(new Error(\"invalid comment length. expected: \" + expectedCommentLength + \". found: \" + commentLength));\n      }\n      // 22 - Comment\n      // the encoding is always cp437.\n      var comment = decodeStrings ? decodeBuffer(eocdrBuffer, 22, eocdrBuffer.length, false)\n                                  : eocdrBuffer.slice(22);\n\n      if (!(entryCount === 0xffff || centralDirectoryOffset === 0xffffffff)) {\n        return callback(null, new ZipFile(reader, centralDirectoryOffset, totalSize, entryCount, comment, options.autoClose, options.lazyEntries, decodeStrings, options.validateEntrySizes, options.strictFileNames));\n      }\n\n      // ZIP64 format\n\n      // ZIP64 Zip64 end of central directory locator\n      var zip64EocdlBuffer = newBuffer(20);\n      var zip64EocdlOffset = bufferReadStart + i - zip64EocdlBuffer.length;\n      readAndAssertNoEof(reader, zip64EocdlBuffer, 0, zip64EocdlBuffer.length, zip64EocdlOffset, function(err) {\n        if (err) return callback(err);\n\n        // 0 - zip64 end of central dir locator signature = 0x07064b50\n        if (zip64EocdlBuffer.readUInt32LE(0) !== 0x07064b50) {\n          return callback(new Error(\"invalid zip64 end of central directory locator signature\"));\n        }\n        // 4 - number of the disk with the start of the zip64 end of central directory\n        // 8 - relative offset of the zip64 end of central directory record\n        var zip64EocdrOffset = readUInt64LE(zip64EocdlBuffer, 8);\n        // 16 - total number of disks\n\n        // ZIP64 end of central directory record\n        var zip64EocdrBuffer = newBuffer(56);\n        readAndAssertNoEof(reader, zip64EocdrBuffer, 0, zip64EocdrBuffer.length, zip64EocdrOffset, function(err) {\n          if (err) return callback(err);\n\n          // 0 - zip64 end of central dir signature                           4 bytes  (0x06064b50)\n          if (zip64EocdrBuffer.readUInt32LE(0) !== 0x06064b50) {\n            return callback(new Error(\"invalid zip64 end of central directory record signature\"));\n          }\n          // 4 - size of zip64 end of central directory record                8 bytes\n          // 12 - version made by                                             2 bytes\n          // 14 - version needed to extract                                   2 bytes\n          // 16 - number of this disk                                         4 bytes\n          // 20 - number of the disk with the start of the central directory  4 bytes\n          // 24 - total number of entries in the central directory on this disk         8 bytes\n          // 32 - total number of entries in the central directory            8 bytes\n          entryCount = readUInt64LE(zip64EocdrBuffer, 32);\n          // 40 - size of the central directory                               8 bytes\n          // 48 - offset of start of central directory with respect to the starting disk number     8 bytes\n          centralDirectoryOffset = readUInt64LE(zip64EocdrBuffer, 48);\n          // 56 - zip64 extensible data sector                                (variable size)\n          return callback(null, new ZipFile(reader, centralDirectoryOffset, totalSize, entryCount, comment, options.autoClose, options.lazyEntries, decodeStrings, options.validateEntrySizes, options.strictFileNames));\n        });\n      });\n      return;\n    }\n    callback(new Error(\"end of central directory record signature not found\"));\n  });\n}\n\nutil.inherits(ZipFile, EventEmitter);\nfunction ZipFile(reader, centralDirectoryOffset, fileSize, entryCount, comment, autoClose, lazyEntries, decodeStrings, validateEntrySizes, strictFileNames) {\n  var self = this;\n  EventEmitter.call(self);\n  self.reader = reader;\n  // forward close events\n  self.reader.on(\"error\", function(err) {\n    // error closing the fd\n    emitError(self, err);\n  });\n  self.reader.once(\"close\", function() {\n    self.emit(\"close\");\n  });\n  self.readEntryCursor = centralDirectoryOffset;\n  self.fileSize = fileSize;\n  self.entryCount = entryCount;\n  self.comment = comment;\n  self.entriesRead = 0;\n  self.autoClose = !!autoClose;\n  self.lazyEntries = !!lazyEntries;\n  self.decodeStrings = !!decodeStrings;\n  self.validateEntrySizes = !!validateEntrySizes;\n  self.strictFileNames = !!strictFileNames;\n  self.isOpen = true;\n  self.emittedError = false;\n\n  if (!self.lazyEntries) self._readEntry();\n}\nZipFile.prototype.close = function() {\n  if (!this.isOpen) return;\n  this.isOpen = false;\n  this.reader.unref();\n};\n\nfunction emitErrorAndAutoClose(self, err) {\n  if (self.autoClose) self.close();\n  emitError(self, err);\n}\nfunction emitError(self, err) {\n  if (self.emittedError) return;\n  self.emittedError = true;\n  self.emit(\"error\", err);\n}\n\nZipFile.prototype.readEntry = function() {\n  if (!this.lazyEntries) throw new Error(\"readEntry() called without lazyEntries:true\");\n  this._readEntry();\n};\nZipFile.prototype._readEntry = function() {\n  var self = this;\n  if (self.entryCount === self.entriesRead) {\n    // done with metadata\n    setImmediate(function() {\n      if (self.autoClose) self.close();\n      if (self.emittedError) return;\n      self.emit(\"end\");\n    });\n    return;\n  }\n  if (self.emittedError) return;\n  var buffer = newBuffer(46);\n  readAndAssertNoEof(self.reader, buffer, 0, buffer.length, self.readEntryCursor, function(err) {\n    if (err) return emitErrorAndAutoClose(self, err);\n    if (self.emittedError) return;\n    var entry = new Entry();\n    // 0 - Central directory file header signature\n    var signature = buffer.readUInt32LE(0);\n    if (signature !== 0x02014b50) return emitErrorAndAutoClose(self, new Error(\"invalid central directory file header signature: 0x\" + signature.toString(16)));\n    // 4 - Version made by\n    entry.versionMadeBy = buffer.readUInt16LE(4);\n    // 6 - Version needed to extract (minimum)\n    entry.versionNeededToExtract = buffer.readUInt16LE(6);\n    // 8 - General purpose bit flag\n    entry.generalPurposeBitFlag = buffer.readUInt16LE(8);\n    // 10 - Compression method\n    entry.compressionMethod = buffer.readUInt16LE(10);\n    // 12 - File last modification time\n    entry.lastModFileTime = buffer.readUInt16LE(12);\n    // 14 - File last modification date\n    entry.lastModFileDate = buffer.readUInt16LE(14);\n    // 16 - CRC-32\n    entry.crc32 = buffer.readUInt32LE(16);\n    // 20 - Compressed size\n    entry.compressedSize = buffer.readUInt32LE(20);\n    // 24 - Uncompressed size\n    entry.uncompressedSize = buffer.readUInt32LE(24);\n    // 28 - File name length (n)\n    entry.fileNameLength = buffer.readUInt16LE(28);\n    // 30 - Extra field length (m)\n    entry.extraFieldLength = buffer.readUInt16LE(30);\n    // 32 - File comment length (k)\n    entry.fileCommentLength = buffer.readUInt16LE(32);\n    // 34 - Disk number where file starts\n    // 36 - Internal file attributes\n    entry.internalFileAttributes = buffer.readUInt16LE(36);\n    // 38 - External file attributes\n    entry.externalFileAttributes = buffer.readUInt32LE(38);\n    // 42 - Relative offset of local file header\n    entry.relativeOffsetOfLocalHeader = buffer.readUInt32LE(42);\n\n    if (entry.generalPurposeBitFlag & 0x40) return emitErrorAndAutoClose(self, new Error(\"strong encryption is not supported\"));\n\n    self.readEntryCursor += 46;\n\n    buffer = newBuffer(entry.fileNameLength + entry.extraFieldLength + entry.fileCommentLength);\n    readAndAssertNoEof(self.reader, buffer, 0, buffer.length, self.readEntryCursor, function(err) {\n      if (err) return emitErrorAndAutoClose(self, err);\n      if (self.emittedError) return;\n      // 46 - File name\n      var isUtf8 = (entry.generalPurposeBitFlag & 0x800) !== 0;\n      entry.fileName = self.decodeStrings ? decodeBuffer(buffer, 0, entry.fileNameLength, isUtf8)\n                                          : buffer.slice(0, entry.fileNameLength);\n\n      // 46+n - Extra field\n      var fileCommentStart = entry.fileNameLength + entry.extraFieldLength;\n      var extraFieldBuffer = buffer.slice(entry.fileNameLength, fileCommentStart);\n      entry.extraFields = [];\n      var i = 0;\n      while (i < extraFieldBuffer.length - 3) {\n        var headerId = extraFieldBuffer.readUInt16LE(i + 0);\n        var dataSize = extraFieldBuffer.readUInt16LE(i + 2);\n        var dataStart = i + 4;\n        var dataEnd = dataStart + dataSize;\n        if (dataEnd > extraFieldBuffer.length) return emitErrorAndAutoClose(self, new Error(\"extra field length exceeds extra field buffer size\"));\n        var dataBuffer = newBuffer(dataSize);\n        extraFieldBuffer.copy(dataBuffer, 0, dataStart, dataEnd);\n        entry.extraFields.push({\n          id: headerId,\n          data: dataBuffer,\n        });\n        i = dataEnd;\n      }\n\n      // 46+n+m - File comment\n      entry.fileComment = self.decodeStrings ? decodeBuffer(buffer, fileCommentStart, fileCommentStart + entry.fileCommentLength, isUtf8)\n                                             : buffer.slice(fileCommentStart, fileCommentStart + entry.fileCommentLength);\n      // compatibility hack for https://github.com/thejoshwolfe/yauzl/issues/47\n      entry.comment = entry.fileComment;\n\n      self.readEntryCursor += buffer.length;\n      self.entriesRead += 1;\n\n      if (entry.uncompressedSize            === 0xffffffff ||\n          entry.compressedSize              === 0xffffffff ||\n          entry.relativeOffsetOfLocalHeader === 0xffffffff) {\n        // ZIP64 format\n        // find the Zip64 Extended Information Extra Field\n        var zip64EiefBuffer = null;\n        for (var i = 0; i < entry.extraFields.length; i++) {\n          var extraField = entry.extraFields[i];\n          if (extraField.id === 0x0001) {\n            zip64EiefBuffer = extraField.data;\n            break;\n          }\n        }\n        if (zip64EiefBuffer == null) {\n          return emitErrorAndAutoClose(self, new Error(\"expected zip64 extended information extra field\"));\n        }\n        var index = 0;\n        // 0 - Original Size          8 bytes\n        if (entry.uncompressedSize === 0xffffffff) {\n          if (index + 8 > zip64EiefBuffer.length) {\n            return emitErrorAndAutoClose(self, new Error(\"zip64 extended information extra field does not include uncompressed size\"));\n          }\n          entry.uncompressedSize = readUInt64LE(zip64EiefBuffer, index);\n          index += 8;\n        }\n        // 8 - Compressed Size        8 bytes\n        if (entry.compressedSize === 0xffffffff) {\n          if (index + 8 > zip64EiefBuffer.length) {\n            return emitErrorAndAutoClose(self, new Error(\"zip64 extended information extra field does not include compressed size\"));\n          }\n          entry.compressedSize = readUInt64LE(zip64EiefBuffer, index);\n          index += 8;\n        }\n        // 16 - Relative Header Offset 8 bytes\n        if (entry.relativeOffsetOfLocalHeader === 0xffffffff) {\n          if (index + 8 > zip64EiefBuffer.length) {\n            return emitErrorAndAutoClose(self, new Error(\"zip64 extended information extra field does not include relative header offset\"));\n          }\n          entry.relativeOffsetOfLocalHeader = readUInt64LE(zip64EiefBuffer, index);\n          index += 8;\n        }\n        // 24 - Disk Start Number      4 bytes\n      }\n\n      // check for Info-ZIP Unicode Path Extra Field (0x7075)\n      // see https://github.com/thejoshwolfe/yauzl/issues/33\n      if (self.decodeStrings) {\n        for (var i = 0; i < entry.extraFields.length; i++) {\n          var extraField = entry.extraFields[i];\n          if (extraField.id === 0x7075) {\n            if (extraField.data.length < 6) {\n              // too short to be meaningful\n              continue;\n            }\n            // Version       1 byte      version of this extra field, currently 1\n            if (extraField.data.readUInt8(0) !== 1) {\n              // > Changes may not be backward compatible so this extra\n              // > field should not be used if the version is not recognized.\n              continue;\n            }\n            // NameCRC32     4 bytes     File Name Field CRC32 Checksum\n            var oldNameCrc32 = extraField.data.readUInt32LE(1);\n            if (crc32.unsigned(buffer.slice(0, entry.fileNameLength)) !== oldNameCrc32) {\n              // > If the CRC check fails, this UTF-8 Path Extra Field should be\n              // > ignored and the File Name field in the header should be used instead.\n              continue;\n            }\n            // UnicodeName   Variable    UTF-8 version of the entry File Name\n            entry.fileName = decodeBuffer(extraField.data, 5, extraField.data.length, true);\n            break;\n          }\n        }\n      }\n\n      // validate file size\n      if (self.validateEntrySizes && entry.compressionMethod === 0) {\n        var expectedCompressedSize = entry.uncompressedSize;\n        if (entry.isEncrypted()) {\n          // traditional encryption prefixes the file data with a header\n          expectedCompressedSize += 12;\n        }\n        if (entry.compressedSize !== expectedCompressedSize) {\n          var msg = \"compressed/uncompressed size mismatch for stored file: \" + entry.compressedSize + \" != \" + entry.uncompressedSize;\n          return emitErrorAndAutoClose(self, new Error(msg));\n        }\n      }\n\n      if (self.decodeStrings) {\n        if (!self.strictFileNames) {\n          // allow backslash\n          entry.fileName = entry.fileName.replace(/\\\\/g, \"/\");\n        }\n        var errorMessage = validateFileName(entry.fileName, self.validateFileNameOptions);\n        if (errorMessage != null) return emitErrorAndAutoClose(self, new Error(errorMessage));\n      }\n      self.emit(\"entry\", entry);\n\n      if (!self.lazyEntries) self._readEntry();\n    });\n  });\n};\n\nZipFile.prototype.openReadStream = function(entry, options, callback) {\n  var self = this;\n  // parameter validation\n  var relativeStart = 0;\n  var relativeEnd = entry.compressedSize;\n  if (callback == null) {\n    callback = options;\n    options = {};\n  } else {\n    // validate options that the caller has no excuse to get wrong\n    if (options.decrypt != null) {\n      if (!entry.isEncrypted()) {\n        throw new Error(\"options.decrypt can only be specified for encrypted entries\");\n      }\n      if (options.decrypt !== false) throw new Error(\"invalid options.decrypt value: \" + options.decrypt);\n      if (entry.isCompressed()) {\n        if (options.decompress !== false) throw new Error(\"entry is encrypted and compressed, and options.decompress !== false\");\n      }\n    }\n    if (options.decompress != null) {\n      if (!entry.isCompressed()) {\n        throw new Error(\"options.decompress can only be specified for compressed entries\");\n      }\n      if (!(options.decompress === false || options.decompress === true)) {\n        throw new Error(\"invalid options.decompress value: \" + options.decompress);\n      }\n    }\n    if (options.start != null || options.end != null) {\n      if (entry.isCompressed() && options.decompress !== false) {\n        throw new Error(\"start/end range not allowed for compressed entry without options.decompress === false\");\n      }\n      if (entry.isEncrypted() && options.decrypt !== false) {\n        throw new Error(\"start/end range not allowed for encrypted entry without options.decrypt === false\");\n      }\n    }\n    if (options.start != null) {\n      relativeStart = options.start;\n      if (relativeStart < 0) throw new Error(\"options.start < 0\");\n      if (relativeStart > entry.compressedSize) throw new Error(\"options.start > entry.compressedSize\");\n    }\n    if (options.end != null) {\n      relativeEnd = options.end;\n      if (relativeEnd < 0) throw new Error(\"options.end < 0\");\n      if (relativeEnd > entry.compressedSize) throw new Error(\"options.end > entry.compressedSize\");\n      if (relativeEnd < relativeStart) throw new Error(\"options.end < options.start\");\n    }\n  }\n  // any further errors can either be caused by the zipfile,\n  // or were introduced in a minor version of yauzl,\n  // so should be passed to the client rather than thrown.\n  if (!self.isOpen) return callback(new Error(\"closed\"));\n  if (entry.isEncrypted()) {\n    if (options.decrypt !== false) return callback(new Error(\"entry is encrypted, and options.decrypt !== false\"));\n  }\n  // make sure we don't lose the fd before we open the actual read stream\n  self.reader.ref();\n  var buffer = newBuffer(30);\n  readAndAssertNoEof(self.reader, buffer, 0, buffer.length, entry.relativeOffsetOfLocalHeader, function(err) {\n    try {\n      if (err) return callback(err);\n      // 0 - Local file header signature = 0x04034b50\n      var signature = buffer.readUInt32LE(0);\n      if (signature !== 0x04034b50) {\n        return callback(new Error(\"invalid local file header signature: 0x\" + signature.toString(16)));\n      }\n      // all this should be redundant\n      // 4 - Version needed to extract (minimum)\n      // 6 - General purpose bit flag\n      // 8 - Compression method\n      // 10 - File last modification time\n      // 12 - File last modification date\n      // 14 - CRC-32\n      // 18 - Compressed size\n      // 22 - Uncompressed size\n      // 26 - File name length (n)\n      var fileNameLength = buffer.readUInt16LE(26);\n      // 28 - Extra field length (m)\n      var extraFieldLength = buffer.readUInt16LE(28);\n      // 30 - File name\n      // 30+n - Extra field\n      var localFileHeaderEnd = entry.relativeOffsetOfLocalHeader + buffer.length + fileNameLength + extraFieldLength;\n      var decompress;\n      if (entry.compressionMethod === 0) {\n        // 0 - The file is stored (no compression)\n        decompress = false;\n      } else if (entry.compressionMethod === 8) {\n        // 8 - The file is Deflated\n        decompress = options.decompress != null ? options.decompress : true;\n      } else {\n        return callback(new Error(\"unsupported compression method: \" + entry.compressionMethod));\n      }\n      var fileDataStart = localFileHeaderEnd;\n      var fileDataEnd = fileDataStart + entry.compressedSize;\n      if (entry.compressedSize !== 0) {\n        // bounds check now, because the read streams will probably not complain loud enough.\n        // since we're dealing with an unsigned offset plus an unsigned size,\n        // we only have 1 thing to check for.\n        if (fileDataEnd > self.fileSize) {\n          return callback(new Error(\"file data overflows file bounds: \" +\n              fileDataStart + \" + \" + entry.compressedSize + \" > \" + self.fileSize));\n        }\n      }\n      var readStream = self.reader.createReadStream({\n        start: fileDataStart + relativeStart,\n        end: fileDataStart + relativeEnd,\n      });\n      var endpointStream = readStream;\n      if (decompress) {\n        var destroyed = false;\n        var inflateFilter = zlib.createInflateRaw();\n        readStream.on(\"error\", function(err) {\n          // setImmediate here because errors can be emitted during the first call to pipe()\n          setImmediate(function() {\n            if (!destroyed) inflateFilter.emit(\"error\", err);\n          });\n        });\n        readStream.pipe(inflateFilter);\n\n        if (self.validateEntrySizes) {\n          endpointStream = new AssertByteCountStream(entry.uncompressedSize);\n          inflateFilter.on(\"error\", function(err) {\n            // forward zlib errors to the client-visible stream\n            setImmediate(function() {\n              if (!destroyed) endpointStream.emit(\"error\", err);\n            });\n          });\n          inflateFilter.pipe(endpointStream);\n        } else {\n          // the zlib filter is the client-visible stream\n          endpointStream = inflateFilter;\n        }\n        // this is part of yauzl's API, so implement this function on the client-visible stream\n        endpointStream.destroy = function() {\n          destroyed = true;\n          if (inflateFilter !== endpointStream) inflateFilter.unpipe(endpointStream);\n          readStream.unpipe(inflateFilter);\n          // TODO: the inflateFilter may cause a memory leak. see Issue #27.\n          readStream.destroy();\n        };\n      }\n      callback(null, endpointStream);\n    } finally {\n      self.reader.unref();\n    }\n  });\n};\n\nfunction Entry() {\n}\nEntry.prototype.getLastModDate = function() {\n  return dosDateTimeToDate(this.lastModFileDate, this.lastModFileTime);\n};\nEntry.prototype.isEncrypted = function() {\n  return (this.generalPurposeBitFlag & 0x1) !== 0;\n};\nEntry.prototype.isCompressed = function() {\n  return this.compressionMethod === 8;\n};\n\nfunction dosDateTimeToDate(date, time) {\n  var day = date & 0x1f; // 1-31\n  var month = (date >> 5 & 0xf) - 1; // 1-12, 0-11\n  var year = (date >> 9 & 0x7f) + 1980; // 0-128, 1980-2108\n\n  var millisecond = 0;\n  var second = (time & 0x1f) * 2; // 0-29, 0-58 (even numbers)\n  var minute = time >> 5 & 0x3f; // 0-59\n  var hour = time >> 11 & 0x1f; // 0-23\n\n  return new Date(year, month, day, hour, minute, second, millisecond);\n}\n\nfunction validateFileName(fileName) {\n  if (fileName.indexOf(\"\\\\\") !== -1) {\n    return \"invalid characters in fileName: \" + fileName;\n  }\n  if (/^[a-zA-Z]:/.test(fileName) || /^\\//.test(fileName)) {\n    return \"absolute path: \" + fileName;\n  }\n  if (fileName.split(\"/\").indexOf(\"..\") !== -1) {\n    return \"invalid relative path: \" + fileName;\n  }\n  // all good\n  return null;\n}\n\nfunction readAndAssertNoEof(reader, buffer, offset, length, position, callback) {\n  if (length === 0) {\n    // fs.read will throw an out-of-bounds error if you try to read 0 bytes from a 0 byte file\n    return setImmediate(function() { callback(null, newBuffer(0)); });\n  }\n  reader.read(buffer, offset, length, position, function(err, bytesRead) {\n    if (err) return callback(err);\n    if (bytesRead < length) {\n      return callback(new Error(\"unexpected EOF\"));\n    }\n    callback();\n  });\n}\n\nutil.inherits(AssertByteCountStream, Transform);\nfunction AssertByteCountStream(byteCount) {\n  Transform.call(this);\n  this.actualByteCount = 0;\n  this.expectedByteCount = byteCount;\n}\nAssertByteCountStream.prototype._transform = function(chunk, encoding, cb) {\n  this.actualByteCount += chunk.length;\n  if (this.actualByteCount > this.expectedByteCount) {\n    var msg = \"too many bytes in the stream. expected \" + this.expectedByteCount + \". got at least \" + this.actualByteCount;\n    return cb(new Error(msg));\n  }\n  cb(null, chunk);\n};\nAssertByteCountStream.prototype._flush = function(cb) {\n  if (this.actualByteCount < this.expectedByteCount) {\n    var msg = \"not enough bytes in the stream. expected \" + this.expectedByteCount + \". got only \" + this.actualByteCount;\n    return cb(new Error(msg));\n  }\n  cb();\n};\n\nutil.inherits(RandomAccessReader, EventEmitter);\nfunction RandomAccessReader() {\n  EventEmitter.call(this);\n  this.refCount = 0;\n}\nRandomAccessReader.prototype.ref = function() {\n  this.refCount += 1;\n};\nRandomAccessReader.prototype.unref = function() {\n  var self = this;\n  self.refCount -= 1;\n\n  if (self.refCount > 0) return;\n  if (self.refCount < 0) throw new Error(\"invalid unref\");\n\n  self.close(onCloseDone);\n\n  function onCloseDone(err) {\n    if (err) return self.emit('error', err);\n    self.emit('close');\n  }\n};\nRandomAccessReader.prototype.createReadStream = function(options) {\n  var start = options.start;\n  var end = options.end;\n  if (start === end) {\n    var emptyStream = new PassThrough();\n    setImmediate(function() {\n      emptyStream.end();\n    });\n    return emptyStream;\n  }\n  var stream = this._readStreamForRange(start, end);\n\n  var destroyed = false;\n  var refUnrefFilter = new RefUnrefFilter(this);\n  stream.on(\"error\", function(err) {\n    setImmediate(function() {\n      if (!destroyed) refUnrefFilter.emit(\"error\", err);\n    });\n  });\n  refUnrefFilter.destroy = function() {\n    stream.unpipe(refUnrefFilter);\n    refUnrefFilter.unref();\n    stream.destroy();\n  };\n\n  var byteCounter = new AssertByteCountStream(end - start);\n  refUnrefFilter.on(\"error\", function(err) {\n    setImmediate(function() {\n      if (!destroyed) byteCounter.emit(\"error\", err);\n    });\n  });\n  byteCounter.destroy = function() {\n    destroyed = true;\n    refUnrefFilter.unpipe(byteCounter);\n    refUnrefFilter.destroy();\n  };\n\n  return stream.pipe(refUnrefFilter).pipe(byteCounter);\n};\nRandomAccessReader.prototype._readStreamForRange = function(start, end) {\n  throw new Error(\"not implemented\");\n};\nRandomAccessReader.prototype.read = function(buffer, offset, length, position, callback) {\n  var readStream = this.createReadStream({start: position, end: position + length});\n  var writeStream = new Writable();\n  var written = 0;\n  writeStream._write = function(chunk, encoding, cb) {\n    chunk.copy(buffer, offset + written, 0, chunk.length);\n    written += chunk.length;\n    cb();\n  };\n  writeStream.on(\"finish\", callback);\n  readStream.on(\"error\", function(error) {\n    callback(error);\n  });\n  readStream.pipe(writeStream);\n};\nRandomAccessReader.prototype.close = function(callback) {\n  setImmediate(callback);\n};\n\nutil.inherits(RefUnrefFilter, PassThrough);\nfunction RefUnrefFilter(context) {\n  PassThrough.call(this);\n  this.context = context;\n  this.context.ref();\n  this.unreffedYet = false;\n}\nRefUnrefFilter.prototype._flush = function(cb) {\n  this.unref();\n  cb();\n};\nRefUnrefFilter.prototype.unref = function(cb) {\n  if (this.unreffedYet) return;\n  this.unreffedYet = true;\n  this.context.unref();\n};\n\nvar cp437 = '\\u0000☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼ !\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~⌂ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ';\nfunction decodeBuffer(buffer, start, end, isUtf8) {\n  if (isUtf8) {\n    return buffer.toString(\"utf8\", start, end);\n  } else {\n    var result = \"\";\n    for (var i = start; i < end; i++) {\n      result += cp437[buffer[i]];\n    }\n    return result;\n  }\n}\n\nfunction readUInt64LE(buffer, offset) {\n  // there is no native function for this, because we can't actually store 64-bit integers precisely.\n  // after 53 bits, JavaScript's Number type (IEEE 754 double) can't store individual integers anymore.\n  // but since 53 bits is a whole lot more than 32 bits, we do our best anyway.\n  var lower32 = buffer.readUInt32LE(offset);\n  var upper32 = buffer.readUInt32LE(offset + 4);\n  // we can't use bitshifting here, because JavaScript bitshifting only works on 32-bit integers.\n  return upper32 * 0x100000000 + lower32;\n  // as long as we're bounds checking the result of this function against the total file size,\n  // we'll catch any overflow errors, because we already made sure the total file size was within reason.\n}\n\n// Node 10 deprecated new Buffer().\nvar newBuffer;\nif (typeof Buffer.allocUnsafe === \"function\") {\n  newBuffer = function(len) {\n    return Buffer.allocUnsafe(len);\n  };\n} else {\n  newBuffer = function(len) {\n    return new Buffer(len);\n  };\n}\n\nfunction defaultCallback(err) {\n  if (err) throw err;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/yauzl/index.js\n");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("assert");;

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");;

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

"use strict";
module.exports = require("child_process");;

/***/ }),

/***/ "constants":
/*!****************************!*\
  !*** external "constants" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("constants");;

/***/ }),

/***/ "electron":
/*!***************************!*\
  !*** external "electron" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("electron");;

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");;

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");;

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");;

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");;

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");;

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");;

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");;

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/harmony module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.hmd = (module) => {
/******/ 			module = Object.create(module);
/******/ 			if (!module.children) module.children = [];
/******/ 			Object.defineProperty(module, 'exports', {
/******/ 				enumerable: true,
/******/ 				set: () => {
/******/ 					throw new Error('ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: ' + module.id);
/******/ 				}
/******/ 			});
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/main/main.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});